"""
Rate limiting utilities
"""
import asyncio
import discord
from discord.ext import tasks
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class RateLimiter:
    """Class qu·∫£n l√Ω rate limiting cho commands"""
    
    def __init__(self, max_concurrent=2, queue_delay=45):
        """
        Kh·ªüi t·∫°o rate limiter v·ªõi c√†i ƒë·∫∑t b·∫£o th·ªß h∆°n
        
        Args:
            max_concurrent: S·ªë l∆∞·ª£ng commands t·ªëi ƒëa ƒë·ªìng th·ªùi (gi·∫£m t·ª´ 3 xu·ªëng 2)
            queue_delay: Th·ªùi gian delay ∆∞·ªõc t√≠nh cho queue (tƒÉng t·ª´ 30 l√™n 45 gi√¢y)
        """
        self._active_commands = 0
        self._max_concurrent_commands = max_concurrent
        self._command_queue = asyncio.Queue()
        self._queue_delay = queue_delay
        self._started = False
        
        # Th√™m exponential backoff cho Discord API
        self._api_call_count = 0
        self._last_api_reset = datetime.now()
        self._api_limit_per_minute = 30  # Gi·ªõi h·∫°n 30 API calls/ph√∫t
        
        # Queue processor s·∫Ω ƒë∆∞·ª£c start sau khi c√≥ event loop
    
    @tasks.loop(seconds=2)  # TƒÉng t·ª´ 1 gi√¢y l√™n 2 gi√¢y ƒë·ªÉ gi·∫£m t·∫£i
    async def command_queue_processor(self):
        """Background task ƒë·ªÉ x·ª≠ l√Ω command queue v·ªõi rate limiting c·∫£i thi·ªán"""
        try:
            # Ki·ªÉm tra API rate limit
            await self._check_api_rate_limit()
            
            if not self._command_queue.empty() and self._active_commands < self._max_concurrent_commands:
                # L·∫•y command t·ª´ queue
                queued_item = await asyncio.wait_for(self._command_queue.get(), timeout=0.1)
                ctx, command_func, args, kwargs = queued_item
                
                # TƒÉng counter
                self._active_commands += 1
                
                try:
                    # Th√™m delay nh·ªè ƒë·ªÉ tr√°nh spam
                    await asyncio.sleep(0.5)
                    
                    # Th·ª±c thi command
                    await command_func(*args, **kwargs)
                    
                    # Track API call
                    self._api_call_count += 1
                    
                except discord.HTTPException as e:
                    if e.status == 429:  # Rate limited
                        logger.warning(f"Discord rate limit hit: {e}")
                        # ƒê∆∞a command tr·ªü l·∫°i queue ƒë·ªÉ th·ª≠ l·∫°i sau
                        await self._command_queue.put((ctx, command_func, args, kwargs))
                        await asyncio.sleep(2)  # Ch·ªù l√¢u h∆°n khi b·ªã rate limit
                    else:
                        logger.error(f"Discord HTTP error: {e}")
                        try:
                            await ctx.reply(f"{ctx.author.mention} ‚ùå L·ªói Discord API: {str(e)[:50]}", mention_author=True)
                        except:
                            pass
                except Exception as e:
                    logger.error(f"Error executing queued command: {e}")
                    try:
                        await ctx.reply(f"{ctx.author.mention} ‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh t·ª´ queue: {str(e)[:50]}", mention_author=True)
                    except:
                        pass
                finally:
                    # Gi·∫£m counter
                    self._active_commands -= 1
                    
        except asyncio.TimeoutError:
            pass  # Kh√¥ng c√≥ command trong queue
        except Exception as e:
            logger.error(f"Error in command queue processor: {e}")
    
    async def _check_api_rate_limit(self):
        """Ki·ªÉm tra v√† reset API rate limit counter"""
        now = datetime.now()
        if (now - self._last_api_reset).total_seconds() >= 60:
            # Reset counter m·ªói ph√∫t
            self._api_call_count = 0
            self._last_api_reset = now
        
        # N·∫øu ƒë√£ ƒë·∫°t gi·ªõi h·∫°n, ch·ªù
        if self._api_call_count >= self._api_limit_per_minute:
            wait_time = 60 - (now - self._last_api_reset).total_seconds()
            if wait_time > 0:
                logger.info(f"API rate limit reached, waiting {wait_time:.1f} seconds")
                await asyncio.sleep(wait_time)
    
    async def execute_with_rate_limit(self, ctx, command_func, *args, **kwargs):
        """
        Th·ª±c thi command v·ªõi rate limiting c·∫£i thi·ªán
        
        Args:
            ctx: Discord context
            command_func: Function c·∫ßn th·ª±c thi
            *args, **kwargs: Arguments cho function
        """
        # Ki·ªÉm tra API rate limit tr∆∞·ªõc
        await self._check_api_rate_limit()
        
        if self._active_commands < self._max_concurrent_commands:
            # C√≥ slot tr·ªëng, th·ª±c thi ngay
            self._active_commands += 1
            try:
                # Th√™m delay nh·ªè ƒë·ªÉ tr√°nh spam
                await asyncio.sleep(0.3)
                
                await command_func(*args, **kwargs)
                
                # Track API call
                self._api_call_count += 1
                
            except discord.HTTPException as e:
                if e.status == 429:  # Rate limited
                    logger.warning(f"Discord rate limit hit in direct execution: {e}")
                    # Th√™m v√†o queue ƒë·ªÉ th·ª≠ l·∫°i sau
                    await self._command_queue.put((ctx, command_func, args, kwargs))
                    await ctx.reply(
                        f"{ctx.author.mention} ‚è≥ Bot ƒëang b·ªã gi·ªõi h·∫°n t·ªëc ƒë·ªô Discord. L·ªánh ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ƒë·ª£i.",
                        mention_author=True
                    )
                else:
                    raise  # Re-raise other HTTP exceptions
            finally:
                self._active_commands -= 1
        else:
            # H·∫øt slot, th√™m v√†o queue
            await self._command_queue.put((ctx, command_func, args, kwargs))
            
            # Th√¥ng b√°o cho user v·ªõi th√¥ng tin c·∫≠p nh·∫≠t
            queue_size = self._command_queue.qsize()
            estimated_wait = queue_size * self._queue_delay
            
            embed = discord.Embed(
                title="‚è≥ L·ªánh ƒëang trong h√†ng ƒë·ª£i",
                description=f"{ctx.author.mention}, hi·ªán t·∫°i ƒëang c√≥ {self._active_commands}/{self._max_concurrent_commands} l·ªánh ƒëang ch·∫°y.",
                color=discord.Color.orange()
            )
            embed.add_field(
                name="V·ªã tr√≠ trong h√†ng ƒë·ª£i", 
                value=f"#{queue_size}", 
                inline=True
            )
            embed.add_field(
                name="Th·ªùi gian ch·ªù ∆∞·ªõc t√≠nh", 
                value=f"~{estimated_wait} gi√¢y", 
                inline=True
            )
            embed.add_field(
                name="üí° L√Ω do", 
                value=f"ƒê·ªÉ tr√°nh Discord rate limiting, bot ch·ªâ x·ª≠ l√Ω t·ªëi ƒëa {self._max_concurrent_commands} l·ªánh ƒë·ªìng th·ªùi.", 
                inline=False
            )
            embed.add_field(
                name="üìä API Status",
                value=f"API calls: {self._api_call_count}/{self._api_limit_per_minute}/ph√∫t",
                inline=True
            )
            
            await ctx.reply(embed=embed, mention_author=True)
            logger.info(f"Command {ctx.command.name} from {ctx.author} queued. Queue size: {queue_size}")
    
    def get_status(self):
        """
        L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa rate limiter v·ªõi th√¥ng tin API
        
        Returns:
            dict: Th√¥ng tin tr·∫°ng th√°i
        """
        return {
            'active_commands': self._active_commands,
            'max_concurrent': self._max_concurrent_commands,
            'queue_size': self._command_queue.qsize(),
            'queue_delay': self._queue_delay,
            'api_calls': self._api_call_count,
            'api_limit': self._api_limit_per_minute,
            'api_reset_time': self._last_api_reset.strftime('%H:%M:%S')
        }
    
    def start(self):
        """Start rate limiter background tasks"""
        if not self._started:
            self.command_queue_processor.start()
            self._started = True
            logger.info("Rate limiter started")
    
    def stop(self):
        """D·ª´ng rate limiter"""
        if hasattr(self, 'command_queue_processor') and self._started:
            self.command_queue_processor.cancel()
            self._started = False
