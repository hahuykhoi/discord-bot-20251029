"""
Network optimization v√† ping monitoring utilities
"""
import asyncio
import aiohttp
import time
import logging
from datetime import datetime, timedelta
from collections import deque
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)

class NetworkOptimizer:
    """Class t·ªëi ∆∞u h√≥a network performance"""
    
    def __init__(self, bot_instance):
        """
        Kh·ªüi t·∫°o network optimizer
        
        Args:
            bot_instance: Instance c·ªßa AutoReplyBot
        """
        self.bot_instance = bot_instance
        self.ping_history = deque(maxlen=50)  # L∆∞u 50 ping measurements g·∫ßn nh·∫•t
        self.api_ping_history = deque(maxlen=50)
        self.connection_issues = 0
        self.last_optimization = datetime.now()
        
        # Network settings
        self.timeout_settings = aiohttp.ClientTimeout(
            total=30,      # Total timeout
            connect=10,    # Connection timeout
            sock_read=15   # Socket read timeout
        )
        
        # Connection pool settings
        self.connector_settings = {
            'limit': 100,           # Total connection pool size
            'limit_per_host': 30,   # Connections per host
            'ttl_dns_cache': 300,   # DNS cache TTL (5 minutes)
            'use_dns_cache': True,
            'keepalive_timeout': 30,
            'enable_cleanup_closed': True
        }
    
    async def measure_api_ping(self, ctx) -> int:
        """
        ƒêo API ping m·ªôt c√°ch t·ªëi ∆∞u h∆°n
        
        Args:
            ctx: Discord context
            
        Returns:
            int: Ping in milliseconds
        """
        try:
            # Method 1: ƒêo th·ªùi gian edit message (ch√≠nh x√°c h∆°n)
            start_time = time.perf_counter()
            message = await ctx.send("üèì Measuring ping...")
            
            edit_start = time.perf_counter()
            await message.edit(content="üèì Ping measured!")
            edit_end = time.perf_counter()
            
            # Cleanup
            await asyncio.sleep(0.5)
            await message.delete()
            
            # T√≠nh ping t·ª´ edit operation (ch√≠nh x√°c h∆°n)
            api_ping = round((edit_end - edit_start) * 1000)
            
            # L∆∞u v√†o history
            self.api_ping_history.append(api_ping)
            
            return api_ping
            
        except Exception as e:
            logger.error(f"Error measuring API ping: {e}")
            return 9999  # Return high ping on error
    
    async def measure_websocket_ping(self) -> int:
        """
        ƒêo WebSocket ping (Bot Latency)
        
        Returns:
            int: WebSocket ping in milliseconds
        """
        try:
            ws_ping = round(self.bot_instance.bot.latency * 1000)
            self.ping_history.append(ws_ping)
            return ws_ping
        except Exception as e:
            logger.error(f"Error measuring WebSocket ping: {e}")
            return 9999
    
    def get_ping_statistics(self) -> Dict:
        """
        L·∫•y th·ªëng k√™ ping
        
        Returns:
            Dict: Ping statistics
        """
        if not self.ping_history or not self.api_ping_history:
            return {
                'ws_avg': 0, 'ws_min': 0, 'ws_max': 0,
                'api_avg': 0, 'api_min': 0, 'api_max': 0,
                'status': 'No data'
            }
        
        ws_pings = list(self.ping_history)
        api_pings = list(self.api_ping_history)
        
        return {
            'ws_avg': round(sum(ws_pings) / len(ws_pings)),
            'ws_min': min(ws_pings),
            'ws_max': max(ws_pings),
            'api_avg': round(sum(api_pings) / len(api_pings)),
            'api_min': min(api_pings),
            'api_max': max(api_pings),
            'status': self._get_connection_status()
        }
    
    def _get_connection_status(self) -> str:
        """
        ƒê√°nh gi√° tr·∫°ng th√°i k·∫øt n·ªëi
        
        Returns:
            str: Connection status
        """
        if not self.api_ping_history:
            return "Unknown"
        
        recent_pings = list(self.api_ping_history)[-10:]  # 10 pings g·∫ßn nh·∫•t
        avg_ping = sum(recent_pings) / len(recent_pings)
        
        if avg_ping < 100:
            return "Excellent"
        elif avg_ping < 300:
            return "Good"
        elif avg_ping < 1000:
            return "Fair"
        elif avg_ping < 3000:
            return "Poor"
        else:
            return "Critical"
    
    async def optimize_connection(self):
        """
        T·ªëi ∆∞u h√≥a k·∫øt n·ªëi Discord
        """
        try:
            # Ch·ªâ optimize n·∫øu ƒë√£ qua 5 ph√∫t t·ª´ l·∫ßn cu·ªëi
            if datetime.now() - self.last_optimization < timedelta(minutes=5):
                return
            
            logger.info("Starting connection optimization...")
            
            # 1. Optimize Discord.py settings
            if hasattr(self.bot_instance.bot, 'http'):
                # TƒÉng timeout cho HTTP requests
                self.bot_instance.bot.http.timeout = 30
                
                # Optimize connector n·∫øu c√≥ th·ªÉ
                if hasattr(self.bot_instance.bot.http, 'connector'):
                    connector = self.bot_instance.bot.http.connector
                    if hasattr(connector, '_limit'):
                        connector._limit = 100
                    if hasattr(connector, '_limit_per_host'):
                        connector._limit_per_host = 30
            
            # 2. Clear DNS cache (n·∫øu c√≥ th·ªÉ)
            try:
                import socket
                # Force DNS refresh
                socket.getaddrinfo('discord.com', 443)
            except:
                pass
            
            # 3. Optimize bot settings
            self._optimize_bot_settings()
            
            self.last_optimization = datetime.now()
            logger.info("Connection optimization completed")
            
        except Exception as e:
            logger.error(f"Error during connection optimization: {e}")
    
    def _optimize_bot_settings(self):
        """
        T·ªëi ∆∞u h√≥a c√†i ƒë·∫∑t bot
        """
        try:
            # Gi·∫£m message cache ƒë·ªÉ ti·∫øt ki·ªám RAM v√† bandwidth
            if hasattr(self.bot_instance.bot, '_connection'):
                self.bot_instance.bot._connection.max_messages = 500
            
            # Optimize heartbeat n·∫øu c√≥ th·ªÉ
            if hasattr(self.bot_instance.bot, 'ws') and self.bot_instance.bot.ws:
                # Kh√¥ng thay ƒë·ªïi heartbeat interval v√¨ Discord control
                pass
                
        except Exception as e:
            logger.error(f"Error optimizing bot settings: {e}")
    
    async def diagnose_connection_issues(self) -> List[str]:
        """
        Ch·∫©n ƒëo√°n v·∫•n ƒë·ªÅ k·∫øt n·ªëi
        
        Returns:
            List[str]: Danh s√°ch v·∫•n ƒë·ªÅ v√† g·ª£i √Ω
        """
        issues = []
        
        # Ki·ªÉm tra ping history
        if self.api_ping_history:
            recent_pings = list(self.api_ping_history)[-5:]
            avg_ping = sum(recent_pings) / len(recent_pings)
            
            if avg_ping > 5000:
                issues.append("üî¥ API ping c·ª±c cao (>5s) - C√≥ th·ªÉ do m·∫°ng ch·∫≠m ho·∫∑c Discord API overload")
            elif avg_ping > 2000:
                issues.append("üü† API ping cao (>2s) - Ki·ªÉm tra k·∫øt n·ªëi internet")
            elif avg_ping > 1000:
                issues.append("üü° API ping trung b√¨nh (>1s) - C√≥ th·ªÉ t·ªëi ∆∞u ƒë∆∞·ª£c")
        
        # Ki·ªÉm tra WebSocket ping
        if self.ping_history:
            recent_ws = list(self.ping_history)[-5:]
            avg_ws = sum(recent_ws) / len(recent_ws)
            
            if avg_ws > 500:
                issues.append("üî¥ WebSocket ping cao - C√≥ th·ªÉ do k·∫øt n·ªëi kh√¥ng ·ªïn ƒë·ªãnh")
        
        # Ki·ªÉm tra connection issues
        if self.connection_issues > 5:
            issues.append(f"‚ö†Ô∏è ƒê√£ c√≥ {self.connection_issues} l·ªói k·∫øt n·ªëi g·∫ßn ƒë√¢y")
        
        # G·ª£i √Ω t·ªëi ∆∞u h√≥a
        if not issues:
            issues.append("‚úÖ K·∫øt n·ªëi ·ªïn ƒë·ªãnh")
        else:
            issues.extend([
                "",
                "üí° G·ª£i √Ω t·ªëi ∆∞u h√≥a:",
                "‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi internet",
                "‚Ä¢ Restart router/modem",
                "‚Ä¢ Th·ª≠ ƒë·ªïi DNS (8.8.8.8, 1.1.1.1)",
                "‚Ä¢ Ki·ªÉm tra firewall/antivirus",
                "‚Ä¢ Restart bot n·∫øu c·∫ßn thi·∫øt"
            ])
        
        return issues
    
    def record_connection_issue(self):
        """
        Ghi nh·∫≠n l·ªói k·∫øt n·ªëi
        """
        self.connection_issues += 1
        logger.warning(f"Connection issue recorded. Total: {self.connection_issues}")
    
    def reset_connection_issues(self):
        """
        Reset counter l·ªói k·∫øt n·ªëi
        """
        self.connection_issues = 0
        logger.info("Connection issues counter reset")
    
    def get_network_stats(self) -> Dict:
        """
        L·∫•y th·ªëng k√™ network
        
        Returns:
            Dict: Network statistics
        """
        ping_stats = self.get_ping_statistics()
        
        return {
            'ping_stats': ping_stats,
            'connection_issues': self.connection_issues,
            'last_optimization': self.last_optimization.strftime('%H:%M:%S'),
            'ping_samples': len(self.ping_history),
            'api_samples': len(self.api_ping_history)
        }
