# -*- coding: utf-8 -*-
"""
DM Management Commands - Qu·∫£n l√Ω tin nh·∫Øn DM
"""
import discord
from discord.ext import commands
import logging
import json
import os
from datetime import datetime, timedelta
import asyncio
from .base import BaseCommand

logger = logging.getLogger(__name__)

class DMManagementCommands(BaseCommand):
    """Class ch·ª©a c√°c commands qu·∫£n l√Ω DM"""
    
    def __init__(self, bot_instance):
        super().__init__(bot_instance)
        self.dm_history_file = "dm_history.json"
        self.dm_history = self.load_dm_history()
        self.cleanup_task = None
        self.cleanup_started = False
    
    def load_dm_history(self):
        """Load l·ªãch s·ª≠ DM t·ª´ file"""
        try:
            if os.path.exists(self.dm_history_file):
                with open(self.dm_history_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return []
        except Exception as e:
            logger.error(f"Error loading DM history: {e}")
            return []
    
    def save_dm_history(self):
        """Save l·ªãch s·ª≠ DM v√†o file"""
        try:
            # T·ª± ƒë·ªông cleanup DM c≈© h∆°n 3 ng√†y tr∆∞·ªõc khi save
            self.cleanup_old_dms()
            
            # Gi·ªØ t·ªëi ƒëa 500 tin nh·∫Øn DM g·∫ßn nh·∫•t
            if len(self.dm_history) > 500:
                self.dm_history = self.dm_history[-500:]
            
            with open(self.dm_history_file, 'w', encoding='utf-8') as f:
                json.dump(self.dm_history, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Error saving DM history: {e}")
    
    def cleanup_old_dms(self):
        """X√≥a DM c≈© h∆°n 3 ng√†y"""
        try:
            cutoff_time = datetime.now() - timedelta(days=3)
            original_count = len(self.dm_history)
            
            # L·ªçc ch·ªâ gi·ªØ DM trong 3 ng√†y g·∫ßn ƒë√¢y
            self.dm_history = [
                dm for dm in self.dm_history
                if datetime.fromisoformat(dm['timestamp']) > cutoff_time
            ]
            
            deleted_count = original_count - len(self.dm_history)
            if deleted_count > 0:
                logger.info(f"Cleaned up {deleted_count} old DM entries (older than 3 days)")
                
        except Exception as e:
            logger.error(f"Error cleaning up old DMs: {e}")
    
    async def start_cleanup_task(self):
        """Kh·ªüi ƒë·ªông task cleanup ƒë·ªãnh k·ª≥"""
        try:
            if self.cleanup_started:
                return
                
            # ƒê·ª£i bot ready
            await self.bot.wait_until_ready()
            
            # T·∫°o task cleanup ch·∫°y m·ªói 6 gi·ªù
            self.cleanup_task = asyncio.create_task(self.periodic_cleanup())
            self.cleanup_started = True
            logger.info("DM cleanup task started - will run every 6 hours")
            
        except Exception as e:
            logger.error(f"Error starting cleanup task: {e}")
    
    async def periodic_cleanup(self):
        """Task cleanup ch·∫°y ƒë·ªãnh k·ª≥ m·ªói 6 gi·ªù"""
        while not self.bot.is_closed():
            try:
                # Cleanup DM c≈©
                original_count = len(self.dm_history)
                self.cleanup_old_dms()
                deleted_count = original_count - len(self.dm_history)
                
                if deleted_count > 0:
                    # Save l·∫°i file sau khi cleanup
                    with open(self.dm_history_file, 'w', encoding='utf-8') as f:
                        json.dump(self.dm_history, f, ensure_ascii=False, indent=2)
                    
                    logger.info(f"Periodic cleanup: Removed {deleted_count} old DM entries")
                
                # ƒê·ª£i 6 gi·ªù (21600 gi√¢y)
                await asyncio.sleep(21600)
                
            except Exception as e:
                logger.error(f"Error in periodic cleanup: {e}")
                # N·∫øu c√≥ l·ªói, ƒë·ª£i 1 gi·ªù r·ªìi th·ª≠ l·∫°i
                await asyncio.sleep(3600)
    
    def register_commands(self):
        """Register DM management commands"""
        
        @self.bot.command(name='checkdms')
        async def check_dms(ctx, limit: int = 10):
            """
            Xem tin nh·∫Øn DM g·∫ßn ƒë√¢y (Ch·ªâ Supreme Admin)
            
            Usage: ;checkdms [s·ªë l∆∞·ª£ng]
            """
            # Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng
            if not self.bot_instance.is_supreme_admin(ctx.author.id):
                await ctx.reply(f"{ctx.author.mention} ‚ùå Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
            
            await self.execute_with_rate_limit(ctx, self._check_dms_impl, ctx, limit)
        
        @self.bot.command(name='cleanupdms')
        async def cleanup_dms_manual(ctx):
            """
            Th·ª±c hi·ªán cleanup DM th·ªß c√¥ng (Ch·ªâ Supreme Admin)
            
            Usage: ;cleanupdms
            """
            # Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng
            if not self.bot_instance.is_supreme_admin(ctx.author.id):
                await ctx.reply(f"{ctx.author.mention} ‚ùå Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
            
            await self.execute_with_rate_limit(ctx, self._cleanup_dms_manual_impl, ctx)
    
    async def _check_dms_impl(self, ctx, limit: int):
        """Implementation th·ª±c t·∫ø c·ªßa checkdms command"""
        try:
            # Validate limit
            if limit < 1:
                limit = 10
            elif limit > 50:
                limit = 50
            
            # L·∫•y tin nh·∫Øn DM g·∫ßn ƒë√¢y
            recent_dms = self.dm_history[-limit:] if self.dm_history else []
            
            if not recent_dms:
                embed = discord.Embed(
                    title="üì≠ Kh√¥ng c√≥ tin nh·∫Øn DM",
                    description="Ch∆∞a c√≥ tin nh·∫Øn DM n√†o ƒë∆∞·ª£c ghi nh·∫≠n.",
                    color=discord.Color.blue()
                )
                embed.add_field(
                    name="üí° Th√¥ng tin",
                    value="H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ghi nh·∫≠n v√† forward tin nh·∫Øn DM ƒë·∫øn Supreme Admin.",
                    inline=False
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # T·∫°o embed hi·ªÉn th·ªã DM
            embed = discord.Embed(
                title=f"üì¨ {len(recent_dms)} tin nh·∫Øn DM g·∫ßn ƒë√¢y",
                description=f"Hi·ªÉn th·ªã {len(recent_dms)} tin nh·∫Øn DM m·ªõi nh·∫•t",
                color=discord.Color.green()
            )
            
            for i, dm in enumerate(reversed(recent_dms), 1):
                try:
                    timestamp = datetime.fromisoformat(dm['timestamp'])
                    time_str = f"<t:{int(timestamp.timestamp())}:R>"
                    
                    content_preview = dm['content'][:100] + ('...' if len(dm['content']) > 100 else '')
                    
                    embed.add_field(
                        name=f"#{i} - {dm['username']} ({dm['user_id']})",
                        value=f"**Th·ªùi gian:** {time_str}\n**N·ªôi dung:** `{content_preview}`",
                        inline=False
                    )
                    
                    # Gi·ªõi h·∫°n s·ªë field ƒë·ªÉ tr√°nh embed qu√° d√†i
                    if i >= 10:
                        break
                        
                except Exception as e:
                    logger.error(f"Error processing DM entry: {e}")
                    continue
            
            embed.set_footer(
                text=f"T·ªïng c·ªông: {len(self.dm_history)} tin nh·∫Øn DM ‚Ä¢ Hi·ªÉn th·ªã: {min(len(recent_dms), 10)}"
            )
            
            await ctx.reply(embed=embed, mention_author=True)
            
        except Exception as e:
            error_embed = discord.Embed(
                title="‚ùå L·ªói h·ªá th·ªëng",
                description=f"C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra DM: {str(e)[:200]}",
                color=discord.Color.red()
            )
            await ctx.reply(embed=error_embed, mention_author=True)
            logger.error(f"Error in checkdms command: {e}")
    
    async def _cleanup_dms_manual_impl(self, ctx):
        """Implementation th·ª±c t·∫ø c·ªßa cleanup DM manual command"""
        try:
            # Th√¥ng b√°o b·∫Øt ƒë·∫ßu cleanup
            processing_embed = discord.Embed(
                title="üßπ ƒêang th·ª±c hi·ªán cleanup...",
                description="ƒêang x√≥a c√°c tin nh·∫Øn DM c≈© h∆°n 3 ng√†y...",
                color=discord.Color.orange()
            )
            processing_msg = await ctx.reply(embed=processing_embed, mention_author=True)
            
            # Th·ª±c hi·ªán cleanup
            original_count = len(self.dm_history)
            cutoff_time = datetime.now() - timedelta(days=3)
            
            # L·ªçc DM c≈© h∆°n 3 ng√†y
            old_dms = [
                dm for dm in self.dm_history
                if datetime.fromisoformat(dm['timestamp']) <= cutoff_time
            ]
            
            # Cleanup
            self.cleanup_old_dms()
            deleted_count = original_count - len(self.dm_history)
            
            # Save l·∫°i file
            if deleted_count > 0:
                self.save_dm_history()
            
            # T·∫°o embed k·∫øt qu·∫£
            if deleted_count > 0:
                result_embed = discord.Embed(
                    title="‚úÖ Cleanup ho√†n th√†nh!",
                    description=f"ƒê√£ x√≥a {deleted_count} tin nh·∫Øn DM c≈© h∆°n 3 ng√†y",
                    color=discord.Color.green()
                )
                result_embed.add_field(
                    name="üìä Th·ªëng k√™",
                    value=f"**Tr∆∞·ªõc cleanup:** {original_count} DM\n**Sau cleanup:** {len(self.dm_history)} DM\n**ƒê√£ x√≥a:** {deleted_count} DM",
                    inline=False
                )
                
                # Hi·ªÉn th·ªã m·ªôt s·ªë DM ƒë√£ x√≥a (n·∫øu c√≥)
                if old_dms:
                    sample_deleted = old_dms[:3]  # Hi·ªÉn th·ªã 3 DM c≈© nh·∫•t ƒë√£ x√≥a
                    deleted_info = []
                    for dm in sample_deleted:
                        timestamp = datetime.fromisoformat(dm['timestamp'])
                        days_old = (datetime.now() - timestamp).days
                        deleted_info.append(f"‚Ä¢ {dm['username']} - {days_old} ng√†y tr∆∞·ªõc")
                    
                    if len(old_dms) > 3:
                        deleted_info.append(f"‚Ä¢ ... v√† {len(old_dms) - 3} DM kh√°c")
                    
                    result_embed.add_field(
                        name="üóëÔ∏è DM ƒë√£ x√≥a (m·∫´u)",
                        value="\n".join(deleted_info),
                        inline=False
                    )
                
            else:
                result_embed = discord.Embed(
                    title="‚ÑπÔ∏è Kh√¥ng c√≥ DM c·∫ßn x√≥a",
                    description="T·∫•t c·∫£ tin nh·∫Øn DM ƒë·ªÅu trong v√≤ng 3 ng√†y g·∫ßn ƒë√¢y",
                    color=discord.Color.blue()
                )
                result_embed.add_field(
                    name="üìä Th·ªëng k√™ hi·ªán t·∫°i",
                    value=f"**T·ªïng DM:** {len(self.dm_history)}\n**C≈© nh·∫•t:** {self._get_oldest_dm_age()} ng√†y",
                    inline=False
                )
            
            # Th√¥ng tin v·ªÅ cleanup t·ª± ƒë·ªông
            result_embed.add_field(
                name="üîÑ Cleanup t·ª± ƒë·ªông",
                value="H·ªá th·ªëng t·ª± ƒë·ªông cleanup m·ªói 6 gi·ªù\nDM c≈© h∆°n 3 ng√†y s·∫Ω ƒë∆∞·ª£c x√≥a t·ª± ƒë·ªông",
                inline=False
            )
            
            result_embed.set_footer(
                text="DM Management System ‚Ä¢ Cleanup th·ªß c√¥ng ho√†n th√†nh"
            )
            
            # C·∫≠p nh·∫≠t tin nh·∫Øn
            await processing_msg.edit(embed=result_embed)
            
            logger.info(f"Manual DM cleanup completed by {ctx.author}: {deleted_count} entries removed")
            
        except Exception as e:
            error_embed = discord.Embed(
                title="‚ùå L·ªói h·ªá th·ªëng",
                description=f"C√≥ l·ªói x·∫£y ra khi cleanup DM: {str(e)[:200]}",
                color=discord.Color.red()
            )
            await ctx.reply(embed=error_embed, mention_author=True)
            logger.error(f"Error in cleanup DMs command: {e}")
    
    def _get_oldest_dm_age(self):
        """L·∫•y tu·ªïi c·ªßa DM c≈© nh·∫•t (t√≠nh b·∫±ng ng√†y)"""
        try:
            if not self.dm_history:
                return 0
            
            oldest_timestamp = min(
                datetime.fromisoformat(dm['timestamp']) 
                for dm in self.dm_history
            )
            age = (datetime.now() - oldest_timestamp).days
            return age
        except:
            return 0
    
    def stop_cleanup_task(self):
        """D·ª´ng cleanup task khi bot shutdown"""
        if self.cleanup_task and not self.cleanup_task.done():
            self.cleanup_task.cancel()
            logger.info("DM cleanup task stopped")
    
    async def handle_dm_message(self, message: discord.Message):
        """
        X·ª≠ l√Ω tin nh·∫Øn DM - ƒë∆∞·ª£c g·ªçi t·ª´ bot_refactored.py
        """
        try:
            # B·ªè qua tin nh·∫Øn t·ª´ bot
            if message.author.bot:
                return
            
            # L∆∞u v√†o l·ªãch s·ª≠
            dm_entry = {
                'user_id': str(message.author.id),
                'username': str(message.author),
                'display_name': message.author.display_name,
                'content': message.content,
                'timestamp': datetime.now().isoformat(),
                'message_id': str(message.id)
            }
            
            self.dm_history.append(dm_entry)
            self.save_dm_history()
            
            # Forward ƒë·∫øn Supreme Admin
            await self._forward_dm_to_supreme_admin(message, dm_entry)
            
            logger.info(f"DM received from {message.author} ({message.author.id}): {message.content[:50]}...")
            
        except Exception as e:
            logger.error(f"Error handling DM message: {e}")
    
    async def _forward_dm_to_supreme_admin(self, message: discord.Message, dm_entry: dict):
        """Forward tin nh·∫Øn DM ƒë·∫øn Supreme Admin"""
        try:
            # L·∫•y Supreme Admin ID
            supreme_admin_id = self.bot_instance.supreme_admin_id
            if not supreme_admin_id:
                logger.warning("No Supreme Admin set - cannot forward DM")
                return
            
            # L·∫•y Supreme Admin user
            try:
                supreme_admin = await self.bot.fetch_user(supreme_admin_id)
            except discord.NotFound:
                logger.error(f"Supreme Admin user {supreme_admin_id} not found")
                return
            
            # T·∫°o embed th√¥ng b√°o DM
            embed = discord.Embed(
                title="üì® Tin nh·∫Øn DM m·ªõi",
                description="C√≥ ng∆∞·ªùi ƒë√£ g·ª≠i tin nh·∫Øn DM cho bot",
                color=discord.Color.blue()
            )
            
            # Th√¥ng tin ng∆∞·ªùi g·ª≠i
            embed.add_field(
                name="üë§ Ng∆∞·ªùi g·ª≠i",
                value=f"**Username:** {message.author}\n**Display Name:** {message.author.display_name}\n**ID:** {message.author.id}",
                inline=True
            )
            
            # Th·ªùi gian
            embed.add_field(
                name="üïí Th·ªùi gian",
                value=f"<t:{int(message.created_at.timestamp())}:F>",
                inline=True
            )
            
            # N·ªôi dung tin nh·∫Øn
            content_display = message.content if len(message.content) <= 1000 else message.content[:1000] + "..."
            embed.add_field(
                name="üí¨ N·ªôi dung",
                value=f"```{content_display}```" if content_display else "*Kh√¥ng c√≥ n·ªôi dung text*",
                inline=False
            )
            
            # Th√¥ng tin b·ªï sung
            embed.add_field(
                name="üìä Th√¥ng tin b·ªï sung",
                value=f"**Message ID:** {message.id}\n**T·ªïng DM nh·∫≠n:** {len(self.dm_history)}",
                inline=False
            )
            
            # Avatar ng∆∞·ªùi g·ª≠i
            if message.author.avatar:
                embed.set_thumbnail(url=message.author.avatar.url)
            
            embed.set_footer(
                text="DM Management System ‚Ä¢ S·ª≠ d·ª•ng ;checkdms ƒë·ªÉ xem l·ªãch s·ª≠",
                icon_url=self.bot.user.avatar.url if self.bot.user and self.bot.user.avatar else None
            )
            
            # G·ª≠i embed ƒë·∫øn Supreme Admin
            await supreme_admin.send(embed=embed)
            
            # N·∫øu c√≥ attachments, g·ª≠i th√¥ng b√°o
            if message.attachments:
                attachment_info = []
                for attachment in message.attachments:
                    attachment_info.append(f"‚Ä¢ {attachment.filename} ({attachment.size} bytes)")
                
                attachment_embed = discord.Embed(
                    title="üìé File ƒë√≠nh k√®m",
                    description=f"Tin nh·∫Øn c√≥ {len(message.attachments)} file ƒë√≠nh k√®m:\n" + "\n".join(attachment_info),
                    color=discord.Color.orange()
                )
                await supreme_admin.send(embed=attachment_embed)
            
            logger.info(f"DM forwarded to Supreme Admin: {message.author} -> {supreme_admin}")
            
        except discord.Forbidden:
            logger.error("Cannot send DM to Supreme Admin - DMs may be disabled")
        except Exception as e:
            logger.error(f"Error forwarding DM to Supreme Admin: {e}")
