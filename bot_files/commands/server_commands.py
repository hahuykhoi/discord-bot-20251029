"""
VIP Server Management Commands - Guild Info, Invite Links, Template Setup
Ported from proj.py VIP Admin Bot
"""
import discord
from discord.ext import commands
import logging
import asyncio
from datetime import datetime
from .base import BaseCommand

logger = logging.getLogger(__name__)

class ServerCommands(BaseCommand):
    """Class ch·ª©a c√°c commands qu·∫£n l√Ω server VIP"""
    
    def register_commands(self):
        """Register server management commands"""
        
        @self.bot.command(name='viplistGuilds')
        async def vip_list_guilds(ctx):
            """
            Li·ªát k√™ t·∫•t c·∫£ guilds m√† bot ƒëang tham gia (Ch·ªâ Supreme Admin)
            
            Usage: ;viplistGuilds
            """
            # Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng
            if not self.bot_instance.is_supreme_admin(ctx.author.id):
                await ctx.reply(f"{ctx.author.mention} ‚ùå Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
            await self._vip_list_guilds_impl(ctx)
        
        @self.bot.command(name='viplistChannels')
        async def vip_list_channels(ctx, guild_id: int):
            """
            Li·ªát k√™ t·∫•t c·∫£ channels trong guild c·ª• th·ªÉ (Ch·ªâ Supreme Admin)
            
            Usage: ;viplistChannels <guild_id>
            """
            # Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng
            if not self.bot_instance.is_supreme_admin(ctx.author.id):
                await ctx.reply(f"{ctx.author.mention} ‚ùå Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
            await self._vip_list_channels_impl(ctx, guild_id)
        
        @self.bot.command(name='vipcreateInvite')
        async def vip_create_invite(ctx, guild_id: int):
            """
            T·∫°o invite link cho guild c·ª• th·ªÉ (Ch·ªâ Supreme Admin)
            
            Usage: ;vipcreateInvite <guild_id>
            """
            # Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng
            if not self.bot_instance.is_supreme_admin(ctx.author.id):
                await ctx.reply(f"{ctx.author.mention} ‚ùå Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
            await self._vip_create_invite_impl(ctx, guild_id)
        
        @self.bot.command(name='vipsetupTemplate')
        async def vip_setup_template(ctx, guild_id: int):
            """
            √Åp d·ª•ng VIP template cho guild (t·∫°o roles, categories, channels) (Ch·ªâ Supreme Admin)
            
            Usage: ;vipsetupTemplate <guild_id>
            """
            # Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng
            if not self.bot_instance.is_supreme_admin(ctx.author.id):
                await ctx.reply(f"{ctx.author.mention} ‚ùå Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
            await self._vip_setup_template_impl(ctx, guild_id)
        
        @self.bot.command(name='vipwho')
        async def vip_who(ctx, user_id: int):
            """
            Xem th√¥ng tin chi ti·∫øt c·ªßa user theo ID (Ch·ªâ Supreme Admin)
            
            Usage: ;vipwho <user_id>
            """
            # Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng
            if not self.bot_instance.is_supreme_admin(ctx.author.id):
                await ctx.reply(f"{ctx.author.mention} ‚ùå Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
            await self._vip_who_impl(ctx, user_id)
    
    def vip_embed(self, title: str, description: str = "", color: int = 0xFFD700):
        """T·∫°o VIP embed v·ªõi style ƒë·∫∑c bi·ªát"""
        e = discord.Embed(title=title, description=description or "", color=color)
        e.set_footer(text="VIP Admin Bot")
        e.timestamp = datetime.utcnow()
        return e
    
    def append_action_log(self, text: str):
        """Log action to file"""
        try:
            with open("actions.log", "a", encoding="utf-8") as f:
                f.write(f"{datetime.utcnow().isoformat()} - {text}\n")
        except Exception:
            logger.exception("Failed to write actions.log")
    
    async def _vip_list_guilds_impl(self, ctx):
        """Implementation c·ªßa VIP list guilds command"""
        try:
            if not self.bot.guilds:
                await ctx.reply(embed=self.vip_embed("VIP Guild List", "Bot kh√¥ng tham gia guild n√†o"))
                return
            
            guild_list = []
            for i, guild in enumerate(self.bot.guilds, 1):
                guild_list.append(f"**{i}.** {guild.name}\n"
                                f"   ‚îî ID: `{guild.id}`\n"
                                f"   ‚îî Members: {guild.member_count}")
                
                # Gi·ªõi h·∫°n 10 guilds per embed ƒë·ªÉ tr√°nh qu√° d√†i
                if i >= 10:
                    guild_list.append(f"**...v√† {len(self.bot.guilds) - 10} guilds kh√°c**")
                    break
            
            embed = self.vip_embed(
                "üè∞ VIP Guild List",
                "\n\n".join(guild_list)
            )
            embed.add_field(
                name="üìä T·ªïng quan",
                value=f"**T·ªïng guilds:** {len(self.bot.guilds)}\n"
                      f"**T·ªïng members:** {sum(g.member_count for g in self.bot.guilds)}",
                inline=False
            )
            
            await ctx.reply(embed=embed)
            logger.info(f"VIP list guilds by {ctx.author.id}")
            
        except Exception as e:
            await ctx.reply(embed=self.vip_embed("Error", f"L·ªói: {str(e)}", color=0xFF5A5F))
            logger.error(f"VIP list guilds error: {e}")
    
    async def _vip_list_channels_impl(self, ctx, guild_id: int):
        """Implementation c·ªßa VIP list channels command"""
        try:
            guild = self.bot.get_guild(guild_id)
            if guild is None:
                await ctx.reply(embed=self.vip_embed("Error", "Bot kh√¥ng c√≥ trong guild ƒë√≥", color=0xFF5A5F))
                return
            
            if not guild.channels:
                await ctx.reply(embed=self.vip_embed("VIP Channel List", f"Guild **{guild.name}** kh√¥ng c√≥ channel n√†o"))
                return
            
            # Ph√¢n lo·∫°i channels
            text_channels = [ch for ch in guild.channels if isinstance(ch, discord.TextChannel)]
            voice_channels = [ch for ch in guild.channels if isinstance(ch, discord.VoiceChannel)]
            categories = [ch for ch in guild.channels if isinstance(ch, discord.CategoryChannel)]
            
            embed = self.vip_embed(
                f"üìã VIP Channel List - {guild.name}",
                f"**Guild ID:** {guild_id}"
            )
            
            if categories:
                cat_list = [f"üìÅ {cat.name} (`{cat.id}`)" for cat in categories[:10]]
                embed.add_field(
                    name=f"üìÅ Categories ({len(categories)})",
                    value="\n".join(cat_list) + (f"\n...v√† {len(categories) - 10} categories kh√°c" if len(categories) > 10 else ""),
                    inline=False
                )
            
            if text_channels:
                text_list = [f"üí¨ {ch.name} (`{ch.id}`)" for ch in text_channels[:10]]
                embed.add_field(
                    name=f"üí¨ Text Channels ({len(text_channels)})",
                    value="\n".join(text_list) + (f"\n...v√† {len(text_channels) - 10} channels kh√°c" if len(text_channels) > 10 else ""),
                    inline=False
                )
            
            if voice_channels:
                voice_list = [f"üîä {ch.name} (`{ch.id}`)" for ch in voice_channels[:10]]
                embed.add_field(
                    name=f"üîä Voice Channels ({len(voice_channels)})",
                    value="\n".join(voice_list) + (f"\n...v√† {len(voice_channels) - 10} channels kh√°c" if len(voice_channels) > 10 else ""),
                    inline=False
                )
            
            await ctx.reply(embed=embed)
            logger.info(f"VIP list channels for {guild_id} by {ctx.author.id}")
            
        except Exception as e:
            await ctx.reply(embed=self.vip_embed("Error", f"L·ªói: {str(e)}", color=0xFF5A5F))
            logger.error(f"VIP list channels error: {e}")
    
    async def _vip_create_invite_impl(self, ctx, guild_id: int):
        """Implementation c·ªßa VIP create invite command"""
        try:
            guild = self.bot.get_guild(guild_id)
            if guild is None:
                await ctx.reply(embed=self.vip_embed("Error", "Bot kh√¥ng c√≥ trong guild ƒë√≥", color=0xFF5A5F))
                return
            
            # T√¨m text channel ƒë·∫ßu ti√™n m√† bot c√≥ quy·ªÅn t·∫°o invite
            invite_channel = None
            for channel in guild.text_channels:
                perms = channel.permissions_for(guild.me)
                if perms.create_instant_invite:
                    invite_channel = channel
                    break
            
            if invite_channel is None:
                await ctx.reply(embed=self.vip_embed("Error", "Bot kh√¥ng c√≥ quy·ªÅn t·∫°o invite trong guild n√†y", color=0xFF5A5F))
                return
            
            # T·∫°o invite link kh√¥ng gi·ªõi h·∫°n th·ªùi gian v√† s·ªë l·∫ßn s·ª≠ d·ª•ng
            invite = await invite_channel.create_invite(max_age=0, max_uses=0)
            
            embed = self.vip_embed(
                "üîó VIP Create Invite Th√†nh C√¥ng",
                f"**Guild:** {guild.name} (ID: {guild_id})\n"
                f"**Channel:** {invite_channel.name}\n"
                f"**Invite Link:** {invite.url}"
            )
            await ctx.reply(embed=embed)
            
            self.append_action_log(f"VIP created invite for guild {guild_id} -> {invite.url}")
            logger.info(f"VIP create invite for {guild_id} by {ctx.author.id}")
            
        except discord.Forbidden:
            await ctx.reply(embed=self.vip_embed("Error", "Bot kh√¥ng c√≥ quy·ªÅn t·∫°o invite", color=0xFF5A5F))
        except Exception as e:
            await ctx.reply(embed=self.vip_embed("Error", f"L·ªói: {str(e)}", color=0xFF5A5F))
            logger.error(f"VIP create invite error: {e}")
    
    async def _vip_setup_template_impl(self, ctx, guild_id: int):
        """Implementation c·ªßa VIP setup template command"""
        try:
            guild = self.bot.get_guild(guild_id)
            if guild is None:
                await ctx.reply(embed=self.vip_embed("Error", "Bot kh√¥ng c√≥ trong guild ƒë√≥", color=0xFF5A5F))
                return
            
            # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu
            progress_embed = self.vip_embed(
                "‚öôÔ∏è VIP Setup Template",
                "ƒêang √°p d·ª•ng VIP template cho server...\n‚è≥ Vui l√≤ng ch·ªù..."
            )
            progress_msg = await ctx.reply(embed=progress_embed)
            
            # T·∫°o roles n·∫øu ch∆∞a c√≥
            existing_roles = {r.name: r for r in guild.roles}
            roles_to_create = [
                ("Admin", discord.Colour.red(), discord.Permissions(administrator=True)),
                ("Moderator", discord.Colour.blue(), discord.Permissions(manage_messages=True, kick_members=True, ban_members=True)),
                ("VIP", discord.Colour.gold(), discord.Permissions.none()),
                ("Member", discord.Colour.default(), discord.Permissions.none()),
            ]
            
            created_roles = []
            for role_name, color, perms in roles_to_create:
                if role_name not in existing_roles:
                    try:
                        role = await guild.create_role(name=role_name, colour=color, permissions=perms)
                        created_roles.append(role.name)
                        await asyncio.sleep(1)  # Rate limit protection
                    except Exception as e:
                        logger.error(f"Error creating role {role_name}: {e}")
            
            # T·∫°o categories v√† channels
            try:
                # Welcome & Info Category
                cat_info = await guild.create_category("üìå Welcome & Info")
                await asyncio.sleep(1)
                await guild.create_text_channel("üìú-rules", category=cat_info)
                await asyncio.sleep(1)
                await guild.create_text_channel("üì¢-announcements", category=cat_info)
                await asyncio.sleep(1)
                
                # General Category
                cat_general = await guild.create_category("üí¨ General")
                await asyncio.sleep(1)
                await guild.create_text_channel("general-chat", category=cat_general)
                await asyncio.sleep(1)
                await guild.create_voice_channel("General Voice", category=cat_general)
                await asyncio.sleep(1)
                
                # VIP Lounge Category
                cat_vip = await guild.create_category("üåü VIP Lounge")
                await asyncio.sleep(1)
                await guild.create_text_channel("vip-chat", category=cat_vip)
                await asyncio.sleep(1)
                await guild.create_voice_channel("VIP Voice", category=cat_vip)
                
            except Exception as e:
                logger.error(f"Error creating channels: {e}")
            
            # C·∫≠p nh·∫≠t th√¥ng b√°o ho√†n th√†nh
            final_embed = self.vip_embed(
                "‚úÖ VIP Setup Template Ho√†n Th√†nh",
                f"**Guild:** {guild.name} (ID: {guild_id})\n\n"
                f"**üé≠ Roles ƒë√£ t·∫°o:** {', '.join(created_roles) if created_roles else 'Kh√¥ng c√≥ (ƒë√£ t·ªìn t·∫°i)'}\n\n"
                f"**üìÅ Categories ƒë√£ t·∫°o:**\n"
                f"‚Ä¢ üìå Welcome & Info\n"
                f"‚Ä¢ üí¨ General\n"
                f"‚Ä¢ üåü VIP Lounge\n\n"
                f"**üìã Channels ƒë√£ t·∫°o:**\n"
                f"‚Ä¢ üìú-rules, üì¢-announcements\n"
                f"‚Ä¢ general-chat, General Voice\n"
                f"‚Ä¢ vip-chat, VIP Voice"
            )
            await progress_msg.edit(embed=final_embed)
            
            self.append_action_log(f"VIP applied template to guild {guild_id}")
            logger.info(f"VIP setup template for {guild_id} by {ctx.author.id}")
            
        except discord.Forbidden:
            await ctx.reply(embed=self.vip_embed("Error", "Bot kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ setup template", color=0xFF5A5F))
        except Exception as e:
            await ctx.reply(embed=self.vip_embed("Error", f"L·ªói: {str(e)}", color=0xFF5A5F))
            logger.error(f"VIP setup template error: {e}")
    
    async def _vip_who_impl(self, ctx, user_id: int):
        """Implementation c·ªßa VIP who command"""
        try:
            user = await self.bot.fetch_user(user_id)
            
            embed = self.vip_embed(
                "üë§ VIP User Info",
                f"**User:** {user}\n"
                f"**ID:** {user_id}\n"
                f"**Created:** {user.created_at.strftime('%d/%m/%Y %H:%M:%S')} UTC\n"
                f"**Bot:** {'Yes' if user.bot else 'No'}"
            )
            
            if user.avatar:
                embed.set_thumbnail(url=user.avatar.url)
            
            # Th√™m th√¥ng tin guild n·∫øu user l√† member
            guild_info = []
            for guild in self.bot.guilds:
                member = guild.get_member(user_id)
                if member:
                    guild_info.append(f"‚Ä¢ {guild.name} (`{guild.id}`)")
            
            if guild_info:
                embed.add_field(
                    name="üè∞ Mutual Guilds",
                    value="\n".join(guild_info[:10]) + (f"\n...v√† {len(guild_info) - 10} guilds kh√°c" if len(guild_info) > 10 else ""),
                    inline=False
                )
            
            await ctx.reply(embed=embed)
            logger.info(f"VIP who {user_id} by {ctx.author.id}")
            
        except discord.NotFound:
            await ctx.reply(embed=self.vip_embed("Error", "Kh√¥ng t√¨m th·∫•y user v·ªõi ID n√†y", color=0xFF5A5F))
        except Exception as e:
            await ctx.reply(embed=self.vip_embed("Error", f"L·ªói: {str(e)}", color=0xFF5A5F))
            logger.error(f"VIP who error: {e}")
