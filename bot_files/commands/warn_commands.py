"""
Warn v√† Warnings commands
"""
import discord
from discord.ext import commands
from datetime import datetime
import logging
import json
import os
from .base import BaseCommand

logger = logging.getLogger(__name__)

class WarnCommands(BaseCommand):
    """Class ch·ª©a c√°c commands li√™n quan ƒë·∫øn warn"""
    
    def load_amen_config(self):
        """Load c·∫•u h√¨nh t·ª´ amen.json"""
        try:
            config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'amen.json')
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                logger.warning("Kh√¥ng t√¨m th·∫•y file amen.json")
                return None
        except Exception as e:
            logger.error(f"L·ªói khi ƒë·ªçc amen.json: {e}")
            return None
    
    async def send_mute_notification(self, ctx, member: discord.Member, reason: str, duration: str = "1 ph√∫t"):
        """G·ª≠i th√¥ng b√°o DM khi c√≥ ng∆∞·ªùi b·ªã mute"""
        try:
            amen_config = self.load_amen_config()
            if not amen_config or not amen_config.get('enabled', False):
                return
            
            notification_user_id = amen_config.get('notification_user_id')
            if not notification_user_id or notification_user_id == "YOUR_USER_ID_HERE":
                logger.warning("notification_user_id ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong amen.json")
                return
            
            # L·∫•y user ƒë·ªÉ g·ª≠i DM
            try:
                notification_user = await self.bot.fetch_user(int(notification_user_id))
            except (ValueError, discord.NotFound):
                logger.error(f"Kh√¥ng t√¨m th·∫•y user v·ªõi ID: {notification_user_id}")
                return
            
            # L·∫•y l·ªãch s·ª≠ warnings c·ªßa user
            user_warnings = self.bot_instance.get_warnings(member.id)
            warning_history = ""
            
            if user_warnings:
                warning_history = "\n\n**üìã L·ªãch s·ª≠ 3 warnings:**\n"
                for i, warning in enumerate(user_warnings[-3:], 1):  # L·∫•y 3 warning cu·ªëi
                    warning_time = warning.get('timestamp', 'Kh√¥ng r√µ th·ªùi gian')
                    warning_reason = warning.get('reason', 'Kh√¥ng c√≥ l√Ω do')
                    warning_mod = warning.get('moderator', 'Kh√¥ng r√µ mod')
                    
                    # Format timestamp n·∫øu c√≥
                    if isinstance(warning_time, str) and warning_time != 'Kh√¥ng r√µ th·ªùi gian':
                        try:
                            # Chuy·ªÉn timestamp th√†nh Discord timestamp
                            from datetime import datetime
                            dt = datetime.fromisoformat(warning_time.replace('Z', '+00:00'))
                            timestamp_formatted = f"<t:{int(dt.timestamp())}:R>"
                        except:
                            timestamp_formatted = warning_time
                    else:
                        timestamp_formatted = warning_time
                    
                    warning_history += f"**{i}.** {warning_reason}\n   *Mod: {warning_mod} ‚Ä¢ {timestamp_formatted}*\n"
            
            # T·∫°o tin nh·∫Øn t·ª´ template
            message_template = amen_config.get('message_template', 
                "üîá **Mute Notification**\n\n**User:** {user_mention} ({user_name})\n**Server:** {server_name}\n**Reason:** {reason}\n**Duration:** {duration}\n**Moderator:** {moderator_mention}\n**Time:** <t:{timestamp}:F>")
            
            timestamp = int(datetime.now().timestamp())
            
            message = message_template.format(
                user_mention=member.mention,
                user_name=f"{member.display_name} ({member.name})",
                server_name=ctx.guild.name,
                reason=reason,
                duration=duration,
                moderator_mention=ctx.author.mention,
                timestamp=timestamp
            )
            
            # Th√™m l·ªãch s·ª≠ warnings v√†o tin nh·∫Øn
            full_message = message + warning_history
            
            # Ki·ªÉm tra ƒë·ªô d√†i tin nh·∫Øn (Discord limit 2000 chars)
            if len(full_message) > 2000:
                # R√∫t g·ªçn n·∫øu qu√° d√†i
                available_space = 2000 - len(message) - 50  # ƒê·ªÉ l·∫°i ch·ªó cho "..."
                if available_space > 100:
                    warning_history = warning_history[:available_space] + "\n*...qu√° d√†i, ƒë√£ r√∫t g·ªçn*"
                    full_message = message + warning_history
                else:
                    full_message = message  # Ch·ªâ g·ª≠i th√¥ng tin c∆° b·∫£n
            
            # G·ª≠i DM
            await notification_user.send(full_message)
            logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o mute ƒë·∫øn {notification_user.name} ({notification_user_id})")
            
        except discord.Forbidden:
            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i DM ƒë·∫øn user {notification_user_id} (DM b·ªã t·∫Øt)")
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o mute: {e}")
    
    def register_commands(self):
        """Register warn v√† warnings commands"""
        
        @self.bot.command(name='warn')
        async def warn_user(ctx, member: discord.Member, *, reason: str = "Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ"):
            """
            C·∫£nh b√°o m·ªôt user v√† g·ª≠i DM v·ªõi rate limiting
            
            Usage: ;warn @user <l√Ω do>
            """
            # S·ª≠ d·ª•ng rate limiting cho command n√†y
            await self.execute_with_rate_limit(ctx, self._warn_user_impl, ctx, member, reason)
        
        @self.bot.command(name='warnings')
        async def check_warnings(ctx, member: discord.Member = None):
            """
            Ki·ªÉm tra s·ªë l∆∞·ª£ng warnings c·ªßa user v·ªõi rate limiting
            
            Usage: ;warnings [@user]
            """
            # S·ª≠ d·ª•ng rate limiting cho command n√†y
            await self.execute_with_rate_limit(ctx, self._check_warnings_impl, ctx, member)
        
        @self.bot.command(name='amenconfig')
        async def amen_config_command(ctx, action: str = None, *, value: str = None):
            """
            Qu·∫£n l√Ω c·∫•u h√¨nh th√¥ng b√°o mute trong amen.json (Admin only)
            
            Usage: 
            ;amenconfig status - Xem tr·∫°ng th√°i hi·ªán t·∫°i
            ;amenconfig set <user_id> - ƒê·∫∑t user ID nh·∫≠n th√¥ng b√°o
            ;amenconfig enable/disable - B·∫≠t/t·∫Øt th√¥ng b√°o
            """
            # Ki·ªÉm tra quy·ªÅn s·ª≠ d·ª•ng dynamic permission system
            if hasattr(self.bot_instance, 'permission_manager'):
                has_permission, user_level = self.bot_instance.permission_manager.check_command_permission(ctx, 'amenconfig')
                if not has_permission:
                    await ctx.reply("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", mention_author=True)
                    return
            else:
                # Fallback: Ki·ªÉm tra quy·ªÅn admin n·∫øu kh√¥ng c√≥ permission system
                if not self.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                    await ctx.reply("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", mention_author=True)
                    return
            
            amen_config = self.load_amen_config()
            
            if not action or action.lower() == "status":
                # Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
                if not amen_config:
                    await ctx.reply("‚ùå Kh√¥ng t√¨m th·∫•y file amen.json", mention_author=True)
                    return
                
                embed = discord.Embed(
                    title="üìã C·∫•u h√¨nh Amen Notification",
                    color=discord.Color.blue()
                )
                
                user_id = amen_config.get('notification_user_id', 'Ch∆∞a c·∫•u h√¨nh')
                enabled = amen_config.get('enabled', False)
                
                embed.add_field(
                    name="üÜî User ID",
                    value=f"`{user_id}`",
                    inline=True
                )
                
                embed.add_field(
                    name="üîî Tr·∫°ng th√°i",
                    value="üü¢ Enabled" if enabled else "üî¥ Disabled",
                    inline=True
                )
                
                # Th·ª≠ l·∫•y th√¥ng tin user n·∫øu c√≥ ID h·ª£p l·ªá
                if user_id != 'Ch∆∞a c·∫•u h√¨nh' and user_id != 'YOUR_USER_ID_HERE':
                    try:
                        user = await self.bot.fetch_user(int(user_id))
                        embed.add_field(
                            name="üë§ User Info",
                            value=f"{user.display_name} ({user.name})",
                            inline=False
                        )
                    except:
                        embed.add_field(
                            name="‚ö†Ô∏è Warning",
                            value="User ID kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t√¨m th·∫•y",
                            inline=False
                        )
                
                await ctx.reply(embed=embed, mention_author=True)
            
            elif action.lower() == "set" and value:
                # ƒê·∫∑t user ID
                try:
                    user_id = int(value)
                    # Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
                    user = await self.bot.fetch_user(user_id)
                    
                    # C·∫≠p nh·∫≠t config
                    if not amen_config:
                        amen_config = {"enabled": True, "notification_user_id": str(user_id)}
                    else:
                        amen_config['notification_user_id'] = str(user_id)
                    
                    # L∆∞u file
                    config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'amen.json')
                    with open(config_path, 'w', encoding='utf-8') as f:
                        json.dump(amen_config, f, indent=4, ensure_ascii=False)
                    
                    embed = discord.Embed(
                        title="‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh",
                        description=f"User nh·∫≠n th√¥ng b√°o: {user.display_name} ({user.name})\nID: `{user_id}`",
                        color=discord.Color.green()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    
                except ValueError:
                    await ctx.reply("‚ùå User ID ph·∫£i l√† s·ªë nguy√™n.", mention_author=True)
                except discord.NotFound:
                    await ctx.reply("‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi ID n√†y.", mention_author=True)
                except Exception as e:
                    await ctx.reply(f"‚ùå L·ªói: {str(e)}", mention_author=True)
            
            elif action.lower() in ["enable", "disable"]:
                # B·∫≠t/t·∫Øt th√¥ng b√°o
                if not amen_config:
                    await ctx.reply("‚ùå Kh√¥ng t√¨m th·∫•y file amen.json", mention_author=True)
                    return
                
                enabled = action.lower() == "enable"
                amen_config['enabled'] = enabled
                
                # L∆∞u file
                config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'amen.json')
                with open(config_path, 'w', encoding='utf-8') as f:
                    json.dump(amen_config, f, indent=4, ensure_ascii=False)
                
                status = "üü¢ Enabled" if enabled else "üî¥ Disabled"
                embed = discord.Embed(
                    title="‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i",
                    description=f"Th√¥ng b√°o mute: {status}",
                    color=discord.Color.green() if enabled else discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
            
            else:
                await ctx.reply("‚ùå S·ª≠ d·ª•ng: ; status/set <user_id>/enable/disable`", mention_author=True)
    
    async def _warn_user_impl(self, ctx, member: discord.Member, reason: str):
        """
        Implementation th·ª±c t·∫ø c·ªßa warn command
        """
        # Ki·ªÉm tra quy·ªÅn s·ª≠ d·ª•ng dynamic permission system
        if hasattr(self.bot_instance, 'permission_manager'):
            has_permission, user_level = self.bot_instance.permission_manager.check_command_permission(ctx, 'warn')
            if not has_permission:
                await ctx.reply(f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
        else:
            # Fallback: Ki·ªÉm tra quy·ªÅn admin n·∫øu kh√¥ng c√≥ permission system
            if not self.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                await ctx.reply(f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
        
        # Kh√¥ng th·ªÉ warn ch√≠nh m√¨nh
        if member.id == ctx.author.id:
            await ctx.reply(f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng th·ªÉ warn ch√≠nh m√¨nh!", mention_author=True)
            return
        
        # Kh√¥ng th·ªÉ warn bot
        if member.bot:
            await ctx.reply(f"{ctx.author.mention} ‚ùå Kh√¥ng th·ªÉ warn bot!", mention_author=True)
            return
        
        try:
            # Th√™m warning v√†o database
            warning_count = self.bot_instance.add_warning(
                user_id=member.id,
                reason=reason,
                warned_by=f"{ctx.author} ({ctx.author.id})"
            )
            
            # T·∫°o embed cho DM - m√†u s·∫Øc v√† n·ªôi dung d·ª±a tr√™n s·ªë warnings
            if warning_count >= 3:
                dm_color = discord.Color.red()
                dm_title = "üîá C·∫£nh b√°o nghi√™m tr·ªçng - ƒê√£ b·ªã timeout"
                dm_description = f"B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c c·∫£nh b√°o th·ª© {warning_count} t·ª´ server **{ctx.guild.name}** v√† ƒë√£ b·ªã timeout."
            elif warning_count == 2:
                dm_color = discord.Color.orange()
                dm_title = "‚ö†Ô∏è C·∫£nh b√°o nghi√™m tr·ªçng"
                dm_description = f"B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c c·∫£nh b√°o th·ª© {warning_count} t·ª´ server **{ctx.guild.name}**. C·∫£nh b√°o ti·∫øp theo s·∫Ω d·∫´n ƒë·∫øn mute."
            else:
                dm_color = discord.Color.yellow()
                dm_title = "‚ö†Ô∏è C·∫£nh b√°o t·ª´ Server"
                dm_description = f"B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c c·∫£nh b√°o t·ª´ server **{ctx.guild.name}**"
            
            embed = discord.Embed(
                title=dm_title,
                description=dm_description,
                color=dm_color,
                timestamp=datetime.now()
            )
            embed.add_field(name="L√Ω do", value=reason, inline=False)
            embed.add_field(name="ƒê∆∞·ª£c c·∫£nh b√°o b·ªüi", value=ctx.author.mention, inline=True)
            embed.add_field(name="T·ªïng s·ªë c·∫£nh b√°o", value=f"{warning_count} l·∫ßn", inline=True)
            
            if warning_count >= 3:
                embed.add_field(name="‚ö†Ô∏è Th√¥ng b√°o quan tr·ªçng", 
                              value="B·∫°n ƒë√£ b·ªã timeout 1 ph√∫t do vi ph·∫°m nhi·ªÅu l·∫ßn. S·∫Ω t·ª± ƒë·ªông h·∫øt timeout sau 1 ph√∫t.", 
                              inline=False)
            elif warning_count == 2:
                embed.add_field(name="‚ö†Ô∏è C·∫£nh b√°o cu·ªëi", 
                              value="ƒê√¢y l√† c·∫£nh b√°o cu·ªëi c√πng. Vi ph·∫°m ti·∫øp theo s·∫Ω d·∫´n ƒë·∫øn timeout.", 
                              inline=False)
            
            embed.set_footer(text=f"Server: {ctx.guild.name}", icon_url=ctx.guild.icon.url if ctx.guild.icon else None)
            
            # G·ª≠i DM cho user
            try:
                await member.send(embed=embed)
                dm_status = "‚úÖ ƒê√£ g·ª≠i DM"
            except discord.Forbidden:
                dm_status = "‚ùå Kh√¥ng th·ªÉ g·ª≠i DM (user ƒë√£ t·∫Øt DM)"
            except Exception as e:
                dm_status = f"‚ùå L·ªói g·ª≠i DM: {str(e)[:50]}"
            
            # Timeout user n·∫øu ƒë·∫°t 3 warnings
            timeout_status = "‚ö†Ô∏è Ch∆∞a ƒë·ªß 3 warnings ƒë·ªÉ timeout"
            if warning_count >= 3:
                timeout_status = await self._handle_auto_mute(ctx, member, reason)
            
            # Ph·∫£n h·ªìi trong channel v·ªõi reply - m√†u s·∫Øc d·ª±a tr√™n s·ªë warnings
            if warning_count >= 3:
                embed_color = discord.Color.red()  # ƒê·ªè - nghi√™m tr·ªçng (ƒë√£ timeout)
                title = "üîá ƒê√£ c·∫£nh b√°o v√† timeout"
            elif warning_count == 2:
                embed_color = discord.Color.orange()  # Cam - c·∫£nh b√°o
                title = "‚ö†Ô∏è C·∫£nh b√°o nghi√™m tr·ªçng"
            else:
                embed_color = discord.Color.yellow()  # V√†ng - c·∫£nh b√°o nh·∫π
                title = "‚ö†Ô∏è ƒê√£ c·∫£nh b√°o"
            
            response_embed = discord.Embed(
                title=title,
                description=f"{ctx.author.mention} ƒë√£ c·∫£nh b√°o {member.mention}",
                color=embed_color
            )
            response_embed.add_field(name="L√Ω do", value=reason, inline=False)
            response_embed.add_field(name="T·ªïng c·∫£nh b√°o", value=f"{warning_count} l·∫ßn", inline=True)
            response_embed.add_field(name="Tr·∫°ng th√°i DM", value=dm_status, inline=True)
            response_embed.add_field(name="Tr·∫°ng th√°i Timeout", value=timeout_status, inline=True)
            
            await ctx.reply(embed=response_embed, mention_author=True)
            
            # Log
            logger.info(
                f"User {member} ({member.id}) ƒë√£ ƒë∆∞·ª£c warn b·ªüi {ctx.author} ({ctx.author.id}). "
                f"L√Ω do: {reason}. T·ªïng warnings: {warning_count}"
            )
            
        except Exception as e:
            await ctx.send(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")
            logger.error(f"L·ªói khi warn user {member}: {e}")
    
    async def _handle_auto_mute(self, ctx, member: discord.Member, reason: str):
        """
        X·ª≠ l√Ω auto-mute khi user ƒë·∫°t 3 warnings s·ª≠ d·ª•ng Discord timeout
        
        Args:
            ctx: Discord context
            member: Member c·∫ßn mute
            reason: L√Ω do warn
            
        Returns:
            str: Status message
        """
        try:
            from datetime import timedelta
            
            # Ki·ªÉm tra xem user ƒë√£ b·ªã timeout ch∆∞a
            if member.timed_out_until and member.timed_out_until > datetime.now(member.timed_out_until.tzinfo):
                return "‚ÑπÔ∏è User ƒë√£ b·ªã timeout t·ª´ tr∆∞·ªõc"
            
            # Timeout user trong 1 ph√∫t s·ª≠ d·ª•ng Discord timeout
            timeout_duration = timedelta(minutes=1)
            await member.timeout(
                timeout_duration, 
                reason=f"Auto-timeout after 3 warnings. Last warning by {ctx.author}: {reason}"
            )
            
            # G·ª≠i th√¥ng b√°o DM ƒë·∫øn user ƒë∆∞·ª£c c·∫•u h√¨nh trong amen.json
            await self.send_mute_notification(ctx, member, reason, "1 ph√∫t")
            
            # X√≥a t·∫•t c·∫£ warnings sau khi timeout (reset v·ªÅ 0)
            self.bot_instance.clear_user_warnings(member.id)
            logger.info(f"ƒê√£ x√≥a t·∫•t c·∫£ warnings c·ªßa user {member} ({member.id}) sau khi timeout")
            
            return "üîá ƒê√£ timeout user (1 ph√∫t) v√† reset warnings"
                
        except discord.Forbidden:
            return "‚ùå Kh√¥ng c√≥ quy·ªÅn timeout user"
        except discord.HTTPException as e:
            return f"‚ùå L·ªói HTTP timeout: {str(e)[:30]}"
        except Exception as e:
            return f"‚ùå L·ªói timeout: {str(e)[:30]}"
    
    async def _check_warnings_impl(self, ctx, member: discord.Member = None):
        """
        Implementation th·ª±c t·∫ø c·ªßa warnings command
        """
        # N·∫øu kh√¥ng mention ai th√¨ ki·ªÉm tra ch√≠nh m√¨nh
        if member is None:
            member = ctx.author
        
        # Ki·ªÉm tra quy·ªÅn s·ª≠ d·ª•ng dynamic permission system (admin/mod ho·∫∑c ch√≠nh user ƒë√≥)
        is_checking_self = (member.id == ctx.author.id)
        
        if not is_checking_self:
            # Ch·ªâ check permission n·∫øu kh√¥ng ph·∫£i xem ch√≠nh m√¨nh
            if hasattr(self.bot_instance, 'permission_manager'):
                has_permission, user_level = self.bot_instance.permission_manager.check_command_permission(ctx, 'warnings')
                if not has_permission:
                    await ctx.reply(f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn xem warnings c·ªßa user kh√°c!", mention_author=True)
                    return
            else:
                # Fallback: Ki·ªÉm tra quy·ªÅn admin n·∫øu kh√¥ng c√≥ permission system
                if not self.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                    await ctx.reply(f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn xem warnings c·ªßa user kh√°c!", mention_author=True)
                    return
        
        warnings_list = self.bot_instance.get_warnings(member.id)
        
        if not warnings_list:
            embed = discord.Embed(
                title="üìã L·ªãch s·ª≠ c·∫£nh b√°o",
                description=f"{member.mention} ch∆∞a c√≥ c·∫£nh b√°o n√†o.",
                color=discord.Color.green()
            )
        else:
            embed = discord.Embed(
                title="üìã L·ªãch s·ª≠ c·∫£nh b√°o",
                description=f"{member.mention} c√≥ **{len(warnings_list)}** c·∫£nh b√°o:",
                color=discord.Color.red()
            )
            
            for i, warning in enumerate(warnings_list[-5:], 1):  # Ch·ªâ hi·ªÉn th·ªã 5 warnings g·∫ßn nh·∫•t
                timestamp = datetime.fromisoformat(warning['timestamp']).strftime('%d/%m/%Y %H:%M')
                embed.add_field(
                    name=f"C·∫£nh b√°o #{len(warnings_list) - 5 + i}",
                    value=f"**L√Ω do:** {warning['reason']}\n**B·ªüi:** {warning['warned_by']}\n**Th·ªùi gian:** {timestamp}",
                    inline=False
                )
            
            if len(warnings_list) > 5:
                embed.set_footer(text=f"Hi·ªÉn th·ªã 5/{len(warnings_list)} c·∫£nh b√°o g·∫ßn nh·∫•t")
        
        await ctx.reply(embed=embed, mention_author=True)
