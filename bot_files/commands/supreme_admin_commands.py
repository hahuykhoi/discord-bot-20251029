"""
Supreme Admin management commands - Ch·ªâ c√≥ 1 admin t·ªëi cao duy nh·∫•t
"""
import discord
from discord.ext import commands
import logging
import json
import os
import subprocess
import asyncio
from datetime import datetime
from .base import BaseCommand

logger = logging.getLogger(__name__)

class SupremeAdminCommands(BaseCommand):
    """Class ch·ª©a c√°c commands qu·∫£n l√Ω Supreme Admin - Administrator t·ªëi cao"""
    
    def register_commands(self):
        """Register supreme admin management commands"""
        
        @self.bot.command(name='setsupremeadmin')
        async def set_supreme_admin(ctx, user_id: int = None):
            """
            ƒê·∫∑t Supreme Admin - ch·ªâ c√≥ th·ªÉ th·ª±c hi·ªán 1 l·∫ßn ho·∫∑c b·ªüi Supreme Admin hi·ªán t·∫°i
            
            Usage: ;setsupremeadmin <user_id>
            """
            await self._set_supreme_admin_impl(ctx, user_id)
        
        @self.bot.command(name='removesupremeadmin')
        async def remove_supreme_admin(ctx):
            """
            X√≥a Supreme Admin - ch·ªâ Supreme Admin hi·ªán t·∫°i m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán
            
            Usage: ;removesupremeadmin
            """
            await self._remove_supreme_admin_impl(ctx)
        
        @self.bot.command(name='supremeinfo')
        async def supreme_info(ctx):
            """
            Xem th√¥ng tin Supreme Admin hi·ªán t·∫°i
            
            Usage: ;supremeinfo
            """
            await self._supreme_info_impl(ctx)
        
        @self.bot.command(name='supremeadmin')
        async def supreme_admin_management(ctx, action: str = None, user_id: int = None):
            """
            Qu·∫£n l√Ω Supreme Admin v·ªõi subcommands
            
            Usage: 
            ;supremeadmin set <user_id> - ƒê·∫∑t Supreme Admin
            ;supremeadmin remove - X√≥a Supreme Admin
            ;supremeadmin info - Xem th√¥ng tin Supreme Admin
            """
            if action is None:
                await self._show_supreme_help(ctx)
                return
            
            action = action.lower()
            
            if action == "set":
                await self._set_supreme_admin_impl(ctx, user_id)
            elif action == "remove":
                await self._remove_supreme_admin_impl(ctx)
            elif action == "info":
                await self._supreme_info_impl(ctx)
            else:
                await self._show_supreme_help(ctx)
        
        @self.bot.command(name='shutdown')
        async def shutdown_bot(ctx):
            """
            T·∫Øt bot b·∫±ng c√°ch kill t·∫•t c·∫£ process Python - CH·ªà SUPREME ADMIN
            
            Usage: ;shutdown
            """
            await self._shutdown_bot_impl(ctx)
    
    def load_supreme_admin_config(self) -> dict:
        """T·∫£i c·∫•u h√¨nh Supreme Admin t·ª´ file"""
        supreme_file = 'data/supreme_admin.json'
        try:
            if os.path.exists(supreme_file):
                with open(supreme_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                # T·∫°o file m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
                default_config = {
                    "supreme_admin_id": None,
                    "description": "ID c·ªßa Administrator t·ªëi cao - ch·ªâ c√≥ 1 ng∆∞·ªùi duy nh·∫•t c√≥ quy·ªÅn n√†y",
                    "permissions": [
                        "Qu·∫£n l√Ω t·∫•t c·∫£ admin kh√°c",
                        "S·ª≠ d·ª•ng m·ªçi l·ªánh c·ªßa bot", 
                        "Thay ƒë·ªïi c·∫•u h√¨nh bot",
                        "Quy·ªÅn t·ªëi cao kh√¥ng th·ªÉ b·ªã thu h·ªìi"
                    ],
                    "created_at": datetime.now().isoformat(),
                    "last_updated": None
                }
                self.save_supreme_admin_config(default_config)
                return default_config
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i Supreme Admin config: {e}")
            return {"supreme_admin_id": None}
    
    def save_supreme_admin_config(self, config: dict) -> None:
        """L∆∞u c·∫•u h√¨nh Supreme Admin v√†o file"""
        supreme_file = 'data/supreme_admin.json'
        try:
            with open(supreme_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
            logger.info("ƒê√£ l∆∞u Supreme Admin config th√†nh c√¥ng")
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u Supreme Admin config: {e}")
    
    def get_supreme_admin_id(self) -> int:
        """L·∫•y ID c·ªßa Supreme Admin hi·ªán t·∫°i"""
        config = self.load_supreme_admin_config()
        return config.get('supreme_admin_id')
    
    def is_supreme_admin(self, user_id: int) -> bool:
        """Ki·ªÉm tra xem user c√≥ ph·∫£i l√† Supreme Admin kh√¥ng"""
        supreme_id = self.get_supreme_admin_id()
        return supreme_id is not None and user_id == supreme_id
    
    async def _set_supreme_admin_impl(self, ctx, user_id: int):
        """Implementation th·ª±c t·∫ø c·ªßa set supreme admin command"""
        config = self.load_supreme_admin_config()
        current_supreme_id = config.get('supreme_admin_id')
        
        # Ki·ªÉm tra quy·ªÅn: ch·ªâ c√≥ th·ªÉ set n·∫øu ch∆∞a c√≥ Supreme Admin ho·∫∑c ng∆∞·ªùi th·ª±c hi·ªán l√† Supreme Admin hi·ªán t·∫°i
        if current_supreme_id is not None and ctx.author.id != current_supreme_id:
            await ctx.reply(
                f"{ctx.author.mention} ‚ùå **Ch·ªâ Supreme Admin hi·ªán t·∫°i m·ªõi c√≥ th·ªÉ thay ƒë·ªïi!**\n"
                f"Supreme Admin hi·ªán t·∫°i: `{current_supreme_id}`", 
                mention_author=True
            )
            return
        
        if user_id is None:
            await ctx.reply(
                f"{ctx.author.mention} ‚ùå Vui l√≤ng cung c·∫•p User ID!\n"
                f"Usage: ; set <user_id>`", 
                mention_author=True
            )
            return
        
        # Ki·ªÉm tra n·∫øu user_id ƒë√£ l√† Supreme Admin
        if current_supreme_id == user_id:
            await ctx.reply(
                f"{ctx.author.mention} ‚ùå User ID `{user_id}` ƒë√£ l√† Supreme Admin!", 
                mention_author=True
            )
            return
        
        # C·∫≠p nh·∫≠t Supreme Admin
        config['supreme_admin_id'] = user_id
        config['last_updated'] = datetime.now().isoformat()
        self.save_supreme_admin_config(config)
        
        # T·∫°o embed th√¥ng b√°o
        embed = discord.Embed(
            title="üëë Supreme Admin ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t!",
            description=f"**User ID `{user_id}` ƒë√£ tr·ªü th√†nh Supreme Administrator t·ªëi cao!**",
            color=discord.Color.gold()
        )
        
        embed.add_field(
            name="üî• Quy·ªÅn h·∫°n t·ªëi cao",
            value=(
                "‚Ä¢ Qu·∫£n l√Ω t·∫•t c·∫£ admin kh√°c\n"
                "‚Ä¢ S·ª≠ d·ª•ng m·ªçi l·ªánh c·ªßa bot\n" 
                "‚Ä¢ Thay ƒë·ªïi c·∫•u h√¨nh bot\n"
                "‚Ä¢ Quy·ªÅn kh√¥ng th·ªÉ b·ªã thu h·ªìi b·ªüi ai kh√°c"
            ),
            inline=False
        )
        
        embed.add_field(
            name="‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng",
            value="Ch·ªâ c√≥ **1 Supreme Admin duy nh·∫•t** t·∫°i m·ªôt th·ªùi ƒëi·ªÉm!",
            inline=False
        )
        
        embed.add_field(
            name="üïê Th·ªùi gian",
            value=f"<t:{int(datetime.now().timestamp())}:F>",
            inline=True
        )
        
        embed.set_footer(text="Supreme Admin system - Quy·ªÅn t·ªëi cao")
        
        await ctx.reply(embed=embed, mention_author=True)
        logger.info(f"Supreme Admin ƒë∆∞·ª£c ƒë·∫∑t: {user_id} b·ªüi {ctx.author} ({ctx.author.id})")
    
    async def _remove_supreme_admin_impl(self, ctx):
        """Implementation th·ª±c t·∫ø c·ªßa remove supreme admin command"""
        config = self.load_supreme_admin_config()
        current_supreme_id = config.get('supreme_admin_id')
        
        # Ki·ªÉm tra c√≥ Supreme Admin kh√¥ng
        if current_supreme_id is None:
            await ctx.reply(
                f"{ctx.author.mention} ‚ùå Hi·ªán t·∫°i kh√¥ng c√≥ Supreme Admin n√†o!", 
                mention_author=True
            )
            return
        
        # Ch·ªâ Supreme Admin hi·ªán t·∫°i m·ªõi c√≥ th·ªÉ x√≥a ch√≠nh m√¨nh
        if ctx.author.id != current_supreme_id:
            await ctx.reply(
                f"{ctx.author.mention} ‚ùå **Ch·ªâ Supreme Admin hi·ªán t·∫°i m·ªõi c√≥ th·ªÉ x√≥a ch√≠nh m√¨nh!**\n"
                f"Supreme Admin hi·ªán t·∫°i: `{current_supreme_id}`", 
                mention_author=True
            )
            return
        
        # X√≥a Supreme Admin
        config['supreme_admin_id'] = None
        config['last_updated'] = datetime.now().isoformat()
        self.save_supreme_admin_config(config)
        
        embed = discord.Embed(
            title="üíî Supreme Admin ƒë√£ ƒë∆∞·ª£c x√≥a!",
            description=f"**User ID `{current_supreme_id}` ƒë√£ kh√¥ng c√≤n l√† Supreme Admin!**",
            color=discord.Color.red()
        )
        
        embed.add_field(
            name="üìù Tr·∫°ng th√°i",
            value="Hi·ªán t·∫°i kh√¥ng c√≥ Supreme Admin n√†o",
            inline=False
        )
        
        embed.add_field(
            name="üîÑ ƒê·ªÉ ƒë·∫∑t Supreme Admin m·ªõi",
            value="S·ª≠ d·ª•ng l·ªánh ; set <user_id>`",
            inline=False
        )
        
        embed.set_footer(text="Supreme Admin system")
        
        await ctx.reply(embed=embed, mention_author=True)
        logger.info(f"Supreme Admin {current_supreme_id} ƒë√£ ƒë∆∞·ª£c x√≥a b·ªüi ch√≠nh h·ªç")
    
    async def _supreme_info_impl(self, ctx):
        """Implementation th·ª±c t·∫ø c·ªßa supreme info command"""
        config = self.load_supreme_admin_config()
        supreme_id = config.get('supreme_admin_id')
        
        embed = discord.Embed(
            title="üëë Th√¥ng tin Supreme Admin",
            color=discord.Color.gold()
        )
        
        if supreme_id is None:
            embed.description = "**Hi·ªán t·∫°i kh√¥ng c√≥ Supreme Admin n√†o**"
            embed.add_field(
                name="üîÑ ƒê·ªÉ ƒë·∫∑t Supreme Admin",
                value="S·ª≠ d·ª•ng l·ªánh ; set <user_id>`",
                inline=False
            )
            embed.color = discord.Color.grey()
        else:
            embed.description = f"**Supreme Admin hi·ªán t·∫°i: `{supreme_id}`**"
            
            embed.add_field(
                name="üî• Quy·ªÅn h·∫°n t·ªëi cao",
                value=(
                    "‚Ä¢ Qu·∫£n l√Ω t·∫•t c·∫£ admin kh√°c\n"
                    "‚Ä¢ S·ª≠ d·ª•ng m·ªçi l·ªánh c·ªßa bot\n"
                    "‚Ä¢ Thay ƒë·ªïi c·∫•u h√¨nh bot\n" 
                    "‚Ä¢ Quy·ªÅn kh√¥ng th·ªÉ b·ªã thu h·ªìi"
                ),
                inline=False
            )
            
            # Th√™m th√¥ng tin th·ªùi gian n·∫øu c√≥
            if config.get('last_updated'):
                try:
                    last_updated = datetime.fromisoformat(config['last_updated'])
                    timestamp = int(last_updated.timestamp())
                    embed.add_field(
                        name="üïê C·∫≠p nh·∫≠t l·∫ßn cu·ªëi",
                        value=f"<t:{timestamp}:F>",
                        inline=True
                    )
                except:
                    pass
        
        embed.add_field(
            name="üìä Th·ªëng k√™",
            value=f"T·ªïng admin th∆∞·ªùng: {len(self.bot_instance.admin_ids)}",
            inline=True
        )
        
        embed.set_footer(text="Supreme Admin system - Ch·ªâ c√≥ 1 Supreme Admin duy nh·∫•t")
        
        await ctx.reply(embed=embed, mention_author=True)
    
    async def _show_supreme_help(self, ctx):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh supreme admin"""
        embed = discord.Embed(
            title="üëë Supreme Admin Management",
            description="**Qu·∫£n l√Ω Administrator t·ªëi cao - ch·ªâ c√≥ 1 ng∆∞·ªùi duy nh·∫•t**",
            color=discord.Color.gold()
        )
        
        embed.add_field(
            name="üìù C√°ch s·ª≠ d·ª•ng",
            value=(
                "; set <user_id>` - ƒê·∫∑t Supreme Admin\n"
                "; remove` - X√≥a Supreme Admin\n"
                "; info` - Xem th√¥ng tin Supreme Admin"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üî• Quy·ªÅn h·∫°n Supreme Admin",
            value=(
                "‚Ä¢ **Qu·∫£n l√Ω t·∫•t c·∫£ admin kh√°c**\n"
                "‚Ä¢ **S·ª≠ d·ª•ng m·ªçi l·ªánh c·ªßa bot**\n"
                "‚Ä¢ **Thay ƒë·ªïi c·∫•u h√¨nh bot**\n"
                "‚Ä¢ **Quy·ªÅn t·ªëi cao kh√¥ng th·ªÉ b·ªã thu h·ªìi**"
            ),
            inline=False
        )
        
        embed.add_field(
            name="‚ö†Ô∏è Quy t·∫Øc quan tr·ªçng",
            value=(
                "‚Ä¢ Ch·ªâ c√≥ **1 Supreme Admin** t·∫°i m·ªôt th·ªùi ƒëi·ªÉm\n"
                "‚Ä¢ Ch·ªâ Supreme Admin hi·ªán t·∫°i m·ªõi c√≥ th·ªÉ thay ƒë·ªïi\n"
                "‚Ä¢ N·∫øu ch∆∞a c√≥ Supreme Admin, ai c≈©ng c√≥ th·ªÉ ƒë·∫∑t l·∫ßn ƒë·∫ßu"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üí° V√≠ d·ª•",
            value="; set 1264908798003253314`",
            inline=False
        )
        
        embed.set_footer(text="Supreme Admin system - Quy·ªÅn t·ªëi cao tuy·ªát ƒë·ªëi")
        
        await ctx.reply(embed=embed, mention_author=True)
    
    async def _shutdown_bot_impl(self, ctx):
        """Implementation th·ª±c t·∫ø c·ªßa shutdown bot command"""
        # Ki·ªÉm tra quy·ªÅn Supreme Admin
        if not self.is_supreme_admin(ctx.author.id):
            embed = discord.Embed(
                title="‚ùå Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
                description="**Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ t·∫Øt bot!**",
                color=discord.Color.red(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üîí Quy·ªÅn h·∫°n c·ªßa b·∫°n:",
                value=f"{'üõ°Ô∏è Admin' if self.bot_instance.is_admin(ctx.author.id) else 'üë§ User th∆∞·ªùng'}",
                inline=True
            )
            
            embed.add_field(
                name="üëë Supreme Admin hi·ªán t·∫°i:",
                value=f"`{self.get_supreme_admin_id()}`" if self.get_supreme_admin_id() else "Ch∆∞a c√≥",
                inline=True
            )
            
            embed.set_footer(text="Access Denied ‚Ä¢ Supreme Admin Only")
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        # T·∫°o embed x√°c nh·∫≠n shutdown
        embed = discord.Embed(
            title="üî¥ SHUTDOWN BOT",
            description="**B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫Øt bot kh√¥ng?**",
            color=discord.Color.red(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="‚ö†Ô∏è C·∫£nh b√°o",
            value=(
                "‚Ä¢ Bot s·∫Ω b·ªã t·∫Øt ho√†n to√†n\n"
                "‚Ä¢ T·∫•t c·∫£ l·ªánh s·∫Ω ng·ª´ng ho·∫°t ƒë·ªông\n"
                "‚Ä¢ C·∫ßn kh·ªüi ƒë·ªông l·∫°i th·ªß c√¥ng\n"
                "‚Ä¢ H√†nh ƒë·ªông kh√¥ng th·ªÉ ho√†n t√°c"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîß L·ªánh s·∫Ω th·ª±c hi·ªán",
            value="`taskkill /f /im python.exe`",
            inline=False
        )
        
        embed.add_field(
            name="üëë ƒê∆∞·ª£c th·ª±c hi·ªán b·ªüi",
            value=f"{ctx.author.mention} (Supreme Admin)",
            inline=True
        )
        
        embed.add_field(
            name="‚è∞ Th·ªùi gian",
            value=f"<t:{int(datetime.now().timestamp())}:F>",
            inline=True
        )
        
        embed.set_footer(text="Reply 'SHUTDOWN CONFIRM' trong 30 gi√¢y ƒë·ªÉ x√°c nh·∫≠n")
        
        await ctx.reply(embed=embed, mention_author=True)
        
        # Ch·ªù x√°c nh·∫≠n t·ª´ user trong 30 gi√¢y
        def check(message):
            return (message.author == ctx.author and 
                   message.channel == ctx.channel and 
                   message.content.upper() == "SHUTDOWN CONFIRM")
        
        try:
            confirmation = await self.bot.wait_for('message', check=check, timeout=30.0)
            
            # G·ª≠i th√¥ng b√°o cu·ªëi c√πng
            final_embed = discord.Embed(
                title="üî¥ BOT ƒêANG T·∫ÆT...",
                description="**Bot s·∫Ω t·∫Øt trong 3 gi√¢y!**",
                color=discord.Color.dark_red(),
                timestamp=datetime.now()
            )
            
            final_embed.add_field(
                name="üëë ƒê∆∞·ª£c th·ª±c hi·ªán b·ªüi",
                value=f"{ctx.author.mention} (Supreme Admin)",
                inline=True
            )
            
            final_embed.add_field(
                name="üíÄ Tr·∫°ng th√°i",
                value="ƒêang th·ª±c hi·ªán l·ªánh shutdown...",
                inline=True
            )
            
            final_embed.set_footer(text="Goodbye! Bot ƒë√£ ƒë∆∞·ª£c t·∫Øt b·ªüi Supreme Admin")
            
            await ctx.reply(embed=final_embed, mention_author=True)
            
            # Log shutdown action
            logger.critical(f"BOT SHUTDOWN initiated by Supreme Admin {ctx.author} ({ctx.author.id})")
            
            # Th·ª±c hi·ªán l·ªánh shutdown
            try:
                # Ch·∫°y l·ªánh taskkill ƒë·ªÉ t·∫Øt t·∫•t c·∫£ process Python
                result = subprocess.run(['taskkill', '/f', '/im', 'python.exe'], 
                                      capture_output=True, text=True, timeout=10)
                
                logger.info(f"Shutdown command executed: {result.returncode}")
                if result.stdout:
                    logger.info(f"Shutdown stdout: {result.stdout}")
                if result.stderr:
                    logger.warning(f"Shutdown stderr: {result.stderr}")
                    
            except subprocess.TimeoutExpired:
                logger.error("Shutdown command timed out")
            except Exception as e:
                logger.error(f"Error executing shutdown command: {e}")
                
                # G·ª≠i th√¥ng b√°o l·ªói n·∫øu shutdown th·∫•t b·∫°i
                error_embed = discord.Embed(
                    title="‚ùå L·ªói Shutdown",
                    description=f"**Kh√¥ng th·ªÉ t·∫Øt bot: {str(e)}**",
                    color=discord.Color.red(),
                    timestamp=datetime.now()
                )
                
                await ctx.reply(embed=error_embed, mention_author=True)
                
        except asyncio.TimeoutError:
            # Timeout - h·ªßy shutdown
            timeout_embed = discord.Embed(
                title="‚è∞ H·∫øt th·ªùi gian x√°c nh·∫≠n",
                description="**L·ªánh shutdown ƒë√£ b·ªã h·ªßy do kh√¥ng x√°c nh·∫≠n trong 30 gi√¢y**",
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            
            timeout_embed.add_field(
                name="üîÑ ƒê·ªÉ th·ª≠ l·∫°i",
                value="S·ª≠ d·ª•ng l·ªánh `;shutdown` v√† reply `SHUTDOWN CONFIRM`",
                inline=False
            )
            
            timeout_embed.set_footer(text="Shutdown cancelled - Bot v·∫´n ƒëang ho·∫°t ƒë·ªông")
            
            await ctx.reply(embed=timeout_embed, mention_author=True)
            logger.info(f"Shutdown cancelled - timeout by {ctx.author} ({ctx.author.id})")
