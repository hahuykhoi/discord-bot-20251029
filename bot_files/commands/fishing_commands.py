import discord
import json
import os
import random
import time
from datetime import datetime
from utils.shared_wallet import SharedWallet

class FishingCommands:
    def __init__(self, bot_instance):
        self.bot_instance = bot_instance
        self.bot = bot_instance.bot
        
        # File l∆∞u tr·ªØ d·ªØ li·ªáu c√¢u c√°
        self.fishing_data_file = 'data/fishing_data.json'
        self.fishing_data = self.load_fishing_data()
        
        # C·∫•u h√¨nh game c√¢u c√°
        self.FISHING_COOLDOWN = 300  # 5 ph√∫t cooldown
        self.FISHING_COST = 1000     # Chi ph√≠ m·ªói l·∫ßn c√¢u: 1000 xu
        self.FREE_FISHING_COOLDOWN = 600  # 10 ph√∫t cooldown cho c√¢u mi·ªÖn ph√≠
        
        # H·ªá th·ªëng c·∫ßn c√¢u - c√†ng x·ªãn c√†ng d·ªÖ ra c√° hi·∫øm
        self.FISHING_RODS = {
            "basic": {
                "name": "üé£ C·∫ßn C√¢u C∆° B·∫£n", 
                "price": 0, 
                "trash_bonus": 0, 
                "common_bonus": 0, 
                "rare_bonus": 0, 
                "epic_bonus": 0, 
                "legendary_bonus": 0,
                "description": "C·∫ßn c√¢u mi·ªÖn ph√≠ - t·ª∑ l·ªá c√° th∆∞·ªùng 100%"
            },
            "iron": {
                "name": "‚öôÔ∏è C·∫ßn C√¢u S·∫Øt", 
                "price": 50000, 
                "trash_bonus": -10, 
                "common_bonus": +5, 
                "rare_bonus": +3, 
                "epic_bonus": +1, 
                "legendary_bonus": +1,
                "description": "Gi·∫£m 10% c√° r√°c, tƒÉng 5% c√° th∆∞·ªùng, 3% c√° hi·∫øm"
            },
            "gold": {
                "name": "ü•á C·∫ßn C√¢u V√†ng", 
                "price": 200000, 
                "trash_bonus": -20, 
                "common_bonus": +10, 
                "rare_bonus": +7, 
                "epic_bonus": +2, 
                "legendary_bonus": +1,
                "description": "Gi·∫£m 20% c√° r√°c, tƒÉng 10% c√° th∆∞·ªùng, 7% c√° hi·∫øm"
            },
            "diamond": {
                "name": "üíé C·∫ßn C√¢u Kim C∆∞∆°ng", 
                "price": 500000, 
                "trash_bonus": -30, 
                "common_bonus": +15, 
                "rare_bonus": +10, 
                "epic_bonus": +3, 
                "legendary_bonus": +2,
                "description": "Gi·∫£m 30% c√° r√°c, tƒÉng 15% c√° th∆∞·ªùng, 10% c√° hi·∫øm"
            },
            "legendary": {
                "name": "üåü C·∫ßn C√¢u Huy·ªÅn Tho·∫°i", 
                "price": 1000000, 
                "trash_bonus": -40, 
                "common_bonus": +20, 
                "rare_bonus": +15, 
                "epic_bonus": +4, 
                "legendary_bonus": +3,
                "description": "Gi·∫£m 40% c√° r√°c, tƒÉng 20% c√° th∆∞·ªùng, 15% c√° hi·∫øm, 3% huy·ªÅn tho·∫°i"
            }
        }
        
        # Danh s√°ch c√° v√† t·ª∑ l·ªá xu·∫•t hi·ªán
        self.FISH_TYPES = {
            # C√° r·∫•t th∆∞·ªùng (60% t·ª∑ l·ªá) - Gi√° r·∫ª nh·∫•t
            "ü¶ê": {"name": "T√¥m Nh·ªè", "price": 10, "rarity": "trash", "chance": 18},
            "üêö": {"name": "·ªêc Bi·ªÉn", "price": 15, "rarity": "trash", "chance": 15},
            "ü¶Ä": {"name": "Cua Nh·ªè", "price": 20, "rarity": "trash", "chance": 15},
            "ü™º": {"name": "S·ª©a", "price": 25, "rarity": "trash", "chance": 12},
            
            # C√° th∆∞·ªùng (25% t·ª∑ l·ªá) - Gi√° trung b√¨nh th·∫•p  
            "üêü": {"name": "C√° Nh·ªè", "price": 50, "rarity": "common", "chance": 6},
            "üê†": {"name": "C√° Nhi·ªát ƒê·ªõi", "price": 80, "rarity": "common", "chance": 5},
            "üé£": {"name": "C√° C·∫ßn C√¢u", "price": 120, "rarity": "common", "chance": 4},
            "üê°": {"name": "C√° N√≥c", "price": 150, "rarity": "common", "chance": 3},
            "üêù": {"name": "C√° V√†ng", "price": 200, "rarity": "common", "chance": 2.5},
            "ü¶ë": {"name": "M·ª±c Nh·ªè", "price": 180, "rarity": "common", "chance": 2},
            "üêõ": {"name": "Giun Bi·ªÉn", "price": 30, "rarity": "common", "chance": 1.5},
            "ü¶ã": {"name": "C√° B∆∞·ªõm", "price": 250, "rarity": "common", "chance": 1},
            "üêå": {"name": "·ªêc S√™n Bi·ªÉn", "price": 40, "rarity": "common", "chance": 0.5},
            
            # C√° hi·∫øm (25% t·ª∑ l·ªá) - Gi√° trung b√¨nh
            "ü¶à": {"name": "C√° M·∫≠p", "price": 500, "rarity": "rare", "chance": 4},
            "üêô": {"name": "B·∫°ch Tu·ªôc", "price": 450, "rarity": "rare", "chance": 3.5},
            "ü¶û": {"name": "T√¥m H√πm", "price": 600, "rarity": "rare", "chance": 3},
            "üêã": {"name": "C√° Voi", "price": 800, "rarity": "rare", "chance": 2.5},
            "üê¢": {"name": "R√πa Bi·ªÉn", "price": 700, "rarity": "rare", "chance": 2},
            "ü¶≠": {"name": "H·∫£i C·∫©u", "price": 650, "rarity": "rare", "chance": 2},
            "üêß": {"name": "Chim C√°nh C·ª•t", "price": 550, "rarity": "rare", "chance": 1.5},
            "ü¶Ü": {"name": "V·ªãt Bi·ªÉn", "price": 400, "rarity": "rare", "chance": 1.5},
            "üêä": {"name": "C√° S·∫•u Bi·ªÉn", "price": 900, "rarity": "rare", "chance": 1},
            "ü¶é": {"name": "Th·∫±n L·∫±n Bi·ªÉn", "price": 350, "rarity": "rare", "chance": 1},
            "üêç": {"name": "R·∫Øn Bi·ªÉn", "price": 750, "rarity": "rare", "chance": 1},
            "üï∑Ô∏è": {"name": "Nh·ªán Bi·ªÉn", "price": 300, "rarity": "rare", "chance": 1},
            "ü¶Ç": {"name": "B·ªç C·∫°p Bi·ªÉn", "price": 850, "rarity": "rare", "chance": 0.5},
            
            # C√° si√™u hi·∫øm (8% t·ª∑ l·ªá) - Gi√° cao
            "üêâ": {"name": "R·ªìng Bi·ªÉn", "price": 2000, "rarity": "epic", "chance": 2},
            "üßú": {"name": "N√†ng Ti√™n C√°", "price": 2500, "rarity": "epic", "chance": 1.5},
            "ü¶Ñ": {"name": "K·ª≥ L√¢n Bi·ªÉn", "price": 3000, "rarity": "epic", "chance": 1},
            "üëë": {"name": "Vua Bi·ªÉn", "price": 3500, "rarity": "epic", "chance": 1},
            "üíé": {"name": "C√° Kim C∆∞∆°ng", "price": 4000, "rarity": "epic", "chance": 0.8},
            "üåü": {"name": "C√° Ng√¥i Sao", "price": 4500, "rarity": "epic", "chance": 0.7},
            
            # C√° huy·ªÅn tho·∫°i (2% t·ª∑ l·ªá) - Gi√° c·ª±c cao
            "‚≠ê": {"name": "C√° Sao V√†ng", "price": 10000, "rarity": "legendary", "chance": 0.5},
            "üî•": {"name": "Ph∆∞·ª£ng Ho√†ng Bi·ªÉn", "price": 15000, "rarity": "legendary", "chance": 0.3},
            "‚ö°": {"name": "S·∫•m S√©t Bi·ªÉn", "price": 20000, "rarity": "legendary", "chance": 0.2},
            "üåà": {"name": "C·∫ßu V·ªìng Bi·ªÉn", "price": 25000, "rarity": "legendary", "chance": 0.1},
            "üí´": {"name": "Thi√™n Th·∫ßn Bi·ªÉn", "price": 50000, "rarity": "legendary", "chance": 0.05}
        }
        
        # M√†u s·∫Øc theo ƒë·ªô hi·∫øm
        self.RARITY_COLORS = {
            "trash": discord.Color.light_grey(),      # C√° r√°c - X√°m nh·∫°t
            "common": discord.Color.green(),          # C√° th∆∞·ªùng - Xanh l√°
            "rare": discord.Color.blue(),             # C√° hi·∫øm - Xanh d∆∞∆°ng
            "epic": discord.Color.purple(),           # C√° si√™u hi·∫øm - T√≠m
            "legendary": discord.Color.gold()         # C√° huy·ªÅn tho·∫°i - V√†ng
        }
        
    def load_fishing_data(self):
        """Load d·ªØ li·ªáu c√¢u c√°"""
        if os.path.exists(self.fishing_data_file):
            try:
                with open(self.fishing_data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {}
        return {}
    
    def save_fishing_data(self):
        """Save d·ªØ li·ªáu c√¢u c√°"""
        os.makedirs(os.path.dirname(self.fishing_data_file), exist_ok=True)
        with open(self.fishing_data_file, 'w', encoding='utf-8') as f:
            json.dump(self.fishing_data, f, ensure_ascii=False, indent=2)
    
    def get_user_fishing_data(self, user_id):
        """L·∫•y d·ªØ li·ªáu c√¢u c√° c·ªßa user"""
        user_id_str = str(user_id)
        if user_id_str not in self.fishing_data:
            self.fishing_data[user_id_str] = {
                'fish_inventory': {},
                'total_fished': 0,
                'total_sold': 0,
                'total_earned': 0,
                'last_fishing_time': 0,
                'last_free_fishing_time': 0,  # Th·ªùi gian c√¢u mi·ªÖn ph√≠ l·∫ßn cu·ªëi
                'fishing_level': 1,
                'fishing_exp': 0,
                'current_rod': 'basic',  # C·∫ßn c√¢u hi·ªán t·∫°i
                'owned_rods': ['basic']  # Danh s√°ch c·∫ßn c√¢u ƒë√£ mua
            }
        return self.fishing_data[user_id_str]
    
    def get_random_fish(self, user_level=1, rod_type="basic"):
        """Random c√° d·ª±a tr√™n t·ª∑ l·ªá, level v√† lo·∫°i c·∫ßn c√¢u"""
        # TƒÉng t·ª∑ l·ªá c√° hi·∫øm theo level
        level_bonus = min(user_level * 2, 20)  # T·ªëi ƒëa +20% cho c√° hi·∫øm
        
        # Bonus t·ª´ c·∫ßn c√¢u
        rod_bonus = self.FISHING_RODS.get(rod_type, self.FISHING_RODS["basic"])
        
        # T·∫°o danh s√°ch weighted choices
        choices = []
        weights = []
        
        for fish_emoji, fish_data in self.FISH_TYPES.items():
            base_chance = fish_data["chance"]
            rarity = fish_data["rarity"]
            
            # √Åp d·ª•ng bonus t·ª´ c·∫ßn c√¢u
            rod_multiplier = 1.0
            if rarity == "trash":
                rod_multiplier += rod_bonus["trash_bonus"] / 100.0
            elif rarity == "common":
                rod_multiplier += rod_bonus["common_bonus"] / 100.0
            elif rarity == "rare":
                rod_multiplier += rod_bonus["rare_bonus"] / 100.0
            elif rarity == "epic":
                rod_multiplier += rod_bonus["epic_bonus"] / 100.0
            elif rarity == "legendary":
                rod_multiplier += rod_bonus["legendary_bonus"] / 100.0
            
            # TƒÉng t·ª∑ l·ªá c√° hi·∫øm theo level
            if rarity in ["rare", "epic", "legendary"]:
                level_multiplier = 1 + (level_bonus * 0.01)
            else:
                level_multiplier = 1.0
                
            # T√≠nh t·ª∑ l·ªá cu·ªëi c√πng
            adjusted_chance = base_chance * rod_multiplier * level_multiplier
            adjusted_chance = max(0.1, adjusted_chance)  # T·ªëi thi·ªÉu 0.1%
                
            choices.append(fish_emoji)
            weights.append(adjusted_chance)
        
        return random.choices(choices, weights=weights)[0]
    
    def add_fishing_exp(self, user_data, fish_rarity):
        """Th√™m EXP c√¢u c√°"""
        exp_gain = {
            "trash": 5,        # C√° r√°c - 5 EXP
            "common": 10,      # C√° th∆∞·ªùng - 10 EXP
            "rare": 25,        # C√° hi·∫øm - 25 EXP
            "epic": 50,        # C√° si√™u hi·∫øm - 50 EXP
            "legendary": 100   # C√° huy·ªÅn tho·∫°i - 100 EXP
        }
        user_data['fishing_exp'] += exp_gain.get(fish_rarity, 5)
        
        # Ki·ªÉm tra level up
        exp_needed = user_data['fishing_level'] * 100
        if user_data['fishing_exp'] >= exp_needed:
            user_data['fishing_level'] += 1
            user_data['fishing_exp'] = 0
            return True  # Level up
        return False
    
    def register_commands(self):
        """ƒêƒÉng k√Ω c√°c l·ªánh c√¢u c√°"""
        
        @self.bot.command(name='cauca', aliases=['fishing', 'fish'])
        async def fishing_command(ctx):
            """L·ªánh c√¢u c√°"""
            user_id = ctx.author.id
            current_time = int(time.time())
            
            # L·∫•y d·ªØ li·ªáu user
            user_data = self.get_user_fishing_data(user_id)
            
            # B·ªè cooldown - c√≥ th·ªÉ c√¢u c√° li√™n t·ª•c
            # last_fishing = user_data.get('last_fishing_time', 0)
            # if current_time - last_fishing < self.FISHING_COOLDOWN:
            #     remaining = self.FISHING_COOLDOWN - (current_time - last_fishing)
            #     minutes = remaining // 60
            #     seconds = remaining % 60
            #     
            #     embed = discord.Embed(
            #         title="‚è∞ Cooldown C√¢u C√°",
            #         description=f"B·∫°n c·∫ßn ngh·ªâ ng∆°i tr∆∞·ªõc khi c√¢u c√° ti·∫øp!",
            #         color=discord.Color.orange()
            #     )
            #     embed.add_field(
            #         name="‚è≥ Th·ªùi gian c√≤n l·∫°i:",
            #         value=f"{minutes}m {seconds}s",
            #         inline=False
            #     )
            #     embed.add_field(
            #         name="üí° L∆∞u √Ω:",
            #         value="M·ªói l·∫ßn c√¢u c√° c√°ch nhau 5 ph√∫t ƒë·ªÉ c√° c√≥ th·ªùi gian t·∫≠p trung l·∫°i!",
            #         inline=False
            #     )
            #     await ctx.reply(embed=embed, mention_author=True)
            #     return
            
            # C√¢u c√° gi·ªù ƒë√£ mi·ªÖn ph√≠ - kh√¥ng c·∫ßn ki·ªÉm tra ti·ªÅn
            # if hasattr(self.bot_instance, 'shared_wallet') and self.bot_instance.shared_wallet:
            #     current_balance = self.bot_instance.shared_wallet.get_balance(user_id)
            #     if current_balance < self.FISHING_COST:
            #         embed = discord.Embed(
            #             title="üí∏ Kh√¥ng ƒê·ªß Ti·ªÅn",
            #             description=f"B·∫°n c·∫ßn **{self.FISHING_COST:,} xu** ƒë·ªÉ thu√™ d·ª•ng c·ª• c√¢u c√°!",
            #             color=discord.Color.red()
            #         )
            #         embed.add_field(
            #             name="üí∞ S·ªë d∆∞ hi·ªán t·∫°i:",
            #             value=f"{current_balance:,} xu",
            #             inline=True
            #         )
            #         embed.add_field(
            #             name="üí° G·ª£i √Ω:",
            #             value="Ch∆°i c√°c game kh√°c ƒë·ªÉ ki·∫øm th√™m xu!",
            #             inline=True
            #         )
            #         await ctx.reply(embed=embed, mention_author=True)
            #         return
            #     
            #     # Tr·ª´ ti·ªÅn thu√™ d·ª•ng c·ª•
            #     self.bot_instance.shared_wallet.subtract_balance(user_id, self.FISHING_COST)
            
            # B·∫Øt ƒë·∫ßu c√¢u c√°
            fishing_embed = discord.Embed(
                title="üé£ ƒêang C√¢u C√°...",
                description=f"{ctx.author.mention} ƒëang th·∫£ c√¢u xu·ªëng n∆∞·ªõc...",
                color=discord.Color.blue()
            )
            fishing_embed.add_field(
                name="‚ö° Tr·∫°ng th√°i:",
                value="ƒêang ch·ªù c√° c·∫Øn c√¢u... üêü",
                inline=False
            )
            fishing_embed.set_footer(text="Vui l√≤ng ch·ªù k·∫øt qu·∫£...")
            
            message = await ctx.reply(embed=fishing_embed, mention_author=True)
            
            # B·ªè delay ƒë·ªÉ c√¢u c√° nhanh h∆°n
            # import asyncio
            # await asyncio.sleep(3)
            
            # Random c√° v·ªõi c·∫ßn c√¢u hi·ªán t·∫°i
            current_rod = user_data.get('current_rod', 'basic')
            fish_emoji = self.get_random_fish(user_data['fishing_level'], current_rod)
            fish_info = self.FISH_TYPES[fish_emoji]
            
            # C·∫≠p nh·∫≠t inventory
            if fish_emoji not in user_data['fish_inventory']:
                user_data['fish_inventory'][fish_emoji] = 0
            user_data['fish_inventory'][fish_emoji] += 1
            
            # C·∫≠p nh·∫≠t th·ªëng k√™
            user_data['total_fished'] += 1
            user_data['last_fishing_time'] = current_time
            
            # Th√™m EXP v√† ki·ªÉm tra level up
            leveled_up = self.add_fishing_exp(user_data, fish_info['rarity'])
            
            # L∆∞u d·ªØ li·ªáu
            self.save_fishing_data()
            
            # T·∫°o embed k·∫øt qu·∫£
            result_embed = discord.Embed(
                title="üéâ C√¢u C√° Th√†nh C√¥ng!",
                description=f"{ctx.author.mention} ƒë√£ c√¢u ƒë∆∞·ª£c:",
                color=self.RARITY_COLORS[fish_info['rarity']]
            )
            
            rarity_text = {
                "trash": "‚ö™ R√°c",
                "common": "üü¢ Th∆∞·ªùng",
                "rare": "üîµ Hi·∫øm", 
                "epic": "üü£ Si√™u Hi·∫øm",
                "legendary": "üü° Huy·ªÅn Tho·∫°i"
            }
            
            result_embed.add_field(
                name="üêü Lo·∫°i c√°:",
                value=f"{fish_emoji} **{fish_info['name']}**",
                inline=True
            )
            result_embed.add_field(
                name="üíé ƒê·ªô hi·∫øm:",
                value=rarity_text[fish_info['rarity']],
                inline=True
            )
            result_embed.add_field(
                name="üí∞ Gi√° b√°n:",
                value=f"{fish_info['price']:,} xu",
                inline=True
            )
            
            # Th√¥ng tin level
            result_embed.add_field(
                name="üéØ Level c√¢u c√°:",
                value=f"Level {user_data['fishing_level']} ({user_data['fishing_exp']}/100 EXP)",
                inline=False
            )
            
            if leveled_up:
                result_embed.add_field(
                    name="üéä LEVEL UP!",
                    value=f"Ch√∫c m·ª´ng! B·∫°n ƒë√£ l√™n Level {user_data['fishing_level']}!\nT·ª∑ l·ªá c√¢u c√° hi·∫øm tƒÉng l√™n!",
                    inline=False
                )
            
            result_embed.add_field(
                name="üìä Th·ªëng k√™:",
                value=f"T·ªïng c√° ƒë√£ c√¢u: **{user_data['total_fished']}** con",
                inline=False
            )
            
            result_embed.add_field(
                name="üí° L∆∞u √Ω:",
                value="‚Ä¢ Kh√¥ng c√≥ cooldown - c√¢u c√° li√™n t·ª•c!\n‚Ä¢ D√πng `;sell` ƒë·ªÉ b√°n c√° l·∫•y xu ho·∫∑c `;kho` ƒë·ªÉ xem kho c√°!\n‚Ä¢ D√πng `;rodshop` ƒë·ªÉ mua c·∫ßn c√¢u t·ªët h∆°n!",
                inline=False
            )
            
            result_embed.set_footer(text="üÜì C√¢u c√° mi·ªÖn ph√≠ - Kh√¥ng cooldown - Mua c·∫ßn c√¢u t·ªët h∆°n ƒë·ªÉ tƒÉng t·ª∑ l·ªá c√° hi·∫øm!")
            
            await message.edit(embed=result_embed)
        
        @self.bot.command(name='freefishing', aliases=['caucafree', 'fishfree'])
        async def free_fishing_command(ctx):
            """L·ªánh c√¢u c√° mi·ªÖn ph√≠ v·ªõi c·∫ßn c√¢u c∆° b·∫£n"""
            user_id = ctx.author.id
            current_time = int(time.time())
            
            # L·∫•y d·ªØ li·ªáu user
            user_data = self.get_user_fishing_data(user_id)
            
            # B·ªè cooldown cho c√¢u mi·ªÖn ph√≠ - c√≥ th·ªÉ c√¢u li√™n t·ª•c
            # last_free_fishing = user_data.get('last_free_fishing_time', 0)
            # if current_time - last_free_fishing < self.FREE_FISHING_COOLDOWN:
            #     remaining = self.FREE_FISHING_COOLDOWN - (current_time - last_free_fishing)
            #     minutes = remaining // 60
            #     seconds = remaining % 60
            #     
            #     embed = discord.Embed(
            #         title="‚è∞ C√¢u C√° Mi·ªÖn Ph√≠ - Cooldown",
            #         description=f"B·∫°n c·∫ßn ƒë·ª£i **{minutes}m {seconds}s** n·ªØa ƒë·ªÉ c√¢u c√° mi·ªÖn ph√≠!",
            #         color=discord.Color.orange()
            #     )
            #     embed.add_field(
            #         name="üí° G·ª£i √Ω:",
            #         value="‚Ä¢ D√πng `;cauca` ƒë·ªÉ c√¢u c√° tr·∫£ ph√≠ (cooldown 5 ph√∫t)\n‚Ä¢ Mua c·∫ßn c√¢u t·ªët h∆°n ƒë·ªÉ tƒÉng t·ª∑ l·ªá c√° hi·∫øm!",
            #         inline=False
            #     )
            #     await ctx.reply(embed=embed, mention_author=True)
            #     return
            
            # T·∫°o embed c√¢u c√°
            fishing_embed = discord.Embed(
                title="üé£ C√¢u C√° Mi·ªÖn Ph√≠",
                description=f"üåä **{ctx.author.display_name}** ƒëang c√¢u c√° v·ªõi c·∫ßn c√¢u c∆° b·∫£n...",
                color=discord.Color.blue(),
                timestamp=datetime.now()
            )
            
            rod_info = self.FISHING_RODS["basic"]
            fishing_embed.add_field(
                name="üé£ C·∫ßn c√¢u:",
                value=f"{rod_info['name']}\n*{rod_info['description']}*",
                inline=False
            )
            fishing_embed.add_field(
                name="‚ö° Tr·∫°ng th√°i:",
                value="ƒêang ch·ªù c√° c·∫Øn c√¢u... üêü",
                inline=False
            )
            fishing_embed.set_footer(text="C√¢u c√° mi·ªÖn ph√≠ - C·∫ßn c√¢u c∆° b·∫£n")
            
            message = await ctx.reply(embed=fishing_embed, mention_author=True)
            
            # B·ªè delay ƒë·ªÉ c√¢u c√° nhanh h∆°n
            # import asyncio
            # await asyncio.sleep(3)
            
            # Random c√° v·ªõi c·∫ßn c√¢u c∆° b·∫£n (100% c√° th∆∞·ªùng)
            fish_emoji = self.get_random_fish(user_data['fishing_level'], "basic")
            fish_info = self.FISH_TYPES[fish_emoji]
            
            # C·∫≠p nh·∫≠t inventory
            if fish_emoji not in user_data['fish_inventory']:
                user_data['fish_inventory'][fish_emoji] = 0
            user_data['fish_inventory'][fish_emoji] += 1
            
            # C·∫≠p nh·∫≠t th·ªëng k√™
            user_data['total_fished'] += 1
            user_data['last_free_fishing_time'] = current_time
            
            # Th√™m EXP
            leveled_up = self.add_fishing_exp(user_data, fish_info['rarity'])
            
            # L∆∞u d·ªØ li·ªáu
            self.save_fishing_data()
            
            # T·∫°o embed k·∫øt qu·∫£
            rarity_colors = {
                "trash": discord.Color.grey(),
                "common": discord.Color.green(),
                "rare": discord.Color.blue(),
                "epic": discord.Color.purple(),
                "legendary": discord.Color.gold()
            }
            
            result_embed = discord.Embed(
                title="üé£ K·∫øt Qu·∫£ C√¢u C√° Mi·ªÖn Ph√≠",
                description=f"üéâ **{ctx.author.display_name}** ƒë√£ c√¢u ƒë∆∞·ª£c:",
                color=rarity_colors.get(fish_info['rarity'], discord.Color.blue()),
                timestamp=datetime.now()
            )
            
            result_embed.add_field(
                name="üêü C√° c√¢u ƒë∆∞·ª£c:",
                value=f"{fish_emoji} **{fish_info['name']}**\nüí∞ Gi√° tr·ªã: {fish_info['price']:,} xu",
                inline=True
            )
            
            result_embed.add_field(
                name="‚≠ê ƒê·ªô hi·∫øm:",
                value=f"**{fish_info['rarity'].title()}**",
                inline=True
            )
            
            result_embed.add_field(
                name="üìä Th·ªëng k√™:",
                value=f"üé£ T·ªïng c√¢u: {user_data['total_fished']}\nüèÜ Level: {user_data['fishing_level']}",
                inline=True
            )
            
            if leveled_up:
                result_embed.add_field(
                    name="üéä Level Up!",
                    value=f"Ch√∫c m·ª´ng! B·∫°n ƒë√£ l√™n **Level {user_data['fishing_level']}**!",
                    inline=False
                )
            
            result_embed.set_footer(text="üÜì C√¢u c√° mi·ªÖn ph√≠ - Kh√¥ng cooldown - C·∫ßn c√¢u c∆° b·∫£n")
            
            await message.edit(embed=result_embed)
        
        @self.bot.command(name='sell', aliases=['bancar', 'sellfish'])
        async def sell_fish_command(ctx, fish_type=None, amount=None):
            """L·ªánh b√°n c√°"""
            user_id = ctx.author.id
            user_data = self.get_user_fishing_data(user_id)
            
            # N·∫øu kh√¥ng c√≥ tham s·ªë, hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
            if not fish_type:
                embed = discord.Embed(
                    title="üè™ H∆∞·ªõng D·∫´n B√°n C√°",
                    description="C√°ch s·ª≠ d·ª•ng l·ªánh b√°n c√°:",
                    color=discord.Color.blue()
                )
                
                embed.add_field(
                    name="üìù C√∫ ph√°p:",
                    value=(
                        "`;sell <lo·∫°i_c√°> [s·ªë_l∆∞·ª£ng]`\n"
                        "`;sell all` - B√°n t·∫•t c·∫£ c√°\n"
                        "`;sell üêü 5` - B√°n 5 con c√° nh·ªè\n"
                        "`;sell ü¶à` - B√°n 1 con c√° m·∫≠p"
                    ),
                    inline=False
                )
                
                # Hi·ªÉn th·ªã kho c√° hi·ªán t·∫°i
                if user_data['fish_inventory']:
                    inventory_text = ""
                    total_value = 0
                    
                    for fish_emoji, count in user_data['fish_inventory'].items():
                        if count > 0:
                            fish_info = self.FISH_TYPES[fish_emoji]
                            value = fish_info['price'] * count
                            total_value += value
                            inventory_text += f"{fish_emoji} **{fish_info['name']}**: {count} con ({fish_info['price']:,} xu/con)\n"
                    
                    embed.add_field(
                        name="üéí Kho c√° c·ªßa b·∫°n:",
                        value=inventory_text or "Tr·ªëng",
                        inline=False
                    )
                    
                    embed.add_field(
                        name="üí∞ T·ªïng gi√° tr·ªã:",
                        value=f"{total_value:,} xu",
                        inline=True
                    )
                else:
                    embed.add_field(
                        name="üéí Kho c√°:",
                        value="B·∫°n ch∆∞a c√≥ c√° n√†o! D√πng `;cauca` ƒë·ªÉ c√¢u c√°.",
                        inline=False
                    )
                
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # X·ª≠ l√Ω b√°n t·∫•t c·∫£
            if fish_type.lower() == "all":
                if not user_data['fish_inventory'] or all(count == 0 for count in user_data['fish_inventory'].values()):
                    await ctx.reply("‚ùå B·∫°n kh√¥ng c√≥ c√° n√†o ƒë·ªÉ b√°n!", mention_author=True)
                    return
                
                total_earned = 0
                sold_fish = []
                
                for fish_emoji, count in user_data['fish_inventory'].items():
                    if count > 0:
                        fish_info = self.FISH_TYPES[fish_emoji]
                        earned = fish_info['price'] * count
                        total_earned += earned
                        sold_fish.append(f"{fish_emoji} {fish_info['name']}: {count} con = {earned:,} xu")
                        user_data['fish_inventory'][fish_emoji] = 0
                
                # Th√™m ti·ªÅn v√†o v√≠
                if hasattr(self.bot_instance, 'shared_wallet') and self.bot_instance.shared_wallet:
                    self.bot_instance.shared_wallet.add_balance(user_id, total_earned)
                
                # C·∫≠p nh·∫≠t th·ªëng k√™
                user_data['total_sold'] += sum(user_data['fish_inventory'].values())
                user_data['total_earned'] += total_earned
                
                self.save_fishing_data()
                
                embed = discord.Embed(
                    title="üí∞ B√°n C√° Th√†nh C√¥ng!",
                    description=f"{ctx.author.mention} ƒë√£ b√°n t·∫•t c·∫£ c√°!",
                    color=discord.Color.green()
                )
                
                embed.add_field(
                    name="üêü C√° ƒë√£ b√°n:",
                    value="\n".join(sold_fish),
                    inline=False
                )
                
                embed.add_field(
                    name="üíµ T·ªïng thu nh·∫≠p:",
                    value=f"**+{total_earned:,} xu**",
                    inline=True
                )
                
                embed.add_field(
                    name="üìä Th·ªëng k√™ t·ªïng:",
                    value=f"ƒê√£ b√°n: {user_data['total_sold']} con\nT·ªïng ki·∫øm: {user_data['total_earned']:,} xu",
                    inline=True
                )
                
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # X·ª≠ l√Ω b√°n c√° c·ª• th·ªÉ
            # T√¨m fish emoji t·ª´ input
            target_fish = None
            for fish_emoji in self.FISH_TYPES.keys():
                if fish_type == fish_emoji or fish_type.lower() in self.FISH_TYPES[fish_emoji]['name'].lower():
                    target_fish = fish_emoji
                    break
            
            if not target_fish:
                await ctx.reply(
                    f"‚ùå Kh√¥ng t√¨m th·∫•y lo·∫°i c√° '{fish_type}'!\n"
                    "üí° D√πng `;sell` ƒë·ªÉ xem danh s√°ch c√° c√≥ th·ªÉ b√°n.",
                    mention_author=True
                )
                return
            
            # Ki·ªÉm tra c√≥ c√° trong kho kh√¥ng
            current_count = user_data['fish_inventory'].get(target_fish, 0)
            if current_count == 0:
                fish_info = self.FISH_TYPES[target_fish]
                await ctx.reply(
                    f"‚ùå B·∫°n kh√¥ng c√≥ {target_fish} **{fish_info['name']}** n√†o ƒë·ªÉ b√°n!",
                    mention_author=True
                )
                return
            
            # X·ª≠ l√Ω s·ªë l∆∞·ª£ng b√°n
            try:
                sell_amount = int(amount) if amount else 1
                if sell_amount <= 0:
                    await ctx.reply("‚ùå S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0!", mention_author=True)
                    return
                if sell_amount > current_count:
                    sell_amount = current_count
            except ValueError:
                await ctx.reply("‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!", mention_author=True)
                return
            
            # Th·ª±c hi·ªán b√°n c√°
            fish_info = self.FISH_TYPES[target_fish]
            total_earned = fish_info['price'] * sell_amount
            
            # C·∫≠p nh·∫≠t inventory
            user_data['fish_inventory'][target_fish] -= sell_amount
            
            # Th√™m ti·ªÅn v√†o v√≠
            if hasattr(self.bot_instance, 'shared_wallet') and self.bot_instance.shared_wallet:
                self.bot_instance.shared_wallet.add_balance(user_id, total_earned)
            
            # C·∫≠p nh·∫≠t th·ªëng k√™
            user_data['total_sold'] += sell_amount
            user_data['total_earned'] += total_earned
            
            self.save_fishing_data()
            
            # Th√¥ng b√°o th√†nh c√¥ng
            embed = discord.Embed(
                title="üí∞ B√°n C√° Th√†nh C√¥ng!",
                description=f"{ctx.author.mention} ƒë√£ b√°n c√°!",
                color=discord.Color.green()
            )
            
            embed.add_field(
                name="üêü C√° ƒë√£ b√°n:",
                value=f"{target_fish} **{fish_info['name']}** x{sell_amount}",
                inline=True
            )
            
            embed.add_field(
                name="üíµ Thu nh·∫≠p:",
                value=f"**+{total_earned:,} xu**",
                inline=True
            )
            
            remaining = user_data['fish_inventory'][target_fish]
            embed.add_field(
                name="üéí C√≤n l·∫°i:",
                value=f"{remaining} con",
                inline=True
            )
            
            embed.add_field(
                name="üìä Th·ªëng k√™ t·ªïng:",
                value=f"ƒê√£ b√°n: {user_data['total_sold']} con\nT·ªïng ki·∫øm: {user_data['total_earned']:,} xu",
                inline=False
            )
            
            await ctx.reply(embed=embed, mention_author=True)
        
        @self.bot.command(name='rodshop', aliases=['shopcan', 'cancau', 'buyrod'])
        async def rod_shop_command(ctx, action=None, rod_type=None):
            """Shop c·∫ßn c√¢u - mua c·∫ßn c√¢u t·ªët h∆°n"""
            user_id = ctx.author.id
            user_data = self.get_user_fishing_data(user_id)
            
            if not action:
                # Hi·ªÉn th·ªã shop c·∫ßn c√¢u
                embed = discord.Embed(
                    title="üè™ Shop C·∫ßn C√¢u",
                    description="Mua c·∫ßn c√¢u t·ªët h∆°n ƒë·ªÉ tƒÉng t·ª∑ l·ªá c√° hi·∫øm!",
                    color=discord.Color.gold()
                )
                
                current_rod = user_data.get('current_rod', 'basic')
                current_rod_info = self.FISHING_RODS[current_rod]
                embed.add_field(
                    name="üé£ C·∫ßn c√¢u hi·ªán t·∫°i:",
                    value=f"{current_rod_info['name']}\n*{current_rod_info['description']}*",
                    inline=False
                )
                
                shop_text = ""
                for rod_id, rod_info in self.FISHING_RODS.items():
                    owned = rod_id in user_data.get('owned_rods', ['basic'])
                    status = "‚úÖ ƒê√£ s·ªü h·ªØu" if owned else f"üí∞ {rod_info['price']:,} xu"
                    
                    shop_text += f"{rod_info['name']}\n"
                    shop_text += f"*{rod_info['description']}*\n"
                    shop_text += f"**{status}**\n\n"
                
                embed.add_field(
                    name="üõí Danh s√°ch c·∫ßn c√¢u:",
                    value=shop_text,
                    inline=False
                )
                
                embed.add_field(
                    name="üìù H∆∞·ªõng d·∫´n:",
                    value="‚Ä¢ `;rodshop buy <lo·∫°i>` - Mua c·∫ßn c√¢u\n‚Ä¢ `;rodshop equip <lo·∫°i>` - Trang b·ªã c·∫ßn c√¢u\n‚Ä¢ `;rodshop list` - Xem c·∫ßn c√¢u ƒë√£ mua",
                    inline=False
                )
                
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            if action.lower() == "buy":
                if not rod_type:
                    await ctx.reply("‚ùå Vui l√≤ng ch·ªçn lo·∫°i c·∫ßn c√¢u! V√≠ d·ª•: `;rodshop buy iron`", mention_author=True)
                    return
                
                rod_type = rod_type.lower()
                if rod_type not in self.FISHING_RODS:
                    await ctx.reply("‚ùå Lo·∫°i c·∫ßn c√¢u kh√¥ng t·ªìn t·∫°i! D√πng `;rodshop` ƒë·ªÉ xem danh s√°ch.", mention_author=True)
                    return
                
                rod_info = self.FISHING_RODS[rod_type]
                
                # Ki·ªÉm tra ƒë√£ s·ªü h·ªØu ch∆∞a
                if rod_type in user_data.get('owned_rods', ['basic']):
                    await ctx.reply(f"‚ùå B·∫°n ƒë√£ s·ªü h·ªØu {rod_info['name']} r·ªìi!", mention_author=True)
                    return
                
                # Ki·ªÉm tra ti·ªÅn
                if hasattr(self.bot_instance, 'shared_wallet') and self.bot_instance.shared_wallet:
                    current_balance = self.bot_instance.shared_wallet.get_balance(user_id)
                    if current_balance < rod_info['price']:
                        await ctx.reply(
                            f"‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n c·∫ßn {rod_info['price']:,} xu nh∆∞ng ch·ªâ c√≥ {current_balance:,} xu.",
                            mention_author=True
                        )
                        return
                    
                    # Tr·ª´ ti·ªÅn v√† th√™m c·∫ßn c√¢u
                    self.bot_instance.shared_wallet.subtract_balance(user_id, rod_info['price'])
                    if 'owned_rods' not in user_data:
                        user_data['owned_rods'] = ['basic']
                    user_data['owned_rods'].append(rod_type)
                    self.save_fishing_data()
                    
                    embed = discord.Embed(
                        title="üéâ Mua C·∫ßn C√¢u Th√†nh C√¥ng!",
                        description=f"B·∫°n ƒë√£ mua {rod_info['name']}!",
                        color=discord.Color.green()
                    )
                    embed.add_field(
                        name="üí∞ Chi ph√≠:",
                        value=f"{rod_info['price']:,} xu",
                        inline=True
                    )
                    embed.add_field(
                        name="üí≥ S·ªë d∆∞ c√≤n l·∫°i:",
                        value=f"{current_balance - rod_info['price']:,} xu",
                        inline=True
                    )
                    embed.add_field(
                        name="üé£ Hi·ªáu qu·∫£:",
                        value=rod_info['description'],
                        inline=False
                    )
                    embed.add_field(
                        name="üí° L∆∞u √Ω:",
                        value=f"D√πng `;rodshop equip {rod_type}` ƒë·ªÉ trang b·ªã c·∫ßn c√¢u m·ªõi!",
                        inline=False
                    )
                    
                    await ctx.reply(embed=embed, mention_author=True)
                else:
                    await ctx.reply("‚ùå H·ªá th·ªëng v√≠ kh√¥ng kh·∫£ d·ª•ng!", mention_author=True)
            
            elif action.lower() == "equip":
                if not rod_type:
                    await ctx.reply("‚ùå Vui l√≤ng ch·ªçn lo·∫°i c·∫ßn c√¢u! V√≠ d·ª•: `;rodshop equip iron`", mention_author=True)
                    return
                
                rod_type = rod_type.lower()
                if rod_type not in self.FISHING_RODS:
                    await ctx.reply("‚ùå Lo·∫°i c·∫ßn c√¢u kh√¥ng t·ªìn t·∫°i!", mention_author=True)
                    return
                
                # Ki·ªÉm tra ƒë√£ s·ªü h·ªØu ch∆∞a
                if rod_type not in user_data.get('owned_rods', ['basic']):
                    rod_info = self.FISHING_RODS[rod_type]
                    await ctx.reply(f"‚ùå B·∫°n ch∆∞a s·ªü h·ªØu {rod_info['name']}! D√πng `;rodshop buy {rod_type}` ƒë·ªÉ mua.", mention_author=True)
                    return
                
                # Trang b·ªã c·∫ßn c√¢u
                user_data['current_rod'] = rod_type
                self.save_fishing_data()
                
                rod_info = self.FISHING_RODS[rod_type]
                embed = discord.Embed(
                    title="üé£ Trang B·ªã C·∫ßn C√¢u Th√†nh C√¥ng!",
                    description=f"B·∫°n ƒë√£ trang b·ªã {rod_info['name']}!",
                    color=discord.Color.blue()
                )
                embed.add_field(
                    name="üéØ Hi·ªáu qu·∫£:",
                    value=rod_info['description'],
                    inline=False
                )
                embed.add_field(
                    name="üí° L∆∞u √Ω:",
                    value="C·∫ßn c√¢u m·ªõi s·∫Ω c√≥ hi·ªáu l·ª±c t·ª´ l·∫ßn c√¢u c√° ti·∫øp theo!",
                    inline=False
                )
                
                await ctx.reply(embed=embed, mention_author=True)
            
            elif action.lower() == "list":
                # Hi·ªÉn th·ªã danh s√°ch c·∫ßn c√¢u ƒë√£ mua
                owned_rods = user_data.get('owned_rods', ['basic'])
                current_rod = user_data.get('current_rod', 'basic')
                
                embed = discord.Embed(
                    title="üéí C·∫ßn C√¢u ƒê√£ S·ªü H·ªØu",
                    description="Danh s√°ch c·∫ßn c√¢u b·∫°n ƒë√£ mua:",
                    color=discord.Color.blue()
                )
                
                for rod_id in owned_rods:
                    rod_info = self.FISHING_RODS[rod_id]
                    status = "üé£ **ƒêang s·ª≠ d·ª•ng**" if rod_id == current_rod else "üì¶ Trong kho"
                    
                    embed.add_field(
                        name=f"{rod_info['name']} {status}",
                        value=rod_info['description'],
                        inline=False
                    )
                
                embed.add_field(
                    name="üí° L∆∞u √Ω:",
                    value="D√πng `;rodshop equip <lo·∫°i>` ƒë·ªÉ ƒë·ªïi c·∫ßn c√¢u!",
                    inline=False
                )
                
                await ctx.reply(embed=embed, mention_author=True)
            
            else:
                await ctx.reply("‚ùå H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá! D√πng `;rodshop` ƒë·ªÉ xem h∆∞·ªõng d·∫´n.", mention_author=True)
        
        @self.bot.command(name='kho', aliases=['inventory', 'fish_inventory', 'khocar'])
        async def inventory_command(ctx, target_user: discord.Member = None):
            """Xem kho c√° c·ªßa b·∫£n th√¢n ho·∫∑c ng∆∞·ªùi kh√°c"""
            target = target_user or ctx.author
            user_data = self.get_user_fishing_data(target.id)
            
            embed = discord.Embed(
                title=f"üéí Kho C√° - {target.display_name}",
                color=discord.Color.blue()
            )
            
            if not user_data['fish_inventory'] or all(count == 0 for count in user_data['fish_inventory'].values()):
                embed.description = "Kho c√° tr·ªëng! D√πng `;cauca` ƒë·ªÉ c√¢u c√°."
            else:
                inventory_text = ""
                total_value = 0
                total_fish = 0
                
                # S·∫Øp x·∫øp theo ƒë·ªô hi·∫øm v√† gi√° tr·ªã
                sorted_fish = sorted(
                    user_data['fish_inventory'].items(),
                    key=lambda x: (
                        {"legendary": 5, "epic": 4, "rare": 3, "common": 2, "trash": 1}[self.FISH_TYPES[x[0]]['rarity']],
                        self.FISH_TYPES[x[0]]['price']
                    ),
                    reverse=True
                )
                
                for fish_emoji, count in sorted_fish:
                    if count > 0:
                        fish_info = self.FISH_TYPES[fish_emoji]
                        value = fish_info['price'] * count
                        total_value += value
                        total_fish += count
                        
                        rarity_icon = {
                            "trash": "‚ö™", 
                            "common": "üü¢", 
                            "rare": "üîµ", 
                            "epic": "üü£",
                            "legendary": "üü°"
                        }[fish_info['rarity']]
                        inventory_text += f"{rarity_icon} {fish_emoji} **{fish_info['name']}**: {count} con ({fish_info['price']:,} xu/con)\n"
                
                embed.add_field(
                    name="üêü Danh s√°ch c√°:",
                    value=inventory_text,
                    inline=False
                )
                
                embed.add_field(
                    name="üìä Th·ªëng k√™:",
                    value=f"T·ªïng c√°: **{total_fish}** con\nGi√° tr·ªã: **{total_value:,}** xu",
                    inline=True
                )
            
            # Th√¥ng tin level v√† th·ªëng k√™
            embed.add_field(
                name="üéØ Th√¥ng tin c√¢u c√°:",
                value=(
                    f"Level: **{user_data['fishing_level']}**\n"
                    f"EXP: **{user_data['fishing_exp']}/100**\n"
                    f"ƒê√£ c√¢u: **{user_data['total_fished']}** con\n"
                    f"ƒê√£ b√°n: **{user_data['total_sold']}** con\n"
                    f"T·ªïng ki·∫øm: **{user_data['total_earned']:,}** xu"
                ),
                inline=True
            )
            
            embed.add_field(
                name="üí° L·ªánh h·ªØu √≠ch:",
                value="`;cauca` - C√¢u c√°\n`;sell` - B√°n c√°\n`;sell all` - B√°n t·∫•t c·∫£",
                inline=False
            )
            
            embed.set_footer(text=f"Cooldown c√¢u c√°: 5 ph√∫t ‚Ä¢ Chi ph√≠: {self.FISHING_COST:,} xu/l·∫ßn")
            
            await ctx.reply(embed=embed, mention_author=True)
        
        @self.bot.command(name='topfish', aliases=['bangxephangca', 'fishleaderboard'])
        async def fishing_leaderboard_command(ctx):
            """B·∫£ng x·∫øp h·∫°ng c√¢u c√°"""
            if not self.fishing_data:
                await ctx.reply("‚ùå Ch∆∞a c√≥ ai c√¢u c√°!", mention_author=True)
                return
            
            # S·∫Øp x·∫øp theo t·ªïng c√° ƒë√£ c√¢u
            sorted_users = sorted(
                self.fishing_data.items(),
                key=lambda x: x[1].get('total_fished', 0),
                reverse=True
            )[:10]  # Top 10
            
            embed = discord.Embed(
                title="üèÜ B·∫£ng X·∫øp H·∫°ng C√¢u C√°",
                description="Top 10 cao th·ªß c√¢u c√°:",
                color=discord.Color.gold()
            )
            
            leaderboard_text = ""
            for i, (user_id_str, data) in enumerate(sorted_users, 1):
                try:
                    user = self.bot.get_user(int(user_id_str))
                    name = user.display_name if user else f"User {user_id_str}"
                    
                    medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                    
                    leaderboard_text += (
                        f"{medal} **{name}**\n"
                        f"   üêü ƒê√£ c√¢u: {data.get('total_fished', 0)} con\n"
                        f"   üéØ Level: {data.get('fishing_level', 1)}\n"
                        f"   üí∞ ƒê√£ ki·∫øm: {data.get('total_earned', 0):,} xu\n\n"
                    )
                except:
                    continue
            
            embed.add_field(
                name="üé£ B·∫£ng x·∫øp h·∫°ng:",
                value=leaderboard_text or "Kh√¥ng c√≥ d·ªØ li·ªáu",
                inline=False
            )
            
            embed.set_footer(text="D√πng ;cauca ƒë·ªÉ tham gia c√¢u c√°!")
            
            await ctx.reply(embed=embed, mention_author=True)
