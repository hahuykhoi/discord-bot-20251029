import discord
from discord.ext import commands
from .base import BaseCommand
import random
import json
import os
from datetime import datetime
import logging
import asyncio
from utils.shared_wallet import shared_wallet

logger = logging.getLogger(__name__)

class RPSCommands(BaseCommand):
    """Class ch·ª©a l·ªánh Rock Paper Scissors (K√©o B√∫a Bao)"""
    
    def __init__(self, bot_instance):
        super().__init__(bot_instance)
        self.data_file = "data/rps_data.json"
        self.rps_data = self.load_rps_data()
        
        # Tracking game ƒëang ch·∫°y
        self.active_games = set()  # Set ch·ª©a user_id c·ªßa nh·ªØng user ƒëang c√≥ game ch·∫°y
        
        # Player data file ri√™ng cho RPS
        self.player_data_file = 'data/rps_players.json'
        self.player_data = self.load_player_data()
    
    def load_rps_data(self):
        """Load d·ªØ li·ªáu RPS t·ª´ file"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"L·ªói khi load RPS data: {e}")
            return {}
    
    def save_rps_data(self):
        """L∆∞u d·ªØ li·ªáu RPS v√†o file"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.rps_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"L·ªói khi save RPS data: {e}")
    
    def load_player_data(self):
        """Load d·ªØ li·ªáu ng∆∞·ªùi ch∆°i t·ª´ file JSON"""
        try:
            if os.path.exists(self.player_data_file):
                with open(self.player_data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"L·ªói khi load player data: {e}")
            return {}
    
    def save_player_data(self):
        """L∆∞u d·ªØ li·ªáu ng∆∞·ªùi ch∆°i v√†o file JSON"""
        try:
            os.makedirs(os.path.dirname(self.player_data_file), exist_ok=True)
            with open(self.player_data_file, 'w', encoding='utf-8') as f:
                json.dump(self.player_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"L·ªói khi save player data: {e}")
    
    def is_user_playing(self, user_id: int) -> bool:
        """Ki·ªÉm tra xem user c√≥ ƒëang ch∆°i game kh√¥ng"""
        return user_id in self.active_games
    
    def start_game_for_user(self, user_id: int) -> bool:
        """B·∫Øt ƒë·∫ßu game cho user (th√™m v√†o active games)"""
        if user_id in self.active_games:
            return False
        self.active_games.add(user_id)
        logger.info(f"Started RPS game for user {user_id}. Active games: {len(self.active_games)}")
        return True
    
    def end_game_for_user(self, user_id: int) -> None:
        """K·∫øt th√∫c game cho user (x√≥a kh·ªèi active games)"""
        if user_id in self.active_games:
            self.active_games.remove(user_id)
            logger.info(f"Ended RPS game for user {user_id}. Active games: {len(self.active_games)}")
    
    def get_user_data(self, user_id):
        """L·∫•y d·ªØ li·ªáu user, t·∫°o m·ªõi n·∫øu ch∆∞a c√≥"""
        user_id = str(user_id)
        if user_id not in self.rps_data:
            self.rps_data[user_id] = {
                'total_games': 0,
                'wins': 0,
                'losses': 0,
                'draws': 0,
                'total_bet': 0,
                'total_won': 0,
                'total_lost': 0,
                'balance': 0,  # Th√™m balance (s·∫Ω sync t·ª´ shared wallet)
                'games_10m_plus': 0,  # S·ªë game v·ªõi c∆∞·ª£c >= 10M
                'created_at': datetime.now().isoformat()
            }
            self.save_rps_data()
        return self.rps_data[user_id]
    
    def update_user_stats(self, user_id, result, bet_amount):
        """C·∫≠p nh·∫≠t th·ªëng k√™ user"""
        user_data = self.get_user_data(user_id)
        user_data['total_games'] += 1
        user_data['total_bet'] += bet_amount
        
        # Tracking game v·ªõi c∆∞·ª£c >= 10M
        if bet_amount >= 10_000_000:
            if 'games_10m_plus' not in user_data:
                user_data['games_10m_plus'] = 0
            user_data['games_10m_plus'] += 1
        
        if result == "win":
            user_data['wins'] += 1
            winnings = bet_amount * 2
            user_data['total_won'] += winnings
            
            # Reset lose streak khi th·∫Øng
            user_data['lose_streak'] = 0
            logger.info(f"User {user_id} won RPS - reset lose streak to 0")
            
            # Weekly leaderboard ƒë√£ b·ªã x√≥a
        elif result == "lose":
            user_data['losses'] += 1
            user_data['total_lost'] += bet_amount
            
            # TƒÉng lose streak khi thua
            current_streak = user_data.get('lose_streak', 0)
            user_data['lose_streak'] = current_streak + 1
            logger.info(f"User {user_id} lost RPS - lose streak: {user_data['lose_streak']}")
        else:  # draw
            user_data['draws'] += 1
            # H√≤a kh√¥ng ·∫£nh h∆∞·ªüng streak
        
        self.save_rps_data()
    
    def get_winner(self, player_choice, bot_choice):
        """X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng"""
        if player_choice == bot_choice:
            return "draw"
        
        win_conditions = {
            "k√©o": "bao",    # K√©o th·∫Øng bao
            "b√∫a": "k√©o",    # B√∫a th·∫Øng k√©o
            "bao": "b√∫a"     # Bao th·∫Øng b√∫a
        }
        
        if win_conditions[player_choice] == bot_choice:
            return "win"
        else:
            return "lose"
    
    def get_emoji(self, choice):
        """L·∫•y emoji cho l·ª±a ch·ªçn"""
        emojis = {
            "k√©o": "‚úÇÔ∏è",
            "b√∫a": "üî®", 
            "bao": "üìÑ"
        }
        return emojis.get(choice, "‚ùì")
    
    def register_commands(self):
        """Register RPS commands"""
        
        @self.bot.command(name='rps', aliases=['kbb', 'keobubao'])
        async def rock_paper_scissors(ctx, choice=None, amount=None):
            """
            Rock Paper Scissors game v·ªõi buttons
            Usage: ;rps <s·ªë ti·ªÅn>
            """
            try:
                # Ki·ªÉm tra xem user c√≥ ƒëang ch∆°i game kh√¥ng
                if self.is_user_playing(ctx.author.id):
                    embed = discord.Embed(
                        title="‚è≥ Game ƒëang ch·∫°y",
                        description="B·∫°n ƒëang c√≥ m·ªôt v√°n RPS ch∆∞a ho√†n th√†nh!\nVui l√≤ng ch·ªù v√°n hi·ªán t·∫°i k·∫øt th√∫c tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu v√°n m·ªõi.",
                        color=discord.Color.orange()
                    )
                    embed.add_field(
                        name="üí° L∆∞u √Ω",
                        value="M·ªói ng∆∞·ªùi ch∆°i ch·ªâ c√≥ th·ªÉ ch∆°i m·ªôt v√°n t·∫°i m·ªôt th·ªùi ƒëi·ªÉm ƒë·ªÉ tr√°nh xung ƒë·ªôt.",
                        inline=False
                    )
                    embed.set_footer(text="Vui l√≤ng ch·ªù v√°n hi·ªán t·∫°i ho√†n th√†nh")
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # N·∫øu kh√¥ng c√≥ argument, hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
                if not choice:
                    embed = discord.Embed(
                        title="‚úÇÔ∏è K√©o B√∫a Bao - H∆∞·ªõng d·∫´n",
                        description="Tr√≤ ch∆°i k√©o b√∫a bao c·ªï ƒëi·ªÉn!",
                        color=discord.Color.orange(),
                        timestamp=datetime.now()
                    )
                    embed.add_field(
                        name="üìã C√°ch ch∆°i",
                        value=(
                            "`;rps <s·ªë ti·ªÅn>` - B·∫Øt ƒë·∫ßu v√°n m·ªõi\n"
                            "Sau ƒë√≥ ch·ªçn k√©o/b√∫a/bao b·∫±ng buttons"
                        ),
                        inline=False
                    )
                    embed.add_field(
                        name="üéØ Lu·∫≠t ch∆°i",
                        value=(
                            "‚úÇÔ∏è **K√©o** th·∫Øng üìÑ **Bao**\n"
                            "üî® **B√∫a** th·∫Øng ‚úÇÔ∏è **K√©o**\n"
                            "üìÑ **Bao** th·∫Øng üî® **B√∫a**"
                        ),
                        inline=False
                    )
                    embed.add_field(
                        name="üí∞ Ph·∫ßn th∆∞·ªüng",
                        value="**Th·∫Øng:** x2 ti·ªÅn c∆∞·ª£c\n**H√≤a:** Ho√†n l·∫°i ti·ªÅn c∆∞·ª£c",
                        inline=False
                    )
                    embed.set_footer(text="Ch∆°i v·ªõi ;rps <s·ªë ti·ªÅn>")
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # Parse bet amount t·ª´ argument ƒë·∫ßu ti√™n
                try:
                    bet_amount_int = int(choice)
                except ValueError:
                    await ctx.reply(
                        f"{ctx.author.mention} ‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng: `;rps <s·ªë ti·ªÅn>`",
                        mention_author=True
                    )
                    return
                
                # Parse bet amount using shared wallet
                bet_amount, is_adjusted, parse_message = shared_wallet.parse_bet_amount(ctx.author.id, choice)
                
                # Ki·ªÉm tra l·ªói parse
                if bet_amount <= 0:
                    await ctx.reply(
                        f"{ctx.author.mention} {parse_message if parse_message else '‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!'}",
                        mention_author=True
                    )
                    return
                
                # Ki·ªÉm tra gi·ªõi h·∫°n max bet 250k
                if bet_amount > 250000:
                    await ctx.reply(
                        f"{ctx.author.mention} ‚ùå S·ªë ti·ªÅn c∆∞·ª£c t·ªëi ƒëa l√† 250,000 xu!",
                        mention_author=True
                    )
                    return
                
                # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu ƒë√£ ƒëi·ªÅu ch·ªânh
                if is_adjusted and parse_message:
                    await ctx.send(f"{ctx.author.mention} {parse_message}")
                
                # T·∫°o embed h·ªèi l·ª±a ch·ªçn
                embed = discord.Embed(
                    title="‚úÇÔ∏è K√©o B√∫a Bao",
                    description=f"**Ti·ªÅn c∆∞·ª£c:** {bet_amount:,} xu\n\nCh·ªçn l·ª±a ch·ªçn c·ªßa b·∫°n:",
                    color=discord.Color.orange(),
                    timestamp=datetime.now()
                )
                embed.set_author(
                    name=f"{ctx.author.display_name}",
                    icon_url=ctx.author.avatar.url if ctx.author.avatar else None
                )
                embed.set_footer(text="Nh·∫•n button ƒë·ªÉ ch·ªçn!")
                
                # T·∫°o view v·ªõi buttons
                view = RPSButtonView(self, ctx.author.id, bet_amount)
                await ctx.reply(embed=embed, view=view, mention_author=True)
                
            except Exception as e:
                logger.error(f"L·ªói trong RPS command: {e}")
                await ctx.reply(
                    f"{ctx.author.mention} ‚ùå C√≥ l·ªói x·∫£y ra khi ch∆°i k√©o b√∫a bao!",
                    mention_author=True
                )
        
        @self.bot.command(name='rpsstats', aliases=['kbbstats'])
        async def rps_stats(ctx, user: discord.Member = None):
            """Xem th·ªëng k√™ RPS"""
            try:
                target_user = user or ctx.author
                user_data = self.get_user_data(target_user.id)
                
                total_games = user_data['total_games']
                if total_games == 0:
                    await ctx.reply(
                        f"{ctx.author.mention} ‚ÑπÔ∏è {target_user.display_name} ch∆∞a ch∆°i k√©o b√∫a bao l·∫ßn n√†o!",
                        mention_author=True
                    )
                    return
                
                # X√≥a hi·ªÉn th·ªã t·ª∑ l·ªá th·∫Øng
                
                embed = discord.Embed(
                    title="‚úÇÔ∏è Th·ªëng K√™ K√©o B√∫a Bao",
                    color=discord.Color.orange(),
                    timestamp=datetime.now()
                )
                
                # L·∫•y s·ªë ti·ªÅn TH·ª∞C T·∫æ t·ª´ shared wallet
                actual_balance = shared_wallet.get_balance(target_user.id)
                embed.add_field(
                    name="üí∞ T√†i ch√≠nh",
                    value=(
                        f"**S·ªë d∆∞:** {actual_balance:,} xu\n"
                        f"**T·ªïng th·∫Øng:** {user_data.get('total_won', 0):,} xu\n"
                        f"**T·ªïng thua:** {user_data.get('total_lost', 0):,} xu"
                    ),
                    inline=True
                )
                
                embed.add_field(
                    name="üéØ Th√†nh t√≠ch",
                    value=(
                        f"**T·ªïng v√°n:** {total_games:,}\n"
                        f"**Th·∫Øng:** {user_data['wins']:,}\n"
                        f"**Thua:** {user_data['losses']:,}\n"
                        f"**H√≤a:** {user_data['draws']:,}"
                    ),
                    inline=True
                )
                
                embed.set_author(
                    name=target_user.display_name,
                    icon_url=target_user.avatar.url if target_user.avatar else None
                )
                embed.set_footer(text="Ch∆°i v·ªõi ;rps <k√©o/b√∫a/bao> <s·ªë ti·ªÅn>")
                
                await ctx.reply(embed=embed, mention_author=True)
                
            except Exception as e:
                logger.error(f"L·ªói trong RPS stats command: {e}")
                await ctx.reply(
                    f"{ctx.author.mention} ‚ùå C√≥ l·ªói x·∫£y ra khi xem th·ªëng k√™!",
                    mention_author=True
                )
        
        @self.bot.command(name='rpsleaderboard', aliases=['kbbleaderboard'])
        async def rps_leaderboard(ctx):
            """B·∫£ng x·∫øp h·∫°ng RPS"""
            try:
                if not self.rps_data:
                    await ctx.reply(
                        f"{ctx.author.mention} ‚ÑπÔ∏è Ch∆∞a c√≥ d·ªØ li·ªáu ng∆∞·ªùi ch∆°i!",
                        mention_author=True
                    )
                    return
                
                # Sort by balance
                sorted_users = sorted(
                    self.rps_data.items(),
                    key=lambda x: x[1]['balance'],
                    reverse=True
                )[:10]
                
                embed = discord.Embed(
                    title="üèÜ B·∫£ng X·∫øp H·∫°ng K√©o B√∫a Bao",
                    description="Top 10 ng∆∞·ªùi ch∆°i gi√†u nh·∫•t",
                    color=discord.Color.gold(),
                    timestamp=datetime.now()
                )
                
                medals = ["ü•á", "ü•à", "ü•â"] + ["üèÖ"] * 7
                
                leaderboard_text = ""
                for i, (user_id, data) in enumerate(sorted_users):
                    try:
                        user = self.bot.get_user(int(user_id))
                        username = user.display_name if user else f"User {user_id}"
                        
                        win_rate = 0
                        if data['total_games'] > 0:
                            win_rate = (data['wins'] / data['total_games']) * 100
                        
                        # L·∫•y s·ªë ti·ªÅn TH·ª∞C T·∫æ t·ª´ shared wallet
                        actual_balance = shared_wallet.get_balance(int(user_id))
                        leaderboard_text += (
                            f"{medals[i]} **{username}**\n"
                            f"üí∞ {actual_balance:,} xu | "
                            f"üéØ {data['total_games']} v√°n | "
                            f"üìä {win_rate:.1f}%\n\n"
                        )
                    except:
                        continue
                
                embed.description = leaderboard_text or "Kh√¥ng c√≥ d·ªØ li·ªáu"
                embed.set_footer(text="Ch∆°i ;rps ƒë·ªÉ tham gia b·∫£ng x·∫øp h·∫°ng!")
                
                await ctx.reply(embed=embed, mention_author=True)
                
            except Exception as e:
                logger.error(f"L·ªói trong RPS leaderboard command: {e}")
                await ctx.reply(
                    f"{ctx.author.mention} ‚ùå C√≥ l·ªói x·∫£y ra khi xem b·∫£ng x·∫øp h·∫°ng!",
                    mention_author=True
                )

class RPSButtonView(discord.ui.View):
    """View ch·ª©a buttons cho RPS game"""
    
    def __init__(self, rps_commands_instance, user_id, bet_amount):
        super().__init__(timeout=60)
        self.rps_commands = rps_commands_instance
        self.user_id = user_id
        self.bet_amount = bet_amount
    
    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        """Ch·ªâ cho ph√©p ng∆∞·ªùi ƒë·∫∑t c∆∞·ª£c t∆∞∆°ng t√°c"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message(
                "‚ùå ƒê√¢y kh√¥ng ph·∫£i l∆∞·ª£t ch∆°i c·ªßa b·∫°n!",
                ephemeral=True
            )
            return False
        return True
    
    async def play_game(self, interaction: discord.Interaction, player_choice: str):
        """X·ª≠ l√Ω logic ch∆°i game"""
        try:
            # B·∫Øt ƒë·∫ßu game cho user (th√™m v√†o active games)
            if not self.rps_commands.start_game_for_user(self.user_id):
                await interaction.response.send_message(
                    "‚ùå B·∫°n ƒëang c√≥ game kh√°c ch∆∞a ho√†n th√†nh!",
                    ephemeral=True
                )
                return
            
            # Disable t·∫•t c·∫£ buttons
            for item in self.children:
                item.disabled = True
            
            try:
                # Th√™m delay 1 gi√¢y tr∆∞·ªõc khi x·ª≠ l√Ω
                await asyncio.sleep(1)
                
                # Ki·ªÉm tra unluck system tr∆∞·ªõc ti√™n
                is_unlucky = False
                if hasattr(self.rps_commands.bot_instance, 'unluck_commands'):
                    is_unlucky = self.rps_commands.bot_instance.unluck_commands.is_user_unlucky(self.user_id)
                    if is_unlucky:
                        # TƒÉng s·ªë game b·ªã ·∫£nh h∆∞·ªüng
                        self.rps_commands.bot_instance.unluck_commands.increment_game_affected(self.user_id)
                        logger.info(f"User {self.user_id} is unlucky - forcing RPS loss")
                
                # L·∫•y s·ªë d∆∞ hi·ªán t·∫°i ƒë·ªÉ x√°c ƒë·ªãnh t·ªâ l·ªá th·∫Øng
                current_balance = shared_wallet.get_balance(self.user_id)
                
                # Bot makes choice
                if is_unlucky:
                    # Unlucky user lu√¥n thua - ch·ªçn bot_choice ƒë·ªÉ th·∫Øng player
                    if player_choice == "k√©o":
                        bot_choice = "b√∫a"  # B√∫a th·∫Øng k√©o
                    elif player_choice == "b√∫a":
                        bot_choice = "bao"  # Bao th·∫Øng b√∫a
                    else:  # bao
                        bot_choice = "k√©o"  # K√©o th·∫Øng bao
                    logger.info(f"Unlucky user {self.user_id} - bot chose {bot_choice} to beat {player_choice}")
                else:
                    # Dynamic win rate: Base 40%, +20% m·ªói l·∫ßn thua li√™n ti·∫øp
                    user_data = self.rps_commands.get_user_data(self.user_id)
                    base_rate = 0.4  # 40% base
                    lose_streak = user_data.get('lose_streak', 0)
                    win_rate = min(base_rate + (lose_streak * 0.2), 0.9)  # Max 90%
                    logger.info(f"User {self.user_id} - Dynamic rate {win_rate*100:.0f}% (streak: {lose_streak})")
                    
                    should_win = random.random() < win_rate
                    if should_win:
                        # Ch·ªçn bot_choice ƒë·ªÉ ng∆∞·ªùi ch∆°i th·∫Øng
                        if player_choice == "k√©o":
                            bot_choice = "bao"  # K√©o th·∫Øng bao
                        elif player_choice == "b√∫a":
                            bot_choice = "k√©o"  # B√∫a th·∫Øng k√©o  
                        else:  # bao
                            bot_choice = "b√∫a"  # Bao th·∫Øng b√∫a
                    else:
                        # Ch·ªçn bot_choice ƒë·ªÉ ng∆∞·ªùi ch∆°i thua
                        if player_choice == "k√©o":
                            bot_choice = "b√∫a"  # B√∫a th·∫Øng k√©o
                        elif player_choice == "b√∫a":
                            bot_choice = "bao"  # Bao th·∫Øng b√∫a
                        else:  # bao
                            bot_choice = "k√©o"  # K√©o th·∫Øng bao
                
                result = self.rps_commands.get_winner(player_choice, bot_choice)
                
                # Create result embed
                if result == "win":
                    color = discord.Color.green()
                    result_text = "üéâ **B·∫†N TH·∫ÆNG!**"
                    money_change = f"+{self.bet_amount:,}"
                elif result == "lose":
                    color = discord.Color.red()
                    result_text = "üò¢ **B·∫†N THUA!**"
                    money_change = f"-{self.bet_amount:,}"
                else:
                    color = discord.Color.yellow()
                    result_text = "ü§ù **H√íA!**"
                    money_change = "¬±0"
                
                # Tr·ª´ ti·ªÅn c∆∞·ª£c tr∆∞·ªõc
                shared_wallet.subtract_balance(self.user_id, self.bet_amount)
                
                # Update shared wallet d·ª±a tr√™n k·∫øt qu·∫£
                if result == "win":
                    # Th·∫Øng: Ho√†n l·∫°i ti·ªÅn c∆∞·ª£c + ti·ªÅn th·∫Øng (t·ªïng = c∆∞·ª£c x2)
                    new_balance = shared_wallet.add_balance(self.user_id, self.bet_amount * 2)
                elif result == "lose":
                    # Thua: ƒê√£ tr·ª´ ti·ªÅn r·ªìi, ch·ªâ l·∫•y s·ªë d∆∞ m·ªõi
                    new_balance = shared_wallet.get_balance(self.user_id)
                else:  # draw
                    # H√≤a: Ho√†n l·∫°i ti·ªÅn c∆∞·ª£c
                    new_balance = shared_wallet.add_balance(self.user_id, self.bet_amount)
                
                self.rps_commands.update_user_stats(self.user_id, result, self.bet_amount)
                
                embed = discord.Embed(
                    title="‚úÇÔ∏è K√©o B√∫a Bao",
                    description=result_text,
                    color=color,
                    timestamp=datetime.now()
                )
                
                embed.add_field(
                    name="üéØ L·ª±a ch·ªçn",
                    value=(
                        f"**B·∫°n**: {self.rps_commands.get_emoji(player_choice)} {player_choice.title()}\n"
                        f"**Bot**: {self.rps_commands.get_emoji(bot_choice)} {bot_choice.title()}"
                    ),
                    inline=True
                )
                
                embed.add_field(
                    name="üí∞ Ti·ªÅn c∆∞·ª£c",
                    value=f"**{self.bet_amount:,} xu**",
                    inline=True
                )
                
                embed.add_field(
                    name="üí≥ Thay ƒë·ªïi",
                    value=f"**{money_change} xu**",
                    inline=True
                )
                
                embed.add_field(
                    name="üíµ S·ªë d∆∞ m·ªõi",
                    value=f"**{new_balance:,} xu**",
                    inline=False
                )
                
                embed.set_author(
                    name=f"{interaction.user.display_name}",
                    icon_url=interaction.user.avatar.url if interaction.user.avatar else None
                )
                embed.set_footer(text="Ch∆°i ti·∫øp v·ªõi ;rps <s·ªë ti·ªÅn>")
                
                await interaction.response.edit_message(embed=embed, view=self)
                
            finally:
                # Lu√¥n k·∫øt th√∫c game cho user (x√≥a kh·ªèi active games)
                self.rps_commands.end_game_for_user(self.user_id)
                
        except Exception as e:
            # ƒê·∫£m b·∫£o user ƒë∆∞·ª£c x√≥a kh·ªèi active games n·∫øu c√≥ l·ªói
            self.rps_commands.end_game_for_user(self.user_id)
            logger.error(f"L·ªói trong RPS button: {e}")
            await interaction.response.send_message(
                "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω k√©o b√∫a bao!",
                ephemeral=True
            )
    
    @discord.ui.button(label='K√©o', emoji='‚úÇÔ∏è', style=discord.ButtonStyle.primary)
    async def scissors_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.play_game(interaction, "k√©o")
    
    @discord.ui.button(label='B√∫a', emoji='üî®', style=discord.ButtonStyle.primary)
    async def rock_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.play_game(interaction, "b√∫a")
    
    @discord.ui.button(label='Bao', emoji='üìÑ', style=discord.ButtonStyle.primary)
    async def paper_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.play_game(interaction, "bao")
