import discord
from discord.ext import commands
import json
import os
import asyncio
from datetime import datetime
import logging
import re
import unicodedata

logger = logging.getLogger(__name__)

class AdminNicknameProtection:
    def __init__(self, bot_instance):
        self.bot_instance = bot_instance
        self.bot = bot_instance.bot
        self.protection_file = 'data/admin_nickname_protection.json'
        self.protected_nicknames = {}
        self.user_history = {}  # L∆∞u l·ªãch s·ª≠ nickname c·ªßa user
        self.load_protection_data()
        self.setup_commands()
    
    def load_protection_data(self):
        """Load protection data from file"""
        try:
            if os.path.exists(self.protection_file):
                with open(self.protection_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.protected_nicknames = data.get('protected_nicknames', {})
                    self.user_history = data.get('user_history', {})
                logger.info(f"Loaded {len(self.protected_nicknames)} protected nicknames")
            else:
                logger.info("No admin nickname protection file found, creating new")
                self.protected_nicknames = {}
                self.user_history = {}
                self.save_protection_data()
        except Exception as e:
            logger.error(f"Error loading admin nickname protection data: {e}")
            self.protected_nicknames = {}
            self.user_history = {}
    
    def save_protection_data(self):
        """Save protection data to file"""
        try:
            os.makedirs('data', exist_ok=True)
            data = {
                'protected_nicknames': self.protected_nicknames,
                'user_history': self.user_history,
                'last_updated': datetime.now().isoformat()
            }
            with open(self.protection_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=4, ensure_ascii=False)
            logger.info("Admin nickname protection data saved successfully")
        except Exception as e:
            logger.error(f"Error saving admin nickname protection data: {e}")
    
    def setup_commands(self):
        """Setup admin nickname protection commands"""
        
        @self.bot.command(name='protectnick')
        async def protectnick_command(ctx, action=None, *, nickname=None):
            """
            B·∫£o v·ªá nickname admin - t·ª± ƒë·ªông ƒë·ªïi v·ªÅ t√™n c≈© khi user copy
            
            Usage:
            ;protectnick add <nickname> - Th√™m nickname c·∫ßn b·∫£o v·ªá
            ;protectnick remove <nickname> - G·ª° b·ªè b·∫£o v·ªá
            ;protectnick list - Xem danh s√°ch nickname ƒë∆∞·ª£c b·∫£o v·ªá
            ;protectnick - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
            """
            # Ki·ªÉm tra quy·ªÅn admin
            if not self.bot_instance.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh protectnick!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Hi·ªÉn th·ªã help n·∫øu kh√¥ng c√≥ tham s·ªë
            if not action:
                await self.show_help(ctx)
                return
            
            # X·ª≠ l√Ω c√°c action
            if action.lower() == 'add':
                await self.add_protection(ctx, nickname)
            elif action.lower() == 'remove':
                await self.remove_protection(ctx, nickname)
            elif action.lower() == 'list':
                await self.show_protected_list(ctx)
            else:
                await self.show_help(ctx)
    
    async def add_protection(self, ctx, nickname):
        """Add nickname to protection list"""
        if not nickname:
            embed = discord.Embed(
                title="‚ùå Thi·∫øu nickname",
                description="Vui l√≤ng nh·∫≠p nickname c·∫ßn b·∫£o v·ªá!",
                color=discord.Color.red()
            )
            embed.add_field(
                name="üí° C√°ch s·ª≠ d·ª•ng",
                value="`;protectnick add <nickname>`",
                inline=False
            )
            embed.add_field(
                name="üìù V√≠ d·ª•",
                value="`;protectnick add Claude`",
                inline=False
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        # Ki·ªÉm tra ƒë·ªô d√†i nickname
        if len(nickname) > 32:
            embed = discord.Embed(
                title="‚ùå Nickname qu√° d√†i",
                description="Nickname kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 32 k√Ω t·ª±!",
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        # Chu·∫©n h√≥a nickname (case-insensitive)
        nickname_lower = nickname.lower()
        
        # Ki·ªÉm tra ƒë√£ t·ªìn t·∫°i ch∆∞a
        if nickname_lower in self.protected_nicknames:
            embed = discord.Embed(
                title="‚ö†Ô∏è Nickname ƒë√£ ƒë∆∞·ª£c b·∫£o v·ªá",
                description=f"Nickname **{nickname}** ƒë√£ c√≥ trong danh s√°ch b·∫£o v·ªá!",
                color=discord.Color.orange()
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        # Th√™m v√†o danh s√°ch b·∫£o v·ªá
        self.protected_nicknames[nickname_lower] = {
            'original_nickname': nickname,
            'protected_by': ctx.author.id,
            'protected_at': datetime.now().isoformat(),
            'guild_id': ctx.guild.id,
            'violations': 0
        }
        
        self.save_protection_data()
        
        # Th√¥ng b√°o th√†nh c√¥ng
        embed = discord.Embed(
            title="‚úÖ ƒê√£ th√™m b·∫£o v·ªá nickname",
            description=f"Nickname **{nickname}** gi·ªù ƒë∆∞·ª£c b·∫£o v·ªá kh·ªèi vi·ªác copy!",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üõ°Ô∏è Nickname ƒë∆∞·ª£c b·∫£o v·ªá",
            value=f"**{nickname}**",
            inline=True
        )
        
        embed.add_field(
            name="üëÆ ƒê∆∞·ª£c b·∫£o v·ªá b·ªüi",
            value=ctx.author.mention,
            inline=True
        )
        
        embed.add_field(
            name="‚ö° T·ª± ƒë·ªông ph√°t hi·ªán",
            value="Khi user ƒë·ªïi t√™n gi·ªëng nickname n√†y, s·∫Ω t·ª± ƒë·ªông ƒë·ªïi v·ªÅ t√™n c≈©",
            inline=False
        )
        
        embed.set_footer(text="S·ª≠ d·ª•ng ;protectnick remove ƒë·ªÉ g·ª° b·ªè b·∫£o v·ªá")
        
        await ctx.reply(embed=embed, mention_author=True)
        logger.info(f"Admin {ctx.author} added nickname protection for: {nickname}")
    
    async def remove_protection(self, ctx, nickname):
        """Remove nickname from protection list"""
        if not nickname:
            embed = discord.Embed(
                title="‚ùå Thi·∫øu nickname",
                description="Vui l√≤ng nh·∫≠p nickname c·∫ßn g·ª° b·ªè b·∫£o v·ªá!",
                color=discord.Color.red()
            )
            embed.add_field(
                name="üí° C√°ch s·ª≠ d·ª•ng",
                value="`;protectnick remove <nickname>`",
                inline=False
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        nickname_lower = nickname.lower()
        
        if nickname_lower not in self.protected_nicknames:
            embed = discord.Embed(
                title="‚ö†Ô∏è Nickname kh√¥ng ƒë∆∞·ª£c b·∫£o v·ªá",
                description=f"Nickname **{nickname}** kh√¥ng c√≥ trong danh s√°ch b·∫£o v·ªá!",
                color=discord.Color.orange()
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        # L·∫•y th√¥ng tin tr∆∞·ªõc khi x√≥a
        protection_data = self.protected_nicknames[nickname_lower]
        original_nickname = protection_data.get('original_nickname', nickname)
        violations = protection_data.get('violations', 0)
        
        # X√≥a kh·ªèi danh s√°ch
        del self.protected_nicknames[nickname_lower]
        self.save_protection_data()
        
        # Th√¥ng b√°o th√†nh c√¥ng
        embed = discord.Embed(
            title="‚úÖ ƒê√£ g·ª° b·ªè b·∫£o v·ªá nickname",
            description=f"Nickname **{original_nickname}** kh√¥ng c√≤n ƒë∆∞·ª£c b·∫£o v·ªá",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üõ°Ô∏è Nickname",
            value=f"**{original_nickname}**",
            inline=True
        )
        
        embed.add_field(
            name="üìä Vi ph·∫°m ƒë√£ ch·∫∑n",
            value=f"{violations} l·∫ßn",
            inline=True
        )
        
        embed.add_field(
            name="üîì Tr·∫°ng th√°i",
            value="User c√≥ th·ªÉ s·ª≠ d·ª•ng nickname n√†y",
            inline=False
        )
        
        await ctx.reply(embed=embed, mention_author=True)
        logger.info(f"Admin {ctx.author} removed nickname protection for: {original_nickname}")
    
    async def show_protected_list(self, ctx):
        """Show list of protected nicknames"""
        if not self.protected_nicknames:
            embed = discord.Embed(
                title="üìù Danh s√°ch b·∫£o v·ªá nickname tr·ªëng",
                description="Hi·ªán kh√¥ng c√≥ nickname n√†o ƒë∆∞·ª£c b·∫£o v·ªá",
                color=discord.Color.blue()
            )
            embed.add_field(
                name="üí° C√°ch s·ª≠ d·ª•ng",
                value="`;protectnick add <nickname>` ƒë·ªÉ th√™m nickname v√†o b·∫£o v·ªá",
                inline=False
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        embed = discord.Embed(
            title="üõ°Ô∏è Danh s√°ch b·∫£o v·ªá nickname",
            description=f"T·ªïng c·ªông: {len(self.protected_nicknames)} nickname",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        # Hi·ªÉn th·ªã t·ªëi ƒëa 10 nickname
        count = 0
        for nickname_lower, data in list(self.protected_nicknames.items())[:10]:
            count += 1
            original_nickname = data.get('original_nickname', nickname_lower)
            protected_by = data.get('protected_by', 'Unknown')
            violations = data.get('violations', 0)
            protected_at = data.get('protected_at', 'Unknown')
            
            # Parse th·ªùi gian
            try:
                dt = datetime.fromisoformat(protected_at)
                time_str = dt.strftime("%d/%m/%Y %H:%M")
            except:
                time_str = "Unknown"
            
            embed.add_field(
                name=f"#{count} - {original_nickname}",
                value=(
                    f"**B·ªüi:** <@{protected_by}>\n"
                    f"**Vi ph·∫°m ch·∫∑n:** {violations} l·∫ßn\n"
                    f"**Th·ªùi gian:** {time_str}"
                ),
                inline=False
            )
        
        if len(self.protected_nicknames) > 10:
            embed.add_field(
                name="üìä Th·ªëng k√™",
                value=f"Hi·ªÉn th·ªã 10/{len(self.protected_nicknames)} nickname ƒë·∫ßu ti√™n",
                inline=False
            )
        
        embed.set_footer(text="S·ª≠ d·ª•ng ;protectnick remove ƒë·ªÉ g·ª° b·ªè b·∫£o v·ªá")
        await ctx.reply(embed=embed, mention_author=True)
    
    async def show_help(self, ctx):
        """Show help menu"""
        embed = discord.Embed(
            title="üõ°Ô∏è Admin Nickname Protection",
            description="B·∫£o v·ªá nickname admin - t·ª± ƒë·ªông ƒë·ªïi v·ªÅ t√™n c≈© khi user s·ª≠ d·ª•ng t√™n ch·ª©a t·ª´ ƒë∆∞·ª£c b·∫£o v·ªá",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="üìã L·ªánh qu·∫£n l√Ω",
            value=(
                "`;protectnick add <nickname>` - Th√™m nickname c·∫ßn b·∫£o v·ªá\n"
                "`;protectnick remove <nickname>` - G·ª° b·ªè b·∫£o v·ªá\n"
                "`;protectnick list` - Xem danh s√°ch nickname ƒë∆∞·ª£c b·∫£o v·ªá"
            ),
            inline=False
        )
        
        embed.add_field(
            name="‚ö° T√≠nh nƒÉng t·ª± ƒë·ªông",
            value=(
                "‚Ä¢ Ph√°t hi·ªán khi user ƒë·ªïi t√™n **ch·ª©a** t·ª´ ƒë∆∞·ª£c b·∫£o v·ªá\n"
                "‚Ä¢ **AI Detection**: Ph√°t hi·ªán bi·∫øn th·ªÉ k√Ω t·ª± ƒë·∫∑c bi·ªát c·ªßa 'Claude'\n"
                "‚Ä¢ T·ª± ƒë·ªông ƒë·ªïi v·ªÅ nickname tr∆∞·ªõc ƒë√≥\n"
                "‚Ä¢ Th√¥ng b√°o cho user v·ªÅ vi ph·∫°m\n"
                "‚Ä¢ Tracking s·ªë l·∫ßn vi ph·∫°m"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîí B·∫£o m·∫≠t",
            value=(
                "‚Ä¢ Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn qu·∫£n l√Ω\n"
                "‚Ä¢ So s√°nh case-insensitive v√† substring\n"
                "‚Ä¢ **AI-Powered**: Ph√°t hi·ªán k√Ω t·ª± Unicode gi·∫£ m·∫°o\n"
                "‚Ä¢ Chu·∫©n h√≥a text ƒë·ªÉ ch·ªëng k√Ω t·ª± ƒë·∫∑c bi·ªát\n"
                "‚Ä¢ L∆∞u l·ªãch s·ª≠ nickname c·ªßa user"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üìù V√≠ d·ª• s·ª≠ d·ª•ng",
            value=(
                "`;protectnick add Claude` - B·∫£o v·ªá t·ª´ \"Claude\"\n"
                "User ƒë·ªïi t√™n: \"Claude Sonnet 4.5 Pro\" ‚Üí AI ph√°t hi·ªán v√† ch·∫∑n\n"
                "User ƒë·ªïi t√™n: \"ùêÇùê•ùêöùêÆùêùùêû\" ‚Üí AI ph√°t hi·ªán v√† ch·∫∑n\n"
                "User ƒë·ªïi t√™n: \"C|@ud3\" ‚Üí AI ph√°t hi·ªán v√† ch·∫∑n\n"
                "`;protectnick list` - Xem danh s√°ch"
            ),
            inline=False
        )
        
        embed.add_field(
            name="‚ö†Ô∏è L∆∞u √Ω",
            value=(
                "‚Ä¢ Bot c·∫ßn quy·ªÅn 'Manage Nicknames'\n"
                "‚Ä¢ Role bot ph·∫£i cao h∆°n role c·ªßa user\n"
                "‚Ä¢ Ho·∫°t ƒë·ªông real-time 24/7"
            ),
            inline=False
        )
        
        await ctx.reply(embed=embed, mention_author=True)
    
    def update_user_history(self, user_id, old_nickname, new_nickname):
        """Update user nickname history"""
        user_id_str = str(user_id)
        
        if user_id_str not in self.user_history:
            self.user_history[user_id_str] = {
                'history': [],
                'last_updated': datetime.now().isoformat()
            }
        
        # Th√™m v√†o l·ªãch s·ª≠ (gi·ªØ t·ªëi ƒëa 10 entries)
        history_entry = {
            'old_nickname': old_nickname,
            'new_nickname': new_nickname,
            'timestamp': datetime.now().isoformat()
        }
        
        self.user_history[user_id_str]['history'].append(history_entry)
        self.user_history[user_id_str]['last_updated'] = datetime.now().isoformat()
        
        # Gi·ªØ t·ªëi ƒëa 10 entries
        if len(self.user_history[user_id_str]['history']) > 10:
            self.user_history[user_id_str]['history'] = self.user_history[user_id_str]['history'][-10:]
        
        self.save_protection_data()
    
    def get_previous_nickname(self, user_id):
        """Get previous nickname of user"""
        user_id_str = str(user_id)
        
        if user_id_str not in self.user_history:
            return None
        
        history = self.user_history[user_id_str]['history']
        if not history:
            return None
        
        # L·∫•y nickname tr∆∞·ªõc ƒë√≥ (old_nickname c·ªßa entry cu·ªëi c√πng)
        return history[-1]['old_nickname']
    
    def normalize_text(self, text):
        """Chu·∫©n h√≥a text ƒë·ªÉ ph√°t hi·ªán k√Ω t·ª± ƒë·∫∑c bi·ªát gi·∫£ m·∫°o"""
        if not text:
            return ""
        
        # Lo·∫°i b·ªè d·∫•u v√† chuy·ªÉn v·ªÅ ASCII
        normalized = unicodedata.normalize('NFD', text)
        ascii_text = ''.join(c for c in normalized if unicodedata.category(c) != 'Mn')
        
        # Thay th·∫ø c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát th∆∞·ªùng d√πng ƒë·ªÉ gi·∫£ m·∫°o
        replacements = {
            # K√Ω t·ª± gi·ªëng C
            '√á': 'C', '√ß': 'c', 'ƒÜ': 'C', 'ƒá': 'c', 'ƒå': 'C', 'ƒç': 'c',
            'ƒà': 'C', 'ƒâ': 'c', 'ƒä': 'C', 'ƒã': 'c', '¬¢': 'c', '‚ÑÇ': 'C',
            '‚ÖΩ': 'c', '‚Ö≠': 'C', 'ùêÇ': 'C', 'ùêú': 'c', 'ùë™': 'C', 'ùíÑ': 'c',
            'ùíû': 'C', 'ùì¨': 'c', 'ùïÆ': 'C', 'ùñà': 'c', 'ùñ¢': 'C', 'ùó∞': 'c',
            'ùòä': 'C', 'ùò§': 'c', 'ùô≤': 'C', 'ùöå': 'c', '‚≤§': 'C', '‚≤•': 'c',
            
            # K√Ω t·ª± gi·ªëng L
            '≈Å': 'L', '≈Ç': 'l', 'ƒπ': 'L', 'ƒ∫': 'l', 'ƒΩ': 'L', 'ƒæ': 'l',
            'ƒª': 'L', 'ƒº': 'l', 'ƒø': 'L', '≈Ä': 'l', '‚Ñí': 'L', '‚Ñì': 'l',
            '‚Ö¨': 'L', '‚Öº': 'l', 'ùêã': 'L', 'ùê•': 'l', 'ùë≥': 'L', 'ùíç': 'l',
            'ùìõ': 'L', 'ùìµ': 'l', 'ùïÉ': 'L', 'ùïù': 'l', 'ùñ´': 'L', 'ùóÖ': 'l',
            'ùóü': 'L', 'ùóπ': 'l', 'ùòì': 'L', 'ùò≠': 'l', 'ùôá': 'L', 'ùô°': 'l',
            
            # K√Ω t·ª± gi·ªëng A
            '√Ä': 'A', '√†': 'a', '√Å': 'A', '√°': 'a', '√Ç': 'A', '√¢': 'a',
            '√É': 'A', '√£': 'a', '√Ñ': 'A', '√§': 'a', '√Ö': 'A', '√•': 'a',
            'ƒÄ': 'A', 'ƒÅ': 'a', 'ƒÇ': 'A', 'ƒÉ': 'a', 'ƒÑ': 'A', 'ƒÖ': 'a',
            '«ç': 'A', '«é': 'a', '«∫': 'A', '«ª': 'a', 'Œë': 'A', 'Œ±': 'a',
            'ùêÄ': 'A', 'ùêö': 'a', 'ùë®': 'A', 'ùíÇ': 'a', 'ùíú': 'A', 'ùì™': 'a',
            
            # K√Ω t·ª± gi·ªëng U
            '√ô': 'U', '√π': 'u', '√ö': 'U', '√∫': 'u', '√õ': 'U', '√ª': 'u',
            '√ú': 'U', '√º': 'u', '≈®': 'U', '≈©': 'u', '≈™': 'U', '≈´': 'u',
            '≈¨': 'U', '≈≠': 'u', '≈Æ': 'U', '≈Ø': 'u', '≈∞': 'U', '≈±': 'u',
            '≈≤': 'U', '≈≥': 'u', '«ì': 'U', '«î': 'u', '«ï': 'U', '«ñ': 'u',
            
            # K√Ω t·ª± gi·ªëng D
            'ƒé': 'D', 'ƒè': 'd', 'ƒê': 'D', 'ƒë': 'd', '·∏ä': 'D', '·∏ã': 'd',
            '·∏å': 'D', '·∏ç': 'd', '·∏é': 'D', '·∏è': 'd', '·∏ê': 'D', '·∏ë': 'd',
            '·∏í': 'D', '·∏ì': 'd', 'ùêÉ': 'D', 'ùêù': 'd', 'ùë´': 'D', 'ùíÖ': 'd',
            
            # K√Ω t·ª± gi·ªëng E
            '√à': 'E', '√®': 'e', '√â': 'E', '√©': 'e', '√ä': 'E', '√™': 'e',
            '√ã': 'E', '√´': 'e', 'ƒí': 'E', 'ƒì': 'e', 'ƒî': 'E', 'ƒï': 'e',
            'ƒñ': 'E', 'ƒó': 'e', 'ƒò': 'E', 'ƒô': 'e', 'ƒö': 'E', 'ƒõ': 'e',
            'ùêÑ': 'E', 'ùêû': 'e', 'ùë¨': 'E', 'ùíÜ': 'e', '‚Ñ∞': 'E', 'ùìÆ': 'e'
        }
        
        # √Åp d·ª•ng thay th·∫ø
        for special_char, normal_char in replacements.items():
            ascii_text = ascii_text.replace(special_char, normal_char)
        
        # Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng ph·∫£i ch·ªØ c√°i v√† s·ªë
        clean_text = re.sub(r'[^a-zA-Z0-9\s]', '', ascii_text)
        
        return clean_text.lower().strip()
    
    async def ask_ai_about_name(self, nickname, protected_name="Claude"):
        """H·ªèi AI xem nickname c√≥ ph·∫£i l√† bi·∫øn th·ªÉ c·ªßa t√™n ƒë∆∞·ª£c b·∫£o v·ªá kh√¥ng"""
        try:
            # Ki·ªÉm tra AI commands c√≥ s·∫µn kh√¥ng
            if not hasattr(self.bot_instance, 'ai_commands'):
                logger.warning("AI Commands kh√¥ng c√≥ s·∫µn, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p c∆° b·∫£n")
                return False
            
            ai_commands = self.bot_instance.ai_commands
            
            # T·∫°o prompt ƒë·ªÉ h·ªèi AI
            prompt = f"""
Ph√¢n t√≠ch nickname sau v√† cho bi·∫øt c√≥ ph·∫£i l√† bi·∫øn th·ªÉ c·ªßa t√™n "{protected_name}" kh√¥ng:
Nickname: "{nickname}"

H√£y ki·ªÉm tra:
1. C√≥ ph·∫£i l√† "{protected_name}" ƒë∆∞·ª£c vi·∫øt b·∫±ng k√Ω t·ª± ƒë·∫∑c bi·ªát, Unicode, ho·∫∑c k√Ω t·ª± gi·ªëng nhau kh√¥ng?
2. C√≥ ph·∫£i l√† "{protected_name}" v·ªõi th√™m s·ªë, k√Ω t·ª±, ho·∫∑c t·ª´ kh√°c kh√¥ng?
3. C√≥ ph·∫£i l√† c√°ch vi·∫øt kh√°c c·ªßa "{protected_name}" (nh∆∞ {protected_name[:-1]}, {protected_name}d, etc.) kh√¥ng?
4. C√≥ ph·∫£i l√† "{protected_name}" ƒë∆∞·ª£c ng·ª•y trang b·∫±ng k√Ω t·ª± ƒë·∫∑c bi·ªát kh√¥ng?

V√≠ d·ª• bi·∫øn th·ªÉ c·ªßa "{protected_name}":
- {protected_name} Sonnet 4.5 Pro
- ùêÇùê•ùêöùêÆùêùùêû (Unicode bold)
- ƒä≈ÇŒ±œÖƒëƒì (mixed diacritics)
- C|@ud3 (leet speak)

Ch·ªâ tr·∫£ l·ªùi "YES" n·∫øu ƒë√¢y l√† bi·∫øn th·ªÉ c·ªßa {protected_name}, "NO" n·∫øu kh√¥ng ph·∫£i.
Kh√¥ng gi·∫£i th√≠ch th√™m, ch·ªâ tr·∫£ l·ªùi YES ho·∫∑c NO."""
            
            # G·ªçi AI ƒë·ªÉ ph√¢n t√≠ch
            if ai_commands.current_provider == "gemini" and ai_commands.gemini_model:
                try:
                    response = ai_commands.gemini_model.generate_content(prompt)
                    ai_response = response.text.strip().upper()
                    logger.info(f"AI Gemini response for '{nickname}' vs '{protected_name}': {ai_response}")
                    return "YES" in ai_response
                except Exception as e:
                    logger.error(f"Error calling Gemini AI: {e}")
            
            elif ai_commands.current_provider == "grok" and ai_commands.grok_client:
                try:
                    response = ai_commands.grok_client.chat.completions.create(
                        model="grok-beta",
                        messages=[
                            {"role": "system", "content": "You are a text analysis assistant. Answer only YES or NO."},
                            {"role": "user", "content": prompt}
                        ],
                        max_tokens=10,
                        temperature=0.1
                    )
                    ai_response = response.choices[0].message.content.strip().upper()
                    logger.info(f"AI Grok response for '{nickname}' vs '{protected_name}': {ai_response}")
                    return "YES" in ai_response
                except Exception as e:
                    logger.error(f"Error calling Grok AI: {e}")
            
            # Fallback: s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p c∆° b·∫£n
            logger.info("AI kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p c∆° b·∫£n")
            return False
            
        except Exception as e:
            logger.error(f"Error in AI analysis: {e}")
            return False
    
    def basic_name_detection(self, nickname, protected_name):
        """Ph∆∞∆°ng ph√°p c∆° b·∫£n ƒë·ªÉ ph√°t hi·ªán bi·∫øn th·ªÉ c·ªßa t√™n ƒë∆∞·ª£c b·∫£o v·ªá"""
        normalized = self.normalize_text(nickname)
        protected_normalized = self.normalize_text(protected_name)
        
        # Ki·ªÉm tra ch·ª©a t√™n ƒë∆∞·ª£c b·∫£o v·ªá
        if protected_normalized in normalized:
            return True
        
        # C√°c pattern ph·ªï bi·∫øn d·ª±a tr√™n t√™n ƒë∆∞·ª£c b·∫£o v·ªá
        if protected_normalized == "claude":
            claude_patterns = [
                r'\bclaud[e]?\b',  # claude, claud
                r'\bc[l1][a@4][u][d][e3]?\b',  # c1aud3, cl@ude, etc.
                r'\bc.*l.*a.*u.*d.*e\b',  # c...l...a...u...d...e
            ]
            
            for pattern in claude_patterns:
                if re.search(pattern, normalized, re.IGNORECASE):
                    return True
        
        return False
    
    async def handle_member_update(self, before, after):
        """Handle member update events to protect admin nicknames"""
        # Ch·ªâ x·ª≠ l√Ω thay ƒë·ªïi nickname
        if before.display_name == after.display_name:
            return
        
        # B·ªè qua admin
        if self.bot_instance.has_warn_permission(after.id, after.guild_permissions):
            return
        
        # C·∫≠p nh·∫≠t l·ªãch s·ª≠ nickname
        self.update_user_history(after.id, before.display_name, after.display_name)
        
        # Ki·ªÉm tra nickname m·ªõi c√≥ ch·ª©a t·ª´ ƒë∆∞·ª£c b·∫£o v·ªá kh√¥ng
        new_nickname_lower = after.display_name.lower()
        
        # T√¨m nickname ƒë∆∞·ª£c b·∫£o v·ªá trong nickname m·ªõi (ph∆∞∆°ng ph√°p c≈©)
        protected_found = None
        for protected_nick_lower, data in self.protected_nicknames.items():
            if protected_nick_lower in new_nickname_lower:
                protected_found = (protected_nick_lower, data)
                break
        
        # N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng ph∆∞∆°ng ph√°p c≈©, ki·ªÉm tra AI cho t·∫•t c·∫£ t√™n ƒë∆∞·ª£c b·∫£o v·ªá
        if not protected_found:
            for protected_nick_lower, data in self.protected_nicknames.items():
                original_protected_name = data.get('original_nickname', protected_nick_lower)
                
                # S·ª≠ d·ª•ng AI ƒë·ªÉ ph√°t hi·ªán bi·∫øn th·ªÉ
                logger.info(f"Checking nickname '{after.display_name}' for '{original_protected_name}' variants using AI...")
                
                # Th·ª≠ AI tr∆∞·ªõc
                is_variant = await self.ask_ai_about_name(after.display_name, original_protected_name)
                
                # N·∫øu AI kh√¥ng kh·∫£ d·ª•ng, d√πng ph∆∞∆°ng ph√°p c∆° b·∫£n
                if not is_variant:
                    is_variant = self.basic_name_detection(after.display_name, original_protected_name)
                
                if is_variant:
                    protected_found = (protected_nick_lower, data)
                    logger.info(f"AI/Basic detection: '{after.display_name}' is a '{original_protected_name}' variant")
                    break
                else:
                    logger.info(f"AI/Basic detection: '{after.display_name}' is NOT a '{original_protected_name}' variant")
        
        if protected_found:
            # T√¨m nickname tr∆∞·ªõc ƒë√≥
            previous_nickname = self.get_previous_nickname(after.id)
            
            # N·∫øu kh√¥ng c√≥ l·ªãch s·ª≠, s·ª≠ d·ª•ng username
            if not previous_nickname:
                previous_nickname = after.name
            
            try:
                # ƒê·ªïi v·ªÅ nickname tr∆∞·ªõc ƒë√≥
                await after.edit(nick=previous_nickname, reason="Admin nickname protection - auto restore")
                
                # C·∫≠p nh·∫≠t s·ªë vi ph·∫°m
                protected_nick_lower, protected_data = protected_found
                self.protected_nicknames[protected_nick_lower]['violations'] += 1
                self.save_protection_data()
                
                logger.info(f"Protected admin nickname: {after} tried to use '{after.display_name}' (contains '{protected_nick_lower}') -> restored to '{previous_nickname}'")
                
                # G·ª≠i th√¥ng b√°o cho user
                try:
                    original_protected_nickname = protected_data.get('original_nickname', protected_nick_lower)
                    violations = protected_data.get('violations', 0)
                    
                    embed = discord.Embed(
                        title="üõ°Ô∏è Nickname ƒë∆∞·ª£c b·∫£o v·ªá",
                        description=f"Nickname **{original_protected_nickname}** ƒë∆∞·ª£c b·∫£o v·ªá v√† kh√¥ng th·ªÉ s·ª≠ d·ª•ng",
                        color=discord.Color.red()
                    )
                    
                    embed.add_field(
                        name="‚ö° ƒê√£ kh√¥i ph·ª•c",
                        value=f"Nickname c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·ªïi v·ªÅ: **{previous_nickname}**",
                        inline=False
                    )
                    
                    # X√°c ƒë·ªãnh lo·∫°i ph√°t hi·ªán
                    detection_method = "AI Detection" if protected_found else "Direct Match"
                    
                    embed.add_field(
                        name="üö´ Nickname vi ph·∫°m",
                        value=f"**{after.display_name}** (ph√°t hi·ªán: **{original_protected_nickname}** - {detection_method})",
                        inline=False
                    )
                    
                    embed.add_field(
                        name="üìä Vi ph·∫°m",
                        value=f"ƒê√¢y l√† l·∫ßn th·ª© {violations} b·∫°n vi ph·∫°m quy ƒë·ªãnh nickname",
                        inline=True
                    )
                    
                    embed.add_field(
                        name="üí° L∆∞u √Ω",
                        value="Vui l√≤ng kh√¥ng s·ª≠ d·ª•ng nickname ch·ª©a t√™n Admin",
                        inline=True
                    )
                    
                    embed.set_footer(text="Li√™n h·ªá Admin n·∫øu c√≥ th·∫Øc m·∫Øc")
                    
                    await after.send(embed=embed)
                except:
                    # Kh√¥ng th·ªÉ g·ª≠i DM, b·ªè qua
                    pass
                    
            except discord.Forbidden:
                logger.warning(f"Cannot restore nickname for {after}: Missing permissions")
            except Exception as e:
                logger.error(f"Error protecting admin nickname for {after}: {e}")
    
    def register_commands(self):
        """Register all commands"""
        logger.info("Admin Nickname Protection commands ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω")
