import discord
from discord.ext import commands
import logging
from .base import BaseCommand
from utils.shared_wallet import shared_wallet

logger = logging.getLogger(__name__)

class WalletReloadCommands(BaseCommand):
    """Commands ƒë·ªÉ reload wallet data"""
    
    def register_commands(self):
        """ƒêƒÉng k√Ω c√°c commands"""
        
        @self.bot.command(name='reloadwallet', aliases=['rwallet', 'refreshwallet'])
        async def reload_wallet(ctx):
            """
            Reload d·ªØ li·ªáu v√≠ t·ª´ file (manual)
            
            Usage: ;reloadwallet
            Aliases: ;rwallet, ;refreshwallet
            """
            # Ki·ªÉm tra quy·ªÅn admin
            if not ctx.author.guild_permissions.administrator:
                is_admin = hasattr(self.bot_instance, 'admin_ids') and ctx.author.id in self.bot_instance.admin_ids
                is_supreme = hasattr(self.bot_instance, 'supreme_admin_id') and self.bot_instance.supreme_admin_id and ctx.author.id == self.bot_instance.supreme_admin_id
                
                if not (is_admin or is_supreme):
                    await ctx.reply(
                        "‚ùå B·∫°n c·∫ßn quy·ªÅn **Administrator** ho·∫∑c l√† **Admin/Supreme Admin** c·ªßa bot ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!",
                        mention_author=True
                    )
                    return
            
            # Processing message
            processing_embed = discord.Embed(
                title="üîÑ ƒêang reload wallet data...",
                description="ƒêang t·∫£i l·∫°i d·ªØ li·ªáu t·ª´ file...",
                color=discord.Color.blue()
            )
            
            msg = await ctx.reply(embed=processing_embed, mention_author=True)
            
            # Reload data
            success, result = shared_wallet.reload_data()
            
            if success:
                embed = discord.Embed(
                    title="‚úÖ Reload wallet th√†nh c√¥ng!",
                    color=discord.Color.green()
                )
                
                embed.add_field(
                    name="üìä Th·ªëng k√™ tr∆∞·ªõc reload",
                    value=(
                        f"**Users:** {result['old_count']:,}\n"
                        f"**T·ªïng ti·ªÅn:** {result['old_total']:,} xu"
                    ),
                    inline=True
                )
                
                embed.add_field(
                    name="üìä Th·ªëng k√™ sau reload",
                    value=(
                        f"**Users:** {result['new_count']:,}\n"
                        f"**T·ªïng ti·ªÅn:** {result['new_total']:,} xu"
                    ),
                    inline=True
                )
                
                # T√≠nh thay ƒë·ªïi
                user_diff = result['new_count'] - result['old_count']
                money_diff = result['new_total'] - result['old_total']
                
                changes = []
                if user_diff != 0:
                    sign = "+" if user_diff > 0 else ""
                    changes.append(f"Users: {sign}{user_diff}")
                if money_diff != 0:
                    sign = "+" if money_diff > 0 else ""
                    changes.append(f"Ti·ªÅn: {sign}{money_diff:,} xu")
                
                if changes:
                    embed.add_field(
                        name="üìà Thay ƒë·ªïi",
                        value="\n".join(changes),
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="‚ÑπÔ∏è Th√¥ng b√°o",
                        value="Kh√¥ng c√≥ thay ƒë·ªïi n√†o",
                        inline=False
                    )
                
                embed.set_footer(text=f"Reload b·ªüi {ctx.author.display_name}")
                
                await msg.edit(embed=embed)
                logger.info(f"Wallet reloaded manually by {ctx.author.id}")
                
            else:
                embed = discord.Embed(
                    title="‚ùå L·ªói reload wallet",
                    description=f"```\n{result}\n```",
                    color=discord.Color.red()
                )
                await msg.edit(embed=embed)
        
        @self.bot.command(name='autowallet', aliases=['autoreloadwallet'])
        async def auto_wallet(ctx, action: str = None, interval: int = 5):
            """
            B·∫≠t/t·∫Øt auto reload wallet khi file thay ƒë·ªïi
            
            Usage: 
            ;autowallet start [interval] - B·∫≠t auto reload (check m·ªói X gi√¢y)
            ;autowallet stop - T·∫Øt auto reload
            ;autowallet status - Xem tr·∫°ng th√°i
            
            Aliases: ;autoreloadwallet
            """
            # Ki·ªÉm tra quy·ªÅn Supreme Admin
            is_supreme = hasattr(self.bot_instance, 'supreme_admin_id') and self.bot_instance.supreme_admin_id and ctx.author.id == self.bot_instance.supreme_admin_id
            
            if not is_supreme:
                await ctx.reply(
                    "‚ùå Ch·ªâ **Supreme Admin** m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!",
                    mention_author=True
                )
                return
            
            if action is None or action.lower() == "status":
                # Show status
                embed = discord.Embed(
                    title="üìä Auto Wallet Reload Status",
                    color=discord.Color.blue()
                )
                
                status = "üü¢ **ƒêang ch·∫°y**" if shared_wallet._is_watching else "üî¥ **ƒê√£ d·ª´ng**"
                embed.add_field(
                    name="Tr·∫°ng th√°i",
                    value=status,
                    inline=False
                )
                
                if shared_wallet._is_watching:
                    embed.add_field(
                        name="‚ÑπÔ∏è Th√¥ng tin",
                        value="Bot ƒëang t·ª± ƒë·ªông theo d√µi file `shared_wallet.json` v√† reload khi c√≥ thay ƒë·ªïi",
                        inline=False
                    )
                
                embed.add_field(
                    name="üìù L·ªánh",
                    value=(
                        "; start [interval]` - B·∫≠t auto reload\n"
                        "; stop` - T·∫Øt auto reload\n"
                        "; status` - Xem tr·∫°ng th√°i"
                    ),
                    inline=False
                )
                
                await ctx.reply(embed=embed, mention_author=True)
                
            elif action.lower() == "start":
                if shared_wallet._is_watching:
                    await ctx.reply(
                        "‚ö†Ô∏è Auto reload ƒë√£ ƒëang ch·∫°y r·ªìi!",
                        mention_author=True
                    )
                    return
                
                # Validate interval
                if interval < 1:
                    interval = 5
                elif interval > 300:
                    interval = 300
                
                # Start watching
                import asyncio
                shared_wallet._file_watch_task = asyncio.create_task(
                    shared_wallet.start_file_watching(check_interval=interval)
                )
                
                embed = discord.Embed(
                    title="‚úÖ ƒê√£ b·∫≠t auto reload wallet!",
                    color=discord.Color.green()
                )
                
                embed.add_field(
                    name="‚öôÔ∏è C√†i ƒë·∫∑t",
                    value=f"**Check interval:** {interval} gi√¢y",
                    inline=False
                )
                
                embed.add_field(
                    name="üìÇ File theo d√µi",
                    value="`shared_wallet.json`",
                    inline=False
                )
                
                embed.add_field(
                    name="üîÑ Ho·∫°t ƒë·ªông",
                    value="Bot s·∫Ω t·ª± ƒë·ªông reload khi ph√°t hi·ªán file thay ƒë·ªïi",
                    inline=False
                )
                
                await ctx.reply(embed=embed, mention_author=True)
                logger.info(f"Auto wallet reload started by {ctx.author.id} (interval: {interval}s)")
                
            elif action.lower() == "stop":
                if not shared_wallet._is_watching:
                    await ctx.reply(
                        "‚ö†Ô∏è Auto reload ch∆∞a ch·∫°y!",
                        mention_author=True
                    )
                    return
                
                # Stop watching
                shared_wallet.stop_file_watching()
                
                embed = discord.Embed(
                    title="üõë ƒê√£ t·∫Øt auto reload wallet!",
                    color=discord.Color.orange()
                )
                
                embed.add_field(
                    name="‚ÑπÔ∏è Th√¥ng b√°o",
                    value="Bot s·∫Ω kh√¥ng t·ª± ƒë·ªông reload wallet n·ªØa",
                    inline=False
                )
                
                embed.add_field(
                    name="üí° Tip",
                    value="D√πng ;` ƒë·ªÉ reload th·ªß c√¥ng",
                    inline=False
                )
                
                await ctx.reply(embed=embed, mention_author=True)
                logger.info(f"Auto wallet reload stopped by {ctx.author.id}")
                
            else:
                await ctx.reply(
                    f"‚ùå Action kh√¥ng h·ª£p l·ªá: `{action}`\n"
                    "S·ª≠ d·ª•ng: `start`, `stop`, ho·∫∑c `status`",
                    mention_author=True
                )
        
        @self.bot.command(name='walletstats', aliases=['wstats'])
        async def wallet_stats(ctx):
            """
            Xem th·ªëng k√™ t·ªïng quan c·ªßa wallet system
            
            Usage: ;walletstats
            Aliases: ;wstats
            """
            embed = discord.Embed(
                title="üí∞ Wallet System Statistics",
                color=discord.Color.gold()
            )
            
            user_count = shared_wallet.get_user_count()
            total_money = shared_wallet.get_total_money_in_system()
            
            embed.add_field(
                name="üë• T·ªïng Users",
                value=f"**{user_count:,}** ng∆∞·ªùi",
                inline=True
            )
            
            embed.add_field(
                name="üíµ T·ªïng ti·ªÅn trong h·ªá th·ªëng",
                value=f"**{total_money:,}** xu",
                inline=True
            )
            
            if user_count > 0:
                avg_balance = total_money / user_count
                embed.add_field(
                    name="üìä Trung b√¨nh/ng∆∞·ªùi",
                    value=f"**{avg_balance:,.0f}** xu",
                    inline=True
                )
            
            # Top 3 richest
            rich_users = shared_wallet.get_all_users_with_money()[:3]
            
            if rich_users:
                top_text = []
                medals = ["ü•á", "ü•à", "ü•â"]
                
                for i, user_data in enumerate(rich_users):
                    try:
                        user = await self.bot.fetch_user(user_data['user_id'])
                        username = user.display_name
                    except:
                        username = f"User {user_data['user_id']}"
                    
                    top_text.append(f"{medals[i]} **{username}:** {user_data['balance']:,} xu")
                
                embed.add_field(
                    name="üèÜ Top 3 Gi√†u nh·∫•t",
                    value="\n".join(top_text),
                    inline=False
                )
            
            # Auto reload status
            auto_status = "üü¢ ƒêang b·∫≠t" if shared_wallet._is_watching else "üî¥ ƒê√£ t·∫Øt"
            embed.add_field(
                name="üîÑ Auto Reload",
                value=auto_status,
                inline=True
            )
            
            embed.add_field(
                name="üìÇ File",
                value="`shared_wallet.json`",
                inline=True
            )
            
            embed.set_footer(text=f"Y√™u c·∫ßu b·ªüi {ctx.author.display_name}")
            
            await ctx.reply(embed=embed, mention_author=True)

        logger.info("Wallet reload commands registered")
