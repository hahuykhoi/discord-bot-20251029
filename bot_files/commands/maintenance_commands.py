"""
Maintenance Commands - H·ªá th·ªëng b·∫£o tr√¨ bot
L·ªánh: ;close, ;open (Supreme Admin only)
"""
import discord
from discord.ext import commands
import json
import os
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class MaintenanceCommands:
    def __init__(self, bot_instance):
        """
        Kh·ªüi t·∫°o Maintenance Commands
        
        Args:
            bot_instance: Instance c·ªßa AutoReplyBotRefactored
        """
        self.bot_instance = bot_instance
        self.bot = bot_instance.bot
        self.maintenance_file = 'maintenance_mode.json'
        self.maintenance_data = self.load_maintenance_data()
        
        logger.info("Maintenance Commands ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o")
    
    def load_maintenance_data(self):
        """Load tr·∫°ng th√°i maintenance t·ª´ file"""
        try:
            if os.path.exists(self.maintenance_file):
                with open(self.maintenance_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    is_maintenance = data.get('is_maintenance', False)
                    if is_maintenance:
                        logger.warning("‚ö†Ô∏è BOT ƒêANG ·ªû CH·∫æ ƒê·ªò B·∫¢O TR√å")
                    return data
            else:
                return {
                    'is_maintenance': False,
                    'closed_at': None,
                    'closed_by': None,
                    'reason': None
                }
        except Exception as e:
            logger.error(f"L·ªói khi load maintenance data: {e}")
            return {
                'is_maintenance': False,
                'closed_at': None,
                'closed_by': None,
                'reason': None
            }
    
    def save_maintenance_data(self):
        """L∆∞u tr·∫°ng th√°i maintenance v√†o file"""
        try:
            with open(self.maintenance_file, 'w', encoding='utf-8') as f:
                json.dump(self.maintenance_data, f, indent=4, ensure_ascii=False)
            logger.info("ƒê√£ l∆∞u maintenance data")
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u maintenance data: {e}")
    
    def is_maintenance_mode(self):
        """Ki·ªÉm tra xem bot c√≥ ƒëang b·∫£o tr√¨ kh√¥ng"""
        return self.maintenance_data.get('is_maintenance', False)
    
    def set_maintenance(self, enabled, user_id, username, reason=None):
        """
        B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô b·∫£o tr√¨
        
        Args:
            enabled: True ƒë·ªÉ b·∫≠t, False ƒë·ªÉ t·∫Øt
            user_id: ID ng∆∞·ªùi th·ª±c hi·ªán
            username: T√™n ng∆∞·ªùi th·ª±c hi·ªán
            reason: L√Ω do (optional)
        """
        self.maintenance_data['is_maintenance'] = enabled
        
        if enabled:
            self.maintenance_data['closed_at'] = datetime.now().isoformat()
            self.maintenance_data['closed_by'] = {
                'id': user_id,
                'name': username
            }
            self.maintenance_data['reason'] = reason or "ƒêang b·∫£o tr√¨ h·ªá th·ªëng"
            logger.warning(f"üîí MAINTENANCE MODE ENABLED by {username}")
        else:
            self.maintenance_data['opened_at'] = datetime.now().isoformat()
            self.maintenance_data['opened_by'] = {
                'id': user_id,
                'name': username
            }
            logger.info(f"üîì MAINTENANCE MODE DISABLED by {username}")
        
        self.save_maintenance_data()
    
    def register_commands(self):
        """ƒêƒÉng k√Ω c√°c commands cho Maintenance"""
        
        @self.bot.command(name='close', aliases=['maintenance', 'lock'])
        async def close_bot(ctx, *, reason: str = None):
            """
            ƒê√≥ng bot ƒë·ªÉ b·∫£o tr√¨ (Supreme Admin only)
            
            Usage: ;close [l√Ω do]
            """
            try:
                # Ki·ªÉm tra quy·ªÅn Supreme Admin
                if not self.bot_instance.is_supreme_admin(ctx.author.id):
                    embed = discord.Embed(
                        title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                        description="Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ ƒë√≥ng bot!",
                        color=discord.Color.red()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # Ki·ªÉm tra xem ƒë√£ ƒë√≥ng ch∆∞a
                if self.is_maintenance_mode():
                    embed = discord.Embed(
                        title="‚ö†Ô∏è Bot ƒë√£ ƒë√≥ng",
                        description="Bot ƒëang trong ch·∫ø ƒë·ªô b·∫£o tr√¨!",
                        color=discord.Color.orange()
                    )
                    
                    closed_by = self.maintenance_data.get('closed_by', {})
                    embed.add_field(
                        name="üë§ ƒê√≥ng b·ªüi",
                        value=closed_by.get('name', 'Unknown'),
                        inline=True
                    )
                    
                    closed_at = self.maintenance_data.get('closed_at')
                    if closed_at:
                        embed.add_field(
                            name="‚è∞ Th·ªùi gian",
                            value=datetime.fromisoformat(closed_at).strftime("%d/%m/%Y %H:%M:%S"),
                            inline=True
                        )
                    
                    reason_text = self.maintenance_data.get('reason', 'Kh√¥ng c√≥ l√Ω do')
                    embed.add_field(
                        name="üìù L√Ω do",
                        value=reason_text,
                        inline=False
                    )
                    
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # ƒê√≥ng bot
                reason_text = reason or "ƒêang b·∫£o tr√¨ h·ªá th·ªëng"
                self.set_maintenance(True, ctx.author.id, ctx.author.display_name, reason_text)
                
                # T·∫°o embed th√¥ng b√°o
                embed = discord.Embed(
                    title="üîí Bot ƒë√£ ƒë√≥ng",
                    description="Bot ƒë√£ chuy·ªÉn sang ch·∫ø ƒë·ªô b·∫£o tr√¨!",
                    color=discord.Color.red(),
                    timestamp=datetime.now()
                )
                
                embed.add_field(
                    name="üë§ ƒê√≥ng b·ªüi",
                    value=ctx.author.display_name,
                    inline=True
                )
                
                embed.add_field(
                    name="‚è∞ Th·ªùi gian",
                    value=datetime.now().strftime("%H:%M:%S"),
                    inline=True
                )
                
                embed.add_field(
                    name="üìù L√Ω do",
                    value=reason_text,
                    inline=False
                )
                
                embed.add_field(
                    name="üí° M·ªü l·∫°i bot",
                    value="S·ª≠ d·ª•ng ;` ƒë·ªÉ m·ªü l·∫°i bot",
                    inline=False
                )
                
                embed.set_footer(text="T·∫•t c·∫£ l·ªánh ƒë√£ b·ªã t·∫Øt ‚Ä¢ Ch·ªâ Supreme Admin c√≥ th·ªÉ m·ªü l·∫°i")
                
                await ctx.reply(embed=embed, mention_author=True)
                
                logger.warning(f"Bot closed by {ctx.author.display_name} ({ctx.author.id}): {reason_text}")
                
            except Exception as e:
                logger.error(f"L·ªói trong close command: {e}")
                await ctx.reply(f"‚ùå C√≥ l·ªói x·∫£y ra: {e}", mention_author=True)
        
        @self.bot.command(name='open', aliases=['unmaintenance', 'unlock'])
        async def open_bot(ctx):
            """
            M·ªü l·∫°i bot sau khi b·∫£o tr√¨ (Supreme Admin only)
            
            Usage: ;open
            """
            try:
                # Ki·ªÉm tra quy·ªÅn Supreme Admin
                if not self.bot_instance.is_supreme_admin(ctx.author.id):
                    embed = discord.Embed(
                        title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                        description="Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ m·ªü bot!",
                        color=discord.Color.red()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # Ki·ªÉm tra xem ƒë√£ m·ªü ch∆∞a
                if not self.is_maintenance_mode():
                    embed = discord.Embed(
                        title="‚úÖ Bot ƒëang ho·∫°t ƒë·ªông",
                        description="Bot kh√¥ng trong ch·∫ø ƒë·ªô b·∫£o tr√¨!",
                        color=discord.Color.green()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # L·∫•y th√¥ng tin tr∆∞·ªõc khi m·ªü
                closed_by = self.maintenance_data.get('closed_by', {})
                closed_at = self.maintenance_data.get('closed_at')
                reason = self.maintenance_data.get('reason', 'Kh√¥ng c√≥ l√Ω do')
                
                # M·ªü bot
                self.set_maintenance(False, ctx.author.id, ctx.author.display_name)
                
                # T·∫°o embed th√¥ng b√°o
                embed = discord.Embed(
                    title="üîì Bot ƒë√£ m·ªü",
                    description="Bot ƒë√£ ho·∫°t ƒë·ªông tr·ªü l·∫°i b√¨nh th∆∞·ªùng!",
                    color=discord.Color.green(),
                    timestamp=datetime.now()
                )
                
                embed.add_field(
                    name="üë§ M·ªü b·ªüi",
                    value=ctx.author.display_name,
                    inline=True
                )
                
                embed.add_field(
                    name="‚è∞ Th·ªùi gian",
                    value=datetime.now().strftime("%H:%M:%S"),
                    inline=True
                )
                
                # Th√¥ng tin l·∫ßn ƒë√≥ng tr∆∞·ªõc
                if closed_by:
                    embed.add_field(
                        name="üìã L·∫ßn ƒë√≥ng tr∆∞·ªõc",
                        value=f"**B·ªüi:** {closed_by.get('name', 'Unknown')}\n"
                              f"**L√Ω do:** {reason}",
                        inline=False
                    )
                
                if closed_at:
                    duration = datetime.now() - datetime.fromisoformat(closed_at)
                    hours = int(duration.total_seconds() // 3600)
                    minutes = int((duration.total_seconds() % 3600) // 60)
                    
                    embed.add_field(
                        name="‚è±Ô∏è Th·ªùi gian b·∫£o tr√¨",
                        value=f"{hours} gi·ªù {minutes} ph√∫t",
                        inline=False
                    )
                
                embed.set_footer(text="T·∫•t c·∫£ l·ªánh ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t ‚Ä¢ Bot s·∫µn s√†ng ho·∫°t ƒë·ªông")
                
                await ctx.reply(embed=embed, mention_author=True)
                
                logger.info(f"Bot opened by {ctx.author.display_name} ({ctx.author.id})")
                
            except Exception as e:
                logger.error(f"L·ªói trong open command: {e}")
                await ctx.reply(f"‚ùå C√≥ l·ªói x·∫£y ra: {e}", mention_author=True)
        
        @self.bot.command(name='maintenancestatus', aliases=['mstatus'])
        async def maintenance_status(ctx):
            """
            Xem tr·∫°ng th√°i b·∫£o tr√¨ c·ªßa bot
            
            Usage: ;maintenancestatus
            """
            try:
                is_maintenance = self.is_maintenance_mode()
                
                if is_maintenance:
                    embed = discord.Embed(
                        title="üîí Bot ƒëang b·∫£o tr√¨",
                        description="Bot hi·ªán ƒëang trong ch·∫ø ƒë·ªô b·∫£o tr√¨",
                        color=discord.Color.red(),
                        timestamp=datetime.now()
                    )
                    
                    closed_by = self.maintenance_data.get('closed_by', {})
                    embed.add_field(
                        name="üë§ ƒê√≥ng b·ªüi",
                        value=closed_by.get('name', 'Unknown'),
                        inline=True
                    )
                    
                    closed_at = self.maintenance_data.get('closed_at')
                    if closed_at:
                        closed_time = datetime.fromisoformat(closed_at)
                        embed.add_field(
                            name="‚è∞ Th·ªùi ƒëi·ªÉm ƒë√≥ng",
                            value=closed_time.strftime("%d/%m/%Y %H:%M:%S"),
                            inline=True
                        )
                        
                        duration = datetime.now() - closed_time
                        hours = int(duration.total_seconds() // 3600)
                        minutes = int((duration.total_seconds() % 3600) // 60)
                        
                        embed.add_field(
                            name="‚è±Ô∏è Th·ªùi gian ƒë√£ ƒë√≥ng",
                            value=f"{hours} gi·ªù {minutes} ph√∫t",
                            inline=True
                        )
                    
                    reason = self.maintenance_data.get('reason', 'Kh√¥ng c√≥ l√Ω do')
                    embed.add_field(
                        name="üìù L√Ω do",
                        value=reason,
                        inline=False
                    )
                    
                else:
                    embed = discord.Embed(
                        title="‚úÖ Bot ƒëang ho·∫°t ƒë·ªông",
                        description="Bot ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng",
                        color=discord.Color.green(),
                        timestamp=datetime.now()
                    )
                    
                    opened_by = self.maintenance_data.get('opened_by', {})
                    if opened_by:
                        embed.add_field(
                            name="üë§ M·ªü g·∫ßn nh·∫•t b·ªüi",
                            value=opened_by.get('name', 'Unknown'),
                            inline=True
                        )
                    
                    opened_at = self.maintenance_data.get('opened_at')
                    if opened_at:
                        embed.add_field(
                            name="‚è∞ Th·ªùi ƒëi·ªÉm m·ªü",
                            value=datetime.fromisoformat(opened_at).strftime("%d/%m/%Y %H:%M:%S"),
                            inline=True
                        )
                
                await ctx.reply(embed=embed, mention_author=True)
                
            except Exception as e:
                logger.error(f"L·ªói trong maintenancestatus command: {e}")
                await ctx.reply(f"‚ùå C√≥ l·ªói x·∫£y ra: {e}", mention_author=True)
        
        logger.info("ƒê√£ ƒëƒÉng k√Ω Maintenance commands: close, open, maintenancestatus")
