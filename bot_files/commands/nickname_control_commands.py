import discord
from discord.ext import commands
import json
import os
import asyncio
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class NicknameControlCommands:
    def __init__(self, bot_instance):
        self.bot_instance = bot_instance
        self.bot = bot_instance.bot
        self.control_file = 'data/nickname_control.json'
        self.controlled_users = {}
        self.load_controlled_users()
        self.setup_commands()
    
    def load_controlled_users(self):
        """Load controlled users from file"""
        try:
            if os.path.exists(self.control_file):
                with open(self.control_file, 'r', encoding='utf-8') as f:
                    self.controlled_users = json.load(f)
                logger.info(f"Loaded {len(self.controlled_users)} controlled users")
            else:
                logger.info("No nickname control file found, creating new")
                self.controlled_users = {}
                self.save_controlled_users()
        except Exception as e:
            logger.error(f"Error loading nickname control data: {e}")
            self.controlled_users = {}
    
    def save_controlled_users(self):
        """Save controlled users to file"""
        try:
            os.makedirs('data', exist_ok=True)
            with open(self.control_file, 'w', encoding='utf-8') as f:
                json.dump(self.controlled_users, f, indent=4, ensure_ascii=False)
            logger.info("Nickname control data saved successfully")
        except Exception as e:
            logger.error(f"Error saving nickname control data: {e}")
    
    def setup_commands(self):
        """Setup nickname control commands"""
        
        @self.bot.command(name='nicklock')
        async def nicklock_command(ctx, user: discord.Member = None, *, nickname=None):
            """
            Kh√≥a nickname c·ªßa user - t·ª± ƒë·ªông kh√¥i ph·ª•c khi h·ªç ƒë·ªïi t√™n
            
            Usage:
            ;nicklock @user <nickname> - Kh√≥a nickname c·ªë ƒë·ªãnh
            ;nicklock @user remove - G·ª° b·ªè kh√≥a
            ;nicklock list - Xem danh s√°ch user b·ªã kh√≥a
            ;nicklock - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
            """
            # Ki·ªÉm tra quy·ªÅn admin
            if not self.bot_instance.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh nicklock!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Hi·ªÉn th·ªã help n·∫øu kh√¥ng c√≥ tham s·ªë
            if not user:
                await self.show_help(ctx)
                return
            
            # X·ª≠ l√Ω l·ªánh list
            if isinstance(user, str) and user.lower() == 'list':
                await self.show_controlled_list(ctx)
                return
            
            # Ki·ªÉm tra user h·ª£p l·ªá
            if not isinstance(user, discord.Member):
                embed = discord.Embed(
                    title="‚ùå User kh√¥ng h·ª£p l·ªá",
                    description="Vui l√≤ng mention user h·ª£p l·ªá!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Kh√¥ng th·ªÉ ki·ªÉm so√°t ch√≠nh m√¨nh
            if user.id == ctx.author.id:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng th·ªÉ t·ª± ki·ªÉm so√°t",
                    description="B·∫°n kh√¥ng th·ªÉ ki·ªÉm so√°t nickname c·ªßa ch√≠nh m√¨nh!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Kh√¥ng th·ªÉ ki·ªÉm so√°t admin kh√°c
            if self.bot_instance.has_warn_permission(user.id, user.guild_permissions):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng th·ªÉ ki·ªÉm so√°t Admin",
                    description="Kh√¥ng th·ªÉ ki·ªÉm so√°t nickname c·ªßa Admin kh√°c!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # X·ª≠ l√Ω l·ªánh remove
            if nickname and nickname.lower() == 'remove':
                await self.remove_control(ctx, user)
                return
            
            # Ki·ªÉm tra nickname h·ª£p l·ªá
            if not nickname:
                embed = discord.Embed(
                    title="‚ùå Thi·∫øu nickname",
                    description="Vui l√≤ng nh·∫≠p nickname mu·ªën ƒë·∫∑t c·ªë ƒë·ªãnh!",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="üí° C√°ch s·ª≠ d·ª•ng",
                    value=(
                        "`;nicklock @user <nickname>` - Kh√≥a nickname c·ªë ƒë·ªãnh\n"
                        "`;nicklock @user remove` - G·ª° b·ªè kh√≥a"
                    ),
                    inline=False
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Ki·ªÉm tra ƒë·ªô d√†i nickname
            if len(nickname) > 32:
                embed = discord.Embed(
                    title="‚ùå Nickname qu√° d√†i",
                    description="Nickname kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 32 k√Ω t·ª±!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Th√™m user v√†o danh s√°ch ki·ªÉm so√°t
            await self.add_control(ctx, user, nickname)
    
    async def add_control(self, ctx, user, nickname):
        """Add user to nickname control"""
        try:
            # L∆∞u nickname hi·ªán t·∫°i l√†m backup
            current_nickname = user.display_name
            
            # ƒê·∫∑t nickname m·ªõi
            await user.edit(nick=nickname, reason=f"Nickname control by {ctx.author}")
            
            # L∆∞u v√†o database
            user_data = {
                'controlled_nickname': nickname,
                'original_nickname': current_nickname,
                'controlled_by': ctx.author.id,
                'controlled_at': datetime.now().isoformat(),
                'guild_id': ctx.guild.id
            }
            
            self.controlled_users[str(user.id)] = user_data
            self.save_controlled_users()
            
            # Th√¥ng b√°o th√†nh c√¥ng
            embed = discord.Embed(
                title="‚úÖ ƒê√£ thi·∫øt l·∫≠p ki·ªÉm so√°t nickname",
                description=f"User {user.mention} gi·ªù s·∫Ω lu√¥n c√≥ nickname: **{nickname}**",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üë§ User ƒë∆∞·ª£c ki·ªÉm so√°t",
                value=f"{user.mention} ({user.id})",
                inline=True
            )
            
            embed.add_field(
                name="üè∑Ô∏è Nickname c·ªë ƒë·ªãnh",
                value=f"**{nickname}**",
                inline=True
            )
            
            embed.add_field(
                name="üëÆ ƒê∆∞·ª£c ki·ªÉm so√°t b·ªüi",
                value=ctx.author.mention,
                inline=True
            )
            
            embed.add_field(
                name="üîÑ Nickname tr∆∞·ªõc ƒë√≥",
                value=f"**{current_nickname}**",
                inline=True
            )
            
            embed.add_field(
                name="‚ö° T·ª± ƒë·ªông kh√¥i ph·ª•c",
                value="Nickname s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c kh√¥i ph·ª•c khi user thay ƒë·ªïi",
                inline=False
            )
            
            embed.set_footer(text="S·ª≠ d·ª•ng ;nicklock @user remove ƒë·ªÉ g·ª° b·ªè kh√≥a")
            
            await ctx.reply(embed=embed, mention_author=True)
            logger.info(f"Admin {ctx.author} set nickname control for {user}: {nickname}")
            
        except discord.Forbidden:
            embed = discord.Embed(
                title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                description="Bot kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi nickname c·ªßa user n√†y!",
                color=discord.Color.red()
            )
            embed.add_field(
                name="üí° Gi·∫£i ph√°p",
                value="ƒê·∫£m b·∫£o bot c√≥ quy·ªÅn 'Manage Nicknames' v√† role bot cao h∆°n role c·ªßa user",
                inline=False
            )
            await ctx.reply(embed=embed, mention_author=True)
            
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå L·ªói khi thi·∫øt l·∫≠p ki·ªÉm so√°t",
                description=f"C√≥ l·ªói x·∫£y ra: {str(e)}",
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed, mention_author=True)
            logger.error(f"Error setting nickname control: {e}")
    
    async def remove_control(self, ctx, user):
        """Remove user from nickname control"""
        user_id = str(user.id)
        
        if user_id not in self.controlled_users:
            embed = discord.Embed(
                title="‚ö†Ô∏è User kh√¥ng ƒë∆∞·ª£c ki·ªÉm so√°t",
                description=f"User {user.mention} hi·ªán kh√¥ng ƒë∆∞·ª£c ki·ªÉm so√°t nickname!",
                color=discord.Color.orange()
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        # L·∫•y th√¥ng tin user
        user_data = self.controlled_users[user_id]
        controlled_nickname = user_data.get('controlled_nickname', 'Unknown')
        
        # X√≥a kh·ªèi database
        del self.controlled_users[user_id]
        self.save_controlled_users()
        
        # Th√¥ng b√°o th√†nh c√¥ng
        embed = discord.Embed(
            title="‚úÖ ƒê√£ g·ª° b·ªè ki·ªÉm so√°t nickname",
            description=f"User {user.mention} kh√¥ng c√≤n b·ªã ki·ªÉm so√°t nickname",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üë§ User",
            value=f"{user.mention} ({user.id})",
            inline=True
        )
        
        embed.add_field(
            name="üè∑Ô∏è Nickname ƒë√£ ki·ªÉm so√°t",
            value=f"**{controlled_nickname}**",
            inline=True
        )
        
        embed.add_field(
            name="üîì Tr·∫°ng th√°i",
            value="User c√≥ th·ªÉ t·ª± do ƒë·ªïi nickname",
            inline=False
        )
        
        await ctx.reply(embed=embed, mention_author=True)
        logger.info(f"Admin {ctx.author} removed nickname control for {user}")
    
    async def show_controlled_list(self, ctx):
        """Show list of controlled users"""
        if not self.controlled_users:
            embed = discord.Embed(
                title="üìù Danh s√°ch ki·ªÉm so√°t nickname tr·ªëng",
                description="Hi·ªán kh√¥ng c√≥ user n√†o ƒë∆∞·ª£c ki·ªÉm so√°t nickname",
                color=discord.Color.blue()
            )
            embed.add_field(
                name="üí° C√°ch s·ª≠ d·ª•ng",
                value="`;nickcontrol @user <nickname>` ƒë·ªÉ th√™m user v√†o ki·ªÉm so√°t",
                inline=False
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        embed = discord.Embed(
            title="üìù Danh s√°ch ki·ªÉm so√°t nickname",
            description=f"T·ªïng c·ªông: {len(self.controlled_users)} user",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        # Hi·ªÉn th·ªã t·ªëi ƒëa 10 user
        count = 0
        for user_id, data in list(self.controlled_users.items())[:10]:
            count += 1
            try:
                user = ctx.guild.get_member(int(user_id))
                if user:
                    user_display = f"{user.mention} ({user.display_name})"
                else:
                    user_display = f"User ID: {user_id} (Kh√¥ng trong server)"
                
                controlled_nickname = data.get('controlled_nickname', 'Unknown')
                controlled_by = data.get('controlled_by', 'Unknown')
                controlled_at = data.get('controlled_at', 'Unknown')
                
                # Parse th·ªùi gian
                try:
                    dt = datetime.fromisoformat(controlled_at)
                    time_str = dt.strftime("%d/%m/%Y %H:%M")
                except:
                    time_str = "Unknown"
                
                embed.add_field(
                    name=f"#{count} - {user_display}",
                    value=(
                        f"**Nickname:** {controlled_nickname}\n"
                        f"**B·ªüi:** <@{controlled_by}>\n"
                        f"**Th·ªùi gian:** {time_str}"
                    ),
                    inline=False
                )
                
            except Exception as e:
                logger.error(f"Error displaying controlled user {user_id}: {e}")
        
        if len(self.controlled_users) > 10:
            embed.add_field(
                name="üìä Th·ªëng k√™",
                value=f"Hi·ªÉn th·ªã 10/{len(self.controlled_users)} user ƒë·∫ßu ti√™n",
                inline=False
            )
        
        embed.set_footer(text="S·ª≠ d·ª•ng ;nicklock @user remove ƒë·ªÉ g·ª° b·ªè kh√≥a")
        await ctx.reply(embed=embed, mention_author=True)
    
    async def show_help(self, ctx):
        """Show help menu"""
        embed = discord.Embed(
            title="üè∑Ô∏è Nickname Control System",
            description="Ki·ªÉm so√°t nickname c·ªßa user - t·ª± ƒë·ªông kh√¥i ph·ª•c khi h·ªç ƒë·ªïi t√™n",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="üìã L·ªánh qu·∫£n l√Ω",
            value=(
                "`;nicklock @user <nickname>` - Kh√≥a nickname c·ªë ƒë·ªãnh\n"
                "`;nicklock @user remove` - G·ª° b·ªè kh√≥a\n"
                "`;nicklock list` - Xem danh s√°ch user b·ªã kh√≥a"
            ),
            inline=False
        )
        
        embed.add_field(
            name="‚ö° T√≠nh nƒÉng t·ª± ƒë·ªông",
            value=(
                "‚Ä¢ T·ª± ƒë·ªông kh√¥i ph·ª•c nickname khi user thay ƒë·ªïi\n"
                "‚Ä¢ Ho·∫°t ƒë·ªông ngay l·∫≠p t·ª©c khi ph√°t hi·ªán thay ƒë·ªïi\n"
                "‚Ä¢ L∆∞u tr·ªØ nickname g·ªëc ƒë·ªÉ backup"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîí B·∫£o m·∫≠t",
            value=(
                "‚Ä¢ Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng\n"
                "‚Ä¢ Kh√¥ng th·ªÉ ki·ªÉm so√°t Admin kh√°c\n"
                "‚Ä¢ Kh√¥ng th·ªÉ t·ª± ki·ªÉm so√°t b·∫£n th√¢n"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üìù V√≠ d·ª• s·ª≠ d·ª•ng",
            value=(
                "`;nicklock @user Helper Bot` - Kh√≥a nickname c·ªë ƒë·ªãnh\n"
                "`;nicklock @user remove` - G·ª° b·ªè kh√≥a\n"
                "`;nicklock list` - Xem danh s√°ch"
            ),
            inline=False
        )
        
        embed.add_field(
            name="‚ö†Ô∏è L∆∞u √Ω",
            value=(
                "‚Ä¢ Bot c·∫ßn quy·ªÅn 'Manage Nicknames'\n"
                "‚Ä¢ Role bot ph·∫£i cao h∆°n role c·ªßa user\n"
                "‚Ä¢ Nickname t·ªëi ƒëa 32 k√Ω t·ª±"
            ),
            inline=False
        )
        
        await ctx.reply(embed=embed, mention_author=True)
    
    async def handle_member_update(self, before, after):
        """Handle member update events to restore controlled nicknames"""
        # Ch·ªâ x·ª≠ l√Ω thay ƒë·ªïi nickname
        if before.display_name == after.display_name:
            return
        
        user_id = str(after.id)
        
        # Ki·ªÉm tra user c√≥ ƒë∆∞·ª£c ki·ªÉm so√°t kh√¥ng
        if user_id not in self.controlled_users:
            return
        
        user_data = self.controlled_users[user_id]
        controlled_nickname = user_data.get('controlled_nickname')
        
        # N·∫øu nickname hi·ªán t·∫°i kh√¥ng ph·∫£i l√† nickname ƒë∆∞·ª£c ki·ªÉm so√°t
        if after.display_name != controlled_nickname:
            try:
                # Kh√¥i ph·ª•c nickname
                await after.edit(nick=controlled_nickname, reason="Nickname control - auto restore")
                
                logger.info(f"Auto-restored nickname for {after}: {before.display_name} -> {controlled_nickname}")
                
                # G·ª≠i th√¥ng b√°o cho user (t√πy ch·ªçn)
                try:
                    embed = discord.Embed(
                        title="üè∑Ô∏è Nickname ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c",
                        description=f"Nickname c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông kh√¥i ph·ª•c v·ªÅ: **{controlled_nickname}**",
                        color=discord.Color.orange()
                    )
                    embed.add_field(
                        name="üìù Th√¥ng tin",
                        value="Nickname c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c ki·ªÉm so√°t b·ªüi Admin",
                        inline=False
                    )
                    embed.set_footer(text="Li√™n h·ªá Admin n·∫øu c·∫ßn h·ªó tr·ª£")
                    
                    await after.send(embed=embed)
                except:
                    # Kh√¥ng th·ªÉ g·ª≠i DM, b·ªè qua
                    pass
                    
            except discord.Forbidden:
                logger.warning(f"Cannot restore nickname for {after}: Missing permissions")
            except Exception as e:
                logger.error(f"Error restoring nickname for {after}: {e}")
    
    def register_commands(self):
        """Register all commands"""
        logger.info("Nickname Control commands ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω")
