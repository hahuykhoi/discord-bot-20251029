import discord
import json
import os
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class AutoReplyCommands:
    def __init__(self, bot_instance):
        self.bot_instance = bot_instance
        self.bot = bot_instance.bot
        
        # File ƒë·ªÉ l∆∞u auto-reply rules
        self.auto_reply_file = os.path.join('data', 'auto_reply_rules.json')
        self.auto_reply_rules = self.load_auto_reply_rules()
    
    def load_auto_reply_rules(self):
        """Load auto-reply rules from file"""
        if os.path.exists(self.auto_reply_file):
            try:
                with open(self.auto_reply_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"L·ªói khi load auto-reply rules: {e}")
                return {}
        return {}
    
    def save_auto_reply_rules(self):
        """Save auto-reply rules to file"""
        try:
            os.makedirs(os.path.dirname(self.auto_reply_file), exist_ok=True)
            with open(self.auto_reply_file, 'w', encoding='utf-8') as f:
                json.dump(self.auto_reply_rules, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"L·ªói khi save auto-reply rules: {e}")
    
    async def handle_auto_reply(self, message):
        """X·ª≠ l√Ω auto-reply cho tin nh·∫Øn"""
        try:
            # Kh√¥ng reply cho bot ho·∫∑c tin nh·∫Øn b·∫Øt ƒë·∫ßu b·∫±ng prefix
            if message.author.bot or message.content.startswith(';'):
                return False
            
            user_id_str = str(message.author.id)
            
            # Ki·ªÉm tra c√≥ rule cho user n√†y kh√¥ng
            if user_id_str in self.auto_reply_rules:
                rule = self.auto_reply_rules[user_id_str]
                
                # Ki·ªÉm tra rule c√≥ active kh√¥ng
                if rule.get('active', True):
                    reply_content = rule.get('content', '')
                    
                    if reply_content:
                        # T·∫°o embed reply
                        embed = discord.Embed(
                            title="ü§ñ Auto Reply",
                            description=reply_content,
                            color=discord.Color.blue(),
                            timestamp=datetime.now()
                        )
                        
                        embed.add_field(
                            name="üìù Thi·∫øt l·∫≠p b·ªüi:",
                            value=rule.get('set_by_name', 'Admin'),
                            inline=True
                        )
                        
                        embed.add_field(
                            name="‚è∞ Thi·∫øt l·∫≠p l√∫c:",
                            value=f"<t:{int(datetime.fromisoformat(rule.get('created_at', datetime.now().isoformat())).timestamp())}:R>",
                            inline=True
                        )
                        
                        embed.set_footer(
                            text=f"Auto-reply cho {message.author.display_name}",
                            icon_url=message.author.display_avatar.url
                        )
                        
                        # Reply v·ªõi mention
                        await message.reply(embed=embed, mention_author=True)
                        
                        # Log auto-reply
                        logger.info(f"Auto-replied to {message.author.name} ({message.author.id}) with: {reply_content[:50]}...")
                        
                        return True
            
            return False
            
        except Exception as e:
            logger.error(f"L·ªói trong handle_auto_reply: {e}")
            return False
    
    def register_commands(self):
        """Register auto-reply commands"""
        
        @self.bot.command(name='reply')
        async def auto_reply_command(ctx, user_id=None, *, content=None):
            """Thi·∫øt l·∫≠p auto-reply cho user - Admin only"""
            # Ki·ªÉm tra quy·ªÅn admin
            if not self.bot_instance.is_admin(ctx.author.id):
                await ctx.reply(
                    "‚ùå **Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!**",
                    mention_author=True
                )
                return
            
            # Ki·ªÉm tra parameters
            if not user_id:
                await self.show_auto_reply_help(ctx)
                return
            
            # X·ª≠ l√Ω c√°c sub-commands
            if user_id.lower() == "list":
                await self.list_auto_reply_rules(ctx)
                return
            elif user_id.lower() == "clear":
                if content:
                    await self.remove_auto_reply_rule(ctx, content)
                else:
                    await ctx.reply(
                        "‚ùå **C√°ch s·ª≠ d·ª•ng:** `;reply clear <user_id>`",
                        mention_author=True
                    )
                return
            
            # Validate user_id
            try:
                user_id_int = int(user_id)
            except ValueError:
                await ctx.reply(
                    "‚ùå **User ID kh√¥ng h·ª£p l·ªá!** Ph·∫£i l√† s·ªë.",
                    mention_author=True
                )
                return
            
            # Ki·ªÉm tra content
            if not content:
                await ctx.reply(
                    "‚ùå **Thi·∫øu n·ªôi dung reply!**\n\n"
                    "üìù **C√°ch s·ª≠ d·ª•ng:** `;reply <user_id> <n·ªôi dung>`\n"
                    "üí° **V√≠ d·ª•:** `;reply 123456789 Xin ch√†o! Bot s·∫Ω t·ª± ƒë·ªông reply tin nh·∫Øn n√†y.`",
                    mention_author=True
                )
                return
            
            # Th√™m/c·∫≠p nh·∫≠t rule
            await self.add_auto_reply_rule(ctx, user_id_int, content)
        
        @self.bot.command(name='autoreply', aliases=['areply'])
        async def auto_reply_status_command(ctx, action=None, user_id=None):
            """Qu·∫£n l√Ω tr·∫°ng th√°i auto-reply - Admin only"""
            # Ki·ªÉm tra quy·ªÅn admin
            if not self.bot_instance.is_admin(ctx.author.id):
                await ctx.reply(
                    "‚ùå **Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!**",
                    mention_author=True
                )
                return
            
            if not action:
                await self.show_auto_reply_status(ctx)
                return
            
            if action.lower() == "on" and user_id:
                await self.toggle_auto_reply(ctx, user_id, True)
            elif action.lower() == "off" and user_id:
                await self.toggle_auto_reply(ctx, user_id, False)
            elif action.lower() == "list":
                await self.list_auto_reply_rules(ctx)
            else:
                await ctx.reply(
                    "‚ùå **C√°ch s·ª≠ d·ª•ng:**\n"
                    "`;autoreply on <user_id>` - B·∫≠t auto-reply\n"
                    "`;autoreply off <user_id>` - T·∫Øt auto-reply\n"
                    "`;autoreply list` - Xem danh s√°ch rules",
                    mention_author=True
                )
    
    async def show_auto_reply_help(self, ctx):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng auto-reply"""
        embed = discord.Embed(
            title="ü§ñ AUTO-REPLY SYSTEM",
            description="H·ªá th·ªëng t·ª± ƒë·ªông reply tin nh·∫Øn cho user c·ª• th·ªÉ",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üìù Thi·∫øt l·∫≠p Auto-Reply",
            value=(
                "`;reply <user_id> <n·ªôi dung>`\n"
                "üí° **V√≠ d·ª•:** `;reply 123456789 Xin ch√†o!`"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîß Qu·∫£n l√Ω Rules",
            value=(
                "`;reply list` - Xem t·∫•t c·∫£ rules\n"
                "`;reply clear <user_id>` - X√≥a rule\n"
                "`;autoreply on/off <user_id>` - B·∫≠t/t·∫Øt rule"
            ),
            inline=False
        )
        
        embed.add_field(
            name="‚öôÔ∏è C√°ch ho·∫°t ƒë·ªông",
            value=(
                "‚Ä¢ Khi user ƒë∆∞·ª£c thi·∫øt l·∫≠p g·ª≠i tin nh·∫Øn\n"
                "‚Ä¢ Bot s·∫Ω t·ª± ƒë·ªông reply v·ªõi n·ªôi dung ƒë√£ thi·∫øt l·∫≠p\n"
                "‚Ä¢ Kh√¥ng reply cho bot ho·∫∑c l·ªánh (b·∫Øt ƒë·∫ßu b·∫±ng `;`)\n"
                "‚Ä¢ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ thi·∫øt l·∫≠p"
            ),
            inline=False
        )
        
        embed.set_footer(
            text="Auto-Reply System ‚Ä¢ Admin Only",
            icon_url=ctx.author.display_avatar.url
        )
        
        await ctx.reply(embed=embed, mention_author=True)
    
    async def add_auto_reply_rule(self, ctx, user_id, content):
        """Th√™m/c·∫≠p nh·∫≠t auto-reply rule"""
        try:
            # L·∫•y th√¥ng tin user
            try:
                user = await self.bot.fetch_user(user_id)
                user_name = user.display_name
            except:
                user_name = f"User {user_id}"
            
            user_id_str = str(user_id)
            
            # T·∫°o rule m·ªõi
            rule = {
                'content': content,
                'active': True,
                'created_at': datetime.now().isoformat(),
                'set_by_id': ctx.author.id,
                'set_by_name': ctx.author.display_name,
                'target_user_name': user_name
            }
            
            # L∆∞u rule
            self.auto_reply_rules[user_id_str] = rule
            self.save_auto_reply_rules()
            
            # T·∫°o embed th√¥ng b√°o
            embed = discord.Embed(
                title="‚úÖ Auto-Reply ƒê√£ Thi·∫øt L·∫≠p",
                description=f"ƒê√£ thi·∫øt l·∫≠p auto-reply cho **{user_name}**",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üë§ Target User:",
                value=f"{user_name} (`{user_id}`)",
                inline=True
            )
            
            embed.add_field(
                name="üìù N·ªôi dung reply:",
                value=f"```{content[:200]}{'...' if len(content) > 200 else ''}```",
                inline=False
            )
            
            embed.add_field(
                name="‚öôÔ∏è Tr·∫°ng th√°i:",
                value="üü¢ Active",
                inline=True
            )
            
            embed.add_field(
                name="üëë Thi·∫øt l·∫≠p b·ªüi:",
                value=ctx.author.mention,
                inline=True
            )
            
            embed.set_footer(
                text="Auto-Reply Rule Created",
                icon_url=ctx.author.display_avatar.url
            )
            
            await ctx.reply(embed=embed, mention_author=True)
            
            logger.info(f"Auto-reply rule created for {user_id} by {ctx.author.name}")
            
        except Exception as e:
            logger.error(f"L·ªói khi th√™m auto-reply rule: {e}")
            await ctx.reply(
                f"‚ùå **C√≥ l·ªói x·∫£y ra:** {str(e)}",
                mention_author=True
            )
    
    async def list_auto_reply_rules(self, ctx):
        """Hi·ªÉn th·ªã danh s√°ch auto-reply rules"""
        if not self.auto_reply_rules:
            embed = discord.Embed(
                title="üìã Auto-Reply Rules",
                description="Hi·ªán t·∫°i kh√¥ng c√≥ rule n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p!",
                color=discord.Color.blue()
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        embed = discord.Embed(
            title="üìã DANH S√ÅCH AUTO-REPLY RULES",
            description=f"C√≥ **{len(self.auto_reply_rules)}** rules ƒë∆∞·ª£c thi·∫øt l·∫≠p",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        for i, (user_id, rule) in enumerate(self.auto_reply_rules.items(), 1):
            if i > 10:  # Ch·ªâ hi·ªÉn th·ªã 10 rules ƒë·∫ßu ti√™n
                embed.add_field(
                    name="‚ö†Ô∏è Th√¥ng b√°o",
                    value=f"C√≤n {len(self.auto_reply_rules) - 10} rules kh√°c...",
                    inline=False
                )
                break
            
            status = "üü¢ Active" if rule.get('active', True) else "üî¥ Inactive"
            content_preview = rule.get('content', '')[:50]
            if len(rule.get('content', '')) > 50:
                content_preview += "..."
            
            embed.add_field(
                name=f"üë§ {rule.get('target_user_name', f'User {user_id}')}",
                value=(
                    f"**ID:** `{user_id}`\n"
                    f"**Content:** {content_preview}\n"
                    f"**Status:** {status}\n"
                    f"**Set by:** {rule.get('set_by_name', 'Unknown')}"
                ),
                inline=True
            )
        
        embed.add_field(
            name="üí° Qu·∫£n l√Ω:",
            value=(
                "`;reply clear <user_id>` - X√≥a rule\n"
                "`;autoreply on/off <user_id>` - B·∫≠t/t·∫Øt rule"
            ),
            inline=False
        )
        
        embed.set_footer(text="Auto-Reply Rules Management")
        
        await ctx.reply(embed=embed, mention_author=True)
    
    async def remove_auto_reply_rule(self, ctx, user_id):
        """X√≥a auto-reply rule"""
        try:
            user_id_int = int(user_id)
            user_id_str = str(user_id_int)
            
            if user_id_str not in self.auto_reply_rules:
                await ctx.reply(
                    f"‚ùå **Kh√¥ng t√¨m th·∫•y auto-reply rule cho user ID `{user_id}`**",
                    mention_author=True
                )
                return
            
            # L·∫•y th√¥ng tin rule tr∆∞·ªõc khi x√≥a
            rule = self.auto_reply_rules[user_id_str]
            user_name = rule.get('target_user_name', f'User {user_id}')
            
            # X√≥a rule
            del self.auto_reply_rules[user_id_str]
            self.save_auto_reply_rules()
            
            embed = discord.Embed(
                title="üóëÔ∏è Auto-Reply Rule ƒê√£ X√≥a",
                description=f"ƒê√£ x√≥a auto-reply rule cho **{user_name}**",
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üë§ User:",
                value=f"{user_name} (`{user_id}`)",
                inline=True
            )
            
            embed.add_field(
                name="üóëÔ∏è X√≥a b·ªüi:",
                value=ctx.author.mention,
                inline=True
            )
            
            await ctx.reply(embed=embed, mention_author=True)
            
            logger.info(f"Auto-reply rule removed for {user_id} by {ctx.author.name}")
            
        except ValueError:
            await ctx.reply(
                "‚ùå **User ID kh√¥ng h·ª£p l·ªá!** Ph·∫£i l√† s·ªë.",
                mention_author=True
            )
        except Exception as e:
            logger.error(f"L·ªói khi x√≥a auto-reply rule: {e}")
            await ctx.reply(
                f"‚ùå **C√≥ l·ªói x·∫£y ra:** {str(e)}",
                mention_author=True
            )
    
    async def toggle_auto_reply(self, ctx, user_id, active):
        """B·∫≠t/t·∫Øt auto-reply rule"""
        try:
            user_id_int = int(user_id)
            user_id_str = str(user_id_int)
            
            if user_id_str not in self.auto_reply_rules:
                await ctx.reply(
                    f"‚ùå **Kh√¥ng t√¨m th·∫•y auto-reply rule cho user ID `{user_id}`**",
                    mention_author=True
                )
                return
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i
            self.auto_reply_rules[user_id_str]['active'] = active
            self.save_auto_reply_rules()
            
            rule = self.auto_reply_rules[user_id_str]
            user_name = rule.get('target_user_name', f'User {user_id}')
            status_text = "üü¢ ƒê√£ b·∫≠t" if active else "üî¥ ƒê√£ t·∫Øt"
            
            embed = discord.Embed(
                title=f"‚öôÔ∏è Auto-Reply {status_text}",
                description=f"{status_text} auto-reply cho **{user_name}**",
                color=discord.Color.green() if active else discord.Color.red(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üë§ User:",
                value=f"{user_name} (`{user_id}`)",
                inline=True
            )
            
            embed.add_field(
                name="‚öôÔ∏è Tr·∫°ng th√°i:",
                value=status_text,
                inline=True
            )
            
            await ctx.reply(embed=embed, mention_author=True)
            
            logger.info(f"Auto-reply rule {'enabled' if active else 'disabled'} for {user_id} by {ctx.author.name}")
            
        except ValueError:
            await ctx.reply(
                "‚ùå **User ID kh√¥ng h·ª£p l·ªá!** Ph·∫£i l√† s·ªë.",
                mention_author=True
            )
        except Exception as e:
            logger.error(f"L·ªói khi toggle auto-reply rule: {e}")
            await ctx.reply(
                f"‚ùå **C√≥ l·ªói x·∫£y ra:** {str(e)}",
                mention_author=True
            )
    
    async def show_auto_reply_status(self, ctx):
        """Hi·ªÉn th·ªã t·ªïng quan auto-reply system"""
        total_rules = len(self.auto_reply_rules)
        active_rules = sum(1 for rule in self.auto_reply_rules.values() if rule.get('active', True))
        inactive_rules = total_rules - active_rules
        
        embed = discord.Embed(
            title="üìä AUTO-REPLY SYSTEM STATUS",
            description="T·ªïng quan h·ªá th·ªëng auto-reply",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üìà Th·ªëng k√™:",
            value=(
                f"üìã **T·ªïng rules:** {total_rules}\n"
                f"üü¢ **Active:** {active_rules}\n"
                f"üî¥ **Inactive:** {inactive_rules}"
            ),
            inline=True
        )
        
        embed.add_field(
            name="üîß Qu·∫£n l√Ω:",
            value=(
                "`;reply list` - Xem t·∫•t c·∫£ rules\n"
                "`;autoreply on/off <id>` - B·∫≠t/t·∫Øt\n"
                "`;reply clear <id>` - X√≥a rule"
            ),
            inline=True
        )
        
        if total_rules > 0:
            # Hi·ªÉn th·ªã 3 rules g·∫ßn nh·∫•t
            recent_rules = list(self.auto_reply_rules.items())[-3:]
            recent_text = ""
            for user_id, rule in recent_rules:
                status = "üü¢" if rule.get('active', True) else "üî¥"
                user_name = rule.get('target_user_name', f'User {user_id}')
                recent_text += f"{status} {user_name}\n"
            
            embed.add_field(
                name="üìù Rules g·∫ßn nh·∫•t:",
                value=recent_text,
                inline=False
            )
        
        embed.set_footer(
            text="Auto-Reply System ‚Ä¢ Admin Only",
            icon_url=ctx.author.display_avatar.url
        )
        
        await ctx.reply(embed=embed, mention_author=True)
