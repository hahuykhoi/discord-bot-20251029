"""
Spotify music commands for Discord bot
"""
import discord
from discord.ext import commands
import logging
import re
import asyncio
import aiohttp
from datetime import datetime, timedelta
from .base import BaseCommand

logger = logging.getLogger(__name__)

class SpotifyCommands(BaseCommand):
    """Class ch·ª©a c√°c commands li√™n quan ƒë·∫øn Spotify"""
    
    def __init__(self, bot_instance):
        super().__init__(bot_instance)
        self.current_music_task = None
        self.current_track_info = None
    
    def register_commands(self):
        """Register Spotify commands"""
        
        @self.bot.command(name='spotify')
        async def spotify_command(ctx, *, spotify_url: str = None):
            """
            Hi·ªÉn th·ªã bot ƒëang nghe nh·∫°c tr√™n Spotify (Admin only)
            
            Usage: ;spotify <spotify_url>
            Example: ;spotify https://open.spotify.com/track/4iV5W9uYEdYUVa79Axb7Rh
            """
            # Ki·ªÉm tra quy·ªÅn s·ª≠ d·ª•ng dynamic permission system
            if hasattr(self.bot_instance, 'permission_manager'):
                has_permission, user_level = self.bot_instance.permission_manager.check_command_permission(ctx, 'spotify')
                if not has_permission:
                    embed = discord.Embed(
                        title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                        description="B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh Spotify!",
                        color=discord.Color.red()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
            else:
                # Fallback: Ki·ªÉm tra quy·ªÅn admin n·∫øu kh√¥ng c√≥ permission system
                if not self.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                    embed = discord.Embed(
                        title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                        description="Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh Spotify!",
                        color=discord.Color.red()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
            
            if spotify_url is None:
                await self._show_spotify_help(ctx)
                return
            
            # Validate Spotify URL
            if not self._is_valid_spotify_url(spotify_url):
                embed = discord.Embed(
                    title="‚ùå URL kh√¥ng h·ª£p l·ªá",
                    description="Vui l√≤ng cung c·∫•p URL Spotify h·ª£p l·ªá!",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="üìù ƒê·ªãnh d·∫°ng ƒë√∫ng",
                    value="‚Ä¢ `https://open.spotify.com/track/...`\n‚Ä¢ `https://open.spotify.com/album/...`\n‚Ä¢ `https://open.spotify.com/playlist/...`",
                    inline=False
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Extract info from Spotify URL
            spotify_info = await self._get_spotify_track_info(spotify_url)
            
            if not spotify_info:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin",
                    description="Kh√¥ng th·ªÉ l·∫•y th√¥ng tin b√†i h√°t t·ª´ Spotify!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            try:
                # Cancel previous music task if exists
                if self.current_music_task and not self.current_music_task.done():
                    self.current_music_task.cancel()
                
                # Set bot activity to show listening to Spotify
                activity = discord.Activity(
                    type=discord.ActivityType.listening,
                    name=f"{spotify_info['name']} - {spotify_info['artist']}",
                    url=spotify_url
                )
                await self.bot.change_presence(activity=activity)
                
                # Store current track info
                self.current_track_info = spotify_info
                
                # Calculate end time (default 3 minutes if duration not available)
                duration_minutes = spotify_info.get('duration_minutes', 3)
                end_time = datetime.now() + timedelta(minutes=duration_minutes)
                
                # Send confirmation embed
                embed = discord.Embed(
                    title="üéµ Bot ƒëang nghe nh·∫°c tr√™n Spotify",
                    description=f"**{spotify_info['name']}**\nby {spotify_info['artist']}",
                    color=0x1DB954,  # Spotify green color
                    url=spotify_url
                )
                
                embed.add_field(
                    name="üéß Lo·∫°i",
                    value=spotify_info['type'].title(),
                    inline=True
                )
                
                embed.add_field(
                    name="‚è±Ô∏è Th·ªùi l∆∞·ª£ng",
                    value=f"~{duration_minutes} ph√∫t",
                    inline=True
                )
                
                embed.add_field(
                    name="üïê K·∫øt th√∫c l√∫c",
                    value=f"<t:{int(end_time.timestamp())}:t>",
                    inline=True
                )
                
                embed.add_field(
                    name="üîó Link",
                    value=f"[M·ªü tr√™n Spotify]({spotify_url})",
                    inline=True
                )
                
                embed.add_field(
                    name="üë§ ƒê∆∞·ª£c ƒë·∫∑t b·ªüi",
                    value=ctx.author.mention,
                    inline=True
                )
                
                if spotify_info.get('image_url'):
                    embed.set_thumbnail(url=spotify_info['image_url'])
                else:
                    embed.set_thumbnail(url="https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_CMYK_Green.png")
                
                embed.set_footer(
                    text="üéµ Bot s·∫Ω t·ª± ƒë·ªông d·ª´ng khi b√†i h√°t k·∫øt th√∫c",
                    icon_url=ctx.author.avatar.url if ctx.author.avatar else None
                )
                
                await ctx.reply(embed=embed, mention_author=True)
                
                # Start auto-stop task
                self.current_music_task = asyncio.create_task(
                    self._auto_stop_music(duration_minutes * 60, ctx.channel)
                )
                
                logger.info(f"Spotify activity set by {ctx.author}: {spotify_info['name']} - {spotify_info['artist']} ({spotify_url}) for {duration_minutes} minutes")
                
            except Exception as e:
                logger.error(f"Error setting Spotify activity: {e}")
                embed = discord.Embed(
                    title="‚ùå L·ªói",
                    description="C√≥ l·ªói x·∫£y ra khi thi·∫øt l·∫≠p tr·∫°ng th√°i Spotify!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
        
        @self.bot.command(name='stopmusic')
        async def stop_music_command(ctx):
            """
            D·ª´ng hi·ªÉn th·ªã tr·∫°ng th√°i nghe nh·∫°c (Admin only)
            
            Usage: ;stopmusic
            """
            # Ki·ªÉm tra quy·ªÅn s·ª≠ d·ª•ng dynamic permission system
            if hasattr(self.bot_instance, 'permission_manager'):
                has_permission, user_level = self.bot_instance.permission_manager.check_command_permission(ctx, 'stopmusic')
                if not has_permission:
                    embed = discord.Embed(
                        title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                        description="B·∫°n kh√¥ng c√≥ quy·ªÅn d·ª´ng nh·∫°c!",
                        color=discord.Color.red()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
            else:
                # Fallback: Ki·ªÉm tra quy·ªÅn admin n·∫øu kh√¥ng c√≥ permission system
                if not self.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                    embed = discord.Embed(
                        title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                        description="Ch·ªâ admin m·ªõi c√≥ th·ªÉ d·ª´ng nh·∫°c!",
                        color=discord.Color.red()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
            
            try:
                # Cancel current music task
                if self.current_music_task and not self.current_music_task.done():
                    self.current_music_task.cancel()
                
                # Clear bot activity
                await self.bot.change_presence(activity=None)
                
                track_name = ""
                if self.current_track_info:
                    track_name = f" ({self.current_track_info['name']})"
                
                embed = discord.Embed(
                    title="‚èπÔ∏è ƒê√£ d·ª´ng hi·ªÉn th·ªã nh·∫°c",
                    description=f"Bot kh√¥ng c√≤n hi·ªÉn th·ªã tr·∫°ng th√°i nghe nh·∫°c n·ªØa{track_name}.",
                    color=discord.Color.blue()
                )
                embed.add_field(
                    name="üë§ ƒê∆∞·ª£c d·ª´ng b·ªüi",
                    value=ctx.author.mention,
                    inline=True
                )
                
                await ctx.reply(embed=embed, mention_author=True)
                logger.info(f"Spotify activity cleared by {ctx.author}")
                
                # Clear stored info
                self.current_track_info = None
                
            except Exception as e:
                logger.error(f"Error clearing activity: {e}")
                embed = discord.Embed(
                    title="‚ùå L·ªói",
                    description="C√≥ l·ªói x·∫£y ra khi d·ª´ng tr·∫°ng th√°i nh·∫°c!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
    
    def _is_valid_spotify_url(self, url: str) -> bool:
        """Ki·ªÉm tra URL Spotify c√≥ h·ª£p l·ªá kh√¥ng"""
        spotify_pattern = r'https://open\.spotify\.com/(track|album|playlist|artist)/[a-zA-Z0-9]+'
        return bool(re.match(spotify_pattern, url))
    
    async def _get_spotify_track_info(self, url: str) -> dict:
        """L·∫•y th√¥ng tin chi ti·∫øt t·ª´ Spotify URL"""
        # Extract type and ID from URL
        match = re.search(r'https://open\.spotify\.com/(\w+)/([a-zA-Z0-9]+)', url)
        if not match:
            return None
        
        content_type = match.group(1)
        content_id = match.group(2)
        
        # For now, return basic info with estimated duration
        # In a real implementation, you would use Spotify API
        type_names = {
            'track': 'B√†i h√°t',
            'album': 'Album', 
            'playlist': 'Playlist',
            'artist': 'Ngh·ªá sƒ©'
        }
        
        # Simulate getting track info (in real app, use Spotify Web API)
        return {
            'type': type_names.get(content_type, content_type),
            'name': f"Spotify {type_names.get(content_type, 'Track')}",
            'artist': "Unknown Artist",
            'duration_minutes': 3,  # Default 3 minutes
            'id': content_id,
            'image_url': None
        }
    
    async def _auto_stop_music(self, duration_seconds: int, channel):
        """T·ª± ƒë·ªông d·ª´ng nh·∫°c sau th·ªùi gian nh·∫•t ƒë·ªãnh"""
        try:
            await asyncio.sleep(duration_seconds)
            
            # Clear bot activity
            await self.bot.change_presence(activity=None)
            
            # Send notification
            if self.current_track_info:
                embed = discord.Embed(
                    title="üéµ B√†i h√°t ƒë√£ k·∫øt th√∫c",
                    description=f"**{self.current_track_info['name']}** ƒë√£ ph√°t xong.\nBot ƒë√£ t·ª± ƒë·ªông d·ª´ng hi·ªÉn th·ªã tr·∫°ng th√°i nh·∫°c.",
                    color=0x1DB954
                )
                await channel.send(embed=embed)
                logger.info(f"Auto-stopped Spotify activity: {self.current_track_info['name']}")
            
            # Clear stored info
            self.current_track_info = None
            
        except asyncio.CancelledError:
            logger.info("Auto-stop music task was cancelled")
        except Exception as e:
            logger.error(f"Error in auto-stop music task: {e}")
    
    def _extract_spotify_info(self, url: str) -> dict:
        """Tr√≠ch xu·∫•t th√¥ng tin c∆° b·∫£n t·ª´ URL Spotify (legacy method)"""
        # Extract type and ID from URL
        match = re.search(r'https://open\.spotify\.com/(\w+)/([a-zA-Z0-9]+)', url)
        if match:
            content_type = match.group(1)
            content_id = match.group(2)
            
            # Generate a display name based on type
            type_names = {
                'track': 'B√†i h√°t',
                'album': 'Album', 
                'playlist': 'Playlist',
                'artist': 'Ngh·ªá sƒ©'
            }
            
            return {
                'type': type_names.get(content_type, content_type),
                'name': f"{type_names.get(content_type, 'N·ªôi dung')} Spotify",
                'id': content_id
            }
        
        return {
            'type': 'Nh·∫°c',
            'name': 'Spotify Music',
            'id': 'unknown'
        }
    
    async def _show_spotify_help(self, ctx):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh Spotify"""
        embed = discord.Embed(
            title="üéµ L·ªánh Spotify",
            description="Hi·ªÉn th·ªã bot ƒëang nghe nh·∫°c tr√™n Spotify",
            color=0x1DB954
        )
        
        embed.add_field(
            name="üìù C√°ch s·ª≠ d·ª•ng",
            value=(
                "`/spotify <spotify_url>` - ƒê·∫∑t tr·∫°ng th√°i nghe nh·∫°c\n"
                "`/stopmusic` - D·ª´ng hi·ªÉn th·ªã tr·∫°ng th√°i nh·∫°c"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîó URL h·ªó tr·ª£",
            value=(
                "‚Ä¢ Track: `https://open.spotify.com/track/...`\n"
                "‚Ä¢ Album: `https://open.spotify.com/album/...`\n"
                "‚Ä¢ Playlist: `https://open.spotify.com/playlist/...`\n"
                "‚Ä¢ Artist: `https://open.spotify.com/artist/...`"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üí° V√≠ d·ª•",
            value="`/spotify https://open.spotify.com/track/4iV5W9uYEdYUVa79Axb7Rh`",
            inline=False
        )
        
        embed.add_field(
            name="üîí Quy·ªÅn h·∫°n",
            value="Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng",
            inline=False
        )
        
        embed.add_field(
            name="‚è∞ T·ª± ƒë·ªông d·ª´ng",
            value="Bot s·∫Ω t·ª± ƒë·ªông d·ª´ng hi·ªÉn th·ªã nh·∫°c khi b√†i h√°t k·∫øt th√∫c (~3 ph√∫t)",
            inline=False
        )
        
        embed.set_thumbnail(url="https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_CMYK_Green.png")
        
        await ctx.reply(embed=embed, mention_author=True)
