"""
Video commands - G·ª≠i video v√†o k√™nh
"""
import discord
from discord.ext import commands
import logging
import os
import asyncio
import aiohttp
import aiofiles
from datetime import datetime
from urllib.parse import urlparse
import re
from .base import BaseCommand

logger = logging.getLogger(__name__)

class VideoCommands(BaseCommand):
    """Class ch·ª©a c√°c commands video"""
    
    def __init__(self, bot_instance):
        super().__init__(bot_instance)
        self.videos_dir = "videos"
        # T·∫°o th∆∞ m·ª•c videos n·∫øu ch∆∞a t·ªìn t·∫°i
        if not os.path.exists(self.videos_dir):
            os.makedirs(self.videos_dir)
            logger.info(f"ƒê√£ t·∫°o th∆∞ m·ª•c {self.videos_dir}")
    
    def register_commands(self):
        """Register video commands"""
        
        @self.bot.group(name='video', invoke_without_command=True)
        async def video_group(ctx, *, video_name: str = None):
            """
            G·ª≠i video v√†o k√™nh hi·ªán t·∫°i
            
            Usage: ;video <t√™n video>
            """
            await self._send_video_impl(ctx, video_name)
        
        @video_group.command(name='add')
        async def add_video(ctx, url: str, *, filename: str = None):
            """
            T·∫£i video t·ª´ URL v√† l∆∞u v√†o th∆∞ m·ª•c videos
            
            Usage: ;video add <URL> <t√™n file>
            """
            await self._add_video_impl(ctx, url, filename)
        
        @self.bot.command(name='listvideo', aliases=['videos'])
        async def list_videos(ctx):
            """
            Hi·ªÉn th·ªã danh s√°ch video c√≥ s·∫µn
            
            Usage: ;listvideo ho·∫∑c ;videos
            """
            await self._list_videos_impl(ctx)
    
    async def _send_video_impl(self, ctx, video_name: str):
        """
        Implementation th·ª±c t·∫ø c·ªßa video command
        """
        # Ki·ªÉm tra quy·ªÅn g·ª≠i file
        if not ctx.channel.permissions_for(ctx.guild.me).attach_files:
            await ctx.reply(
                f"{ctx.author.mention} ‚ùå Bot kh√¥ng c√≥ quy·ªÅn g·ª≠i file trong k√™nh n√†y!",
                mention_author=True
            )
            return
        
        if not video_name:
            await ctx.reply(
                f"{ctx.author.mention} ‚ùå Vui l√≤ng cung c·∫•p t√™n video!\n"
                f"S·ª≠ d·ª•ng: ; <t√™n video>`\n"
                f"Xem danh s√°ch video: ;`",
                mention_author=True
            )
            return
        
        # T√¨m file video
        video_file = await self._find_video_file(video_name)
        
        if not video_file:
            # Hi·ªÉn th·ªã danh s√°ch video c√≥ s·∫µn n·∫øu kh√¥ng t√¨m th·∫•y
            available_videos = await self._get_available_videos()
            if available_videos:
                # Hi·ªÉn th·ªã t·ªëi ƒëa 20 video trong th√¥ng b√°o l·ªói
                max_display = 20
                video_list = "\n".join([f"‚Ä¢ `{video}`" for video in available_videos[:max_display]])
                if len(available_videos) > max_display:
                    video_list += f"\n... v√† {len(available_videos) - max_display} video kh√°c"
                
                await ctx.reply(
                    f"{ctx.author.mention} ‚ùå Kh√¥ng t√¨m th·∫•y video `{video_name}`!\n\n"
                    f"**Video c√≥ s·∫µn:**\n{video_list}\n\n"
                    f"S·ª≠ d·ª•ng ;` ƒë·ªÉ xem t·∫•t c·∫£ video.",
                    mention_author=True
                )
            else:
                await ctx.reply(
                    f"{ctx.author.mention} ‚ùå Kh√¥ng t√¨m th·∫•y video `{video_name}`!\n"
                    f"Th∆∞ m·ª•c video hi·ªán ƒëang tr·ªëng. Vui l√≤ng th√™m video v√†o th∆∞ m·ª•c `{self.videos_dir}/`",
                    mention_author=True
                )
            return
        
        # Ki·ªÉm tra k√≠ch th∆∞·ªõc file (Discord limit 25MB cho server th∆∞·ªùng)
        file_size = os.path.getsize(video_file)
        max_size = 25 * 1024 * 1024  # 25MB
        
        if file_size > max_size:
            await ctx.reply(
                f"{ctx.author.mention} ‚ùå Video `{os.path.basename(video_file)}` qu√° l·ªõn! "
                f"K√≠ch th∆∞·ªõc: {file_size / (1024*1024):.1f}MB (T·ªëi ƒëa: 25MB)",
                mention_author=True
            )
            return
        
        # G·ª≠i video
        try:
            async with ctx.typing():
                # G·ª≠i ch·ªâ file video, kh√¥ng c√≥ embed
                with open(video_file, 'rb') as f:
                    discord_file = discord.File(f, filename=os.path.basename(video_file))
                    await ctx.send(file=discord_file)
                
                logger.info(f"Video {os.path.basename(video_file)} sent by {ctx.author} in {ctx.guild.name}#{ctx.channel.name}")
                
                # X√≥a tin nh·∫Øn l·ªánh g·ªëc ƒë·ªÉ gi·ªØ k√™nh s·∫°ch s·∫Ω
                try:
                    await ctx.message.delete()
                except discord.NotFound:
                    pass  # Tin nh·∫Øn ƒë√£ b·ªã x√≥a
                except discord.Forbidden:
                    pass  # Kh√¥ng c√≥ quy·ªÅn x√≥a
                
        except discord.HTTPException as e:
            if "Request entity too large" in str(e):
                await ctx.reply(
                    f"{ctx.author.mention} ‚ùå File qu√° l·ªõn ƒë·ªÉ upload l√™n Discord!",
                    mention_author=True
                )
            else:
                await ctx.reply(
                    f"{ctx.author.mention} ‚ùå L·ªói khi g·ª≠i video: {str(e)[:100]}",
                    mention_author=True
                )
        except Exception as e:
            logger.error(f"Error sending video {video_file}: {e}")
            await ctx.reply(
                f"{ctx.author.mention} ‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i video: {str(e)[:100]}",
                mention_author=True
            )
    
    async def _list_videos_impl(self, ctx):
        """
        Implementation th·ª±c t·∫ø c·ªßa listvideo command
        """
        available_videos = await self._get_available_videos()
        
        if not available_videos:
            await ctx.reply(
                f"{ctx.author.mention} üìÅ Th∆∞ m·ª•c video hi·ªán ƒëang tr·ªëng!\n"
                f"Vui l√≤ng th√™m video v√†o th∆∞ m·ª•c `{self.videos_dir}/` ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh ;`",
                mention_author=True
            )
            return
        
        # T·∫°o embed danh s√°ch video
        embed = discord.Embed(
            title="üé¨ Danh s√°ch Video c√≥ s·∫µn",
            description=f"T·ªïng c·ªông: **{len(available_videos)}** video",
            color=discord.Color.purple(),
            timestamp=datetime.now()
        )
        
        # T·∫°o danh s√°ch t·∫•t c·∫£ video v·ªõi th√¥ng tin file
        video_list = []
        for i, video in enumerate(available_videos, 1):
            video_path = os.path.join(self.videos_dir, video)
            try:
                file_size = os.path.getsize(video_path)
                size_mb = file_size / (1024 * 1024)
                video_list.append(f"`{i}.` **{video}** ({size_mb:.1f}MB)")
            except:
                video_list.append(f"`{i}.` **{video}** (L·ªói ƒë·ªçc file)")
        
        # Discord embed field c√≥ gi·ªõi h·∫°n 1024 k√Ω t·ª± m·ªói field
        # Chia video th√†nh nhi·ªÅu field n·∫øu c·∫ßn thi·∫øt
        max_chars_per_field = 1000  # ƒê·ªÉ l·∫°i ch√∫t buffer
        current_field_content = ""
        field_number = 1
        
        for video_line in video_list:
            # Ki·ªÉm tra n·∫øu th√™m video n√†y v√†o field hi·ªán t·∫°i c√≥ v∆∞·ª£t qu√° gi·ªõi h·∫°n kh√¥ng
            if len(current_field_content + video_line + "\n") > max_chars_per_field:
                # Th√™m field hi·ªán t·∫°i v√†o embed
                if current_field_content:
                    embed.add_field(
                        name=f"üìã Video (Ph·∫ßn {field_number})" if field_number > 1 else "üìã Danh s√°ch Video",
                        value=current_field_content.strip(),
                        inline=False
                    )
                    field_number += 1
                    current_field_content = ""
            
            current_field_content += video_line + "\n"
        
        # Th√™m field cu·ªëi c√πng n·∫øu c√≤n content
        if current_field_content:
            embed.add_field(
                name=f"üìã Video (Ph·∫ßn {field_number})" if field_number > 1 else "üìã Danh s√°ch Video",
                value=current_field_content.strip(),
                inline=False
            )
        
        # Th√™m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        embed.add_field(
            name="üí° C√°ch s·ª≠ d·ª•ng",
            value="S·ª≠ d·ª•ng ; <t√™n video>` ƒë·ªÉ g·ª≠i video v√†o k√™nh",
            inline=False
        )
        
        embed.set_footer(
            text=f"Y√™u c·∫ßu b·ªüi {ctx.author}",
            icon_url=ctx.author.display_avatar.url
        )
        
        await ctx.reply(embed=embed, mention_author=True)
        logger.info(f"Video list requested by {ctx.author} in {ctx.guild.name}#{ctx.channel.name}")
    
    async def _find_video_file(self, video_name: str) -> str:
        """
        T√¨m file video theo t√™n (h·ªó tr·ª£ t√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng v√† kh√¥ng c·∫ßn ƒëu√¥i file)
        """
        if not os.path.exists(self.videos_dir):
            return None
        
        # Danh s√°ch c√°c ƒë·ªãnh d·∫°ng video ƒë∆∞·ª£c h·ªó tr·ª£
        video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm', '.m4v']
        
        # T√¨m ki·∫øm ch√≠nh x√°c tr∆∞·ªõc
        for ext in video_extensions:
            # Th·ª≠ v·ªõi t√™n g·ªëc
            exact_match = os.path.join(self.videos_dir, video_name)
            if os.path.isfile(exact_match):
                return exact_match
            
            # Th·ª≠ v·ªõi t√™n + extension
            with_ext = os.path.join(self.videos_dir, video_name + ext)
            if os.path.isfile(with_ext):
                return with_ext
        
        # T√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
        try:
            files = os.listdir(self.videos_dir)
            video_name_lower = video_name.lower()
            
            for file in files:
                file_lower = file.lower()
                file_name_no_ext = os.path.splitext(file_lower)[0]
                
                # Ki·ªÉm tra xem c√≥ ph·∫£i file video kh√¥ng
                if any(file_lower.endswith(ext) for ext in video_extensions):
                    # T√¨m ki·∫øm theo t√™n file ƒë·∫ßy ƒë·ªß
                    if file_lower == video_name_lower:
                        return os.path.join(self.videos_dir, file)
                    
                    # T√¨m ki·∫øm theo t√™n kh√¥ng c√≥ extension
                    if file_name_no_ext == video_name_lower:
                        return os.path.join(self.videos_dir, file)
                    
                    # T√¨m ki·∫øm ch·ª©a t·ª´ kh√≥a
                    if video_name_lower in file_name_no_ext:
                        return os.path.join(self.videos_dir, file)
        
        except Exception as e:
            logger.error(f"Error searching for video file: {e}")
        
        return None
    
    async def _get_available_videos(self) -> list:
        """
        L·∫•y danh s√°ch video c√≥ s·∫µn
        """
        if not os.path.exists(self.videos_dir):
            return []
        
        video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm', '.m4v']
        videos = []
        
        try:
            for file in os.listdir(self.videos_dir):
                if any(file.lower().endswith(ext) for ext in video_extensions):
                    videos.append(file)
            
            # S·∫Øp x·∫øp theo t√™n
            videos.sort()
            
        except Exception as e:
            logger.error(f"Error listing videos: {e}")
        
        return videos
    
    async def _add_video_impl(self, ctx, url: str, filename: str = None):
        """
        Implementation th·ª±c t·∫ø c·ªßa video add command
        """
        # Ki·ªÉm tra quy·ªÅn s·ª≠ d·ª•ng dynamic permission system
        if hasattr(self.bot_instance, 'permission_manager'):
            has_permission, user_level = self.bot_instance.permission_manager.check_command_permission(ctx, 'video')
            if not has_permission:
                await ctx.reply(
                    f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m video!",
                    mention_author=True
                )
                return
        else:
            # Fallback: Ki·ªÉm tra quy·ªÅn admin n·∫øu kh√¥ng c√≥ permission system
            if not self.bot_instance.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                await ctx.reply(
                    f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m video! "
                    f"Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
                    mention_author=True
                )
                return
        
        if not url:
            await ctx.reply(
                f"{ctx.author.mention} ‚ùå Vui l√≤ng cung c·∫•p URL video!\n"
                f"S·ª≠ d·ª•ng: ; add <URL> <t√™n file>`",
                mention_author=True
            )
            return
        
        # Validate URL
        if not self._is_valid_url(url):
            await ctx.reply(
                f"{ctx.author.mention} ‚ùå URL kh√¥ng h·ª£p l·ªá! "
                f"Vui l√≤ng cung c·∫•p URL ƒë·∫ßy ƒë·ªß (b·∫Øt ƒë·∫ßu v·ªõi http:// ho·∫∑c https://)",
                mention_author=True
            )
            return
        
        # Generate filename if not provided
        if not filename:
            parsed_url = urlparse(url)
            filename = os.path.basename(parsed_url.path)
            if not filename or '.' not in filename:
                filename = f"video_{int(datetime.now().timestamp())}.mp4"
        
        # Ensure filename has valid extension
        video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm', '.m4v']
        if not any(filename.lower().endswith(ext) for ext in video_extensions):
            filename += '.mp4'  # Default to mp4
        
        # Sanitize filename
        filename = self._sanitize_filename(filename)
        filepath = os.path.join(self.videos_dir, filename)
        
        # Check if file already exists
        if os.path.exists(filepath):
            await ctx.reply(
                f"{ctx.author.mention} ‚ùå File `{filename}` ƒë√£ t·ªìn t·∫°i! "
                f"Vui l√≤ng ch·ªçn t√™n kh√°c ho·∫∑c x√≥a file c≈© tr∆∞·ªõc.",
                mention_author=True
            )
            return
        
        # Send initial message
        embed = discord.Embed(
            title="üì• ƒêang t·∫£i video...",
            description=f"**URL:** {url[:100]}{'...' if len(url) > 100 else ''}\n**File:** `{filename}`",
            color=discord.Color.orange(),
            timestamp=datetime.now()
        )
        embed.set_footer(text=f"Y√™u c·∫ßu b·ªüi {ctx.author}", icon_url=ctx.author.display_avatar.url)
        
        status_msg = await ctx.reply(embed=embed, mention_author=True)
        
        try:
            # Download video
            async with ctx.typing():
                timeout = aiohttp.ClientTimeout(total=300)  # 5 minutes timeout
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    async with session.get(url) as response:
                        if response.status != 200:
                            await status_msg.edit(embed=discord.Embed(
                                title="‚ùå L·ªói t·∫£i video",
                                description=f"Kh√¥ng th·ªÉ t·∫£i video t·ª´ URL (Status: {response.status})",
                                color=discord.Color.red()
                            ))
                            return
                        
                        # Check content type
                        content_type = response.headers.get('content-type', '').lower()
                        if not any(vid_type in content_type for vid_type in ['video', 'octet-stream', 'application']):
                            logger.warning(f"Suspicious content type: {content_type}")
                        
                        # Check file size
                        content_length = response.headers.get('content-length')
                        if content_length:
                            file_size = int(content_length)
                            max_size = 100 * 1024 * 1024  # 100MB limit for download
                            if file_size > max_size:
                                await status_msg.edit(embed=discord.Embed(
                                    title="‚ùå File qu√° l·ªõn",
                                    description=f"File c√≥ k√≠ch th∆∞·ªõc {file_size / (1024*1024):.1f}MB (T·ªëi ƒëa: 100MB)",
                                    color=discord.Color.red()
                                ))
                                return
                        
                        # Update progress
                        embed.description = f"**URL:** {url[:100]}{'...' if len(url) > 100 else ''}\n**File:** `{filename}`\nüìä ƒêang t·∫£i..."
                        embed.color = discord.Color.blue()
                        await status_msg.edit(embed=embed)
                        
                        # Download and save file
                        async with aiofiles.open(filepath, 'wb') as f:
                            downloaded = 0
                            async for chunk in response.content.iter_chunked(8192):  # 8KB chunks
                                await f.write(chunk)
                                downloaded += len(chunk)
                                
                                # Update progress every 1MB
                                if downloaded % (1024 * 1024) == 0:
                                    embed.description = f"**URL:** {url[:100]}{'...' if len(url) > 100 else ''}\n**File:** `{filename}`\nüìä ƒê√£ t·∫£i: {downloaded / (1024*1024):.1f}MB"
                                    try:
                                        await status_msg.edit(embed=embed)
                                    except:
                                        pass  # Ignore rate limit errors
            
            # Verify downloaded file
            if not os.path.exists(filepath):
                await status_msg.edit(embed=discord.Embed(
                    title="‚ùå L·ªói l∆∞u file",
                    description="Kh√¥ng th·ªÉ l∆∞u file v√†o th∆∞ m·ª•c videos",
                    color=discord.Color.red()
                ))
                return
            
            file_size = os.path.getsize(filepath)
            if file_size == 0:
                os.remove(filepath)
                await status_msg.edit(embed=discord.Embed(
                    title="‚ùå File tr·ªëng",
                    description="File t·∫£i v·ªÅ c√≥ k√≠ch th∆∞·ªõc 0 bytes",
                    color=discord.Color.red()
                ))
                return
            
            # Success message
            success_embed = discord.Embed(
                title="‚úÖ T·∫£i video th√†nh c√¥ng!",
                description=(
                    f"**File:** `{filename}`\n"
                    f"**K√≠ch th∆∞·ªõc:** {file_size / (1024*1024):.1f}MB\n"
                    f"**L∆∞u t·∫°i:** `{self.videos_dir}/{filename}`"
                ),
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            success_embed.add_field(
                name="üí° C√°ch s·ª≠ d·ª•ng",
                value=f"S·ª≠ d·ª•ng ; {os.path.splitext(filename)[0]}` ƒë·ªÉ g·ª≠i video n√†y",
                inline=False
            )
            success_embed.set_footer(
                text=f"Th√™m b·ªüi {ctx.author}",
                icon_url=ctx.author.display_avatar.url
            )
            
            await status_msg.edit(embed=success_embed)
            logger.info(f"Video downloaded: {filename} ({file_size} bytes) by {ctx.author}")
            
        except asyncio.TimeoutError:
            await status_msg.edit(embed=discord.Embed(
                title="‚è∞ Timeout",
                description="Qu√° th·ªùi gian t·∫£i video (5 ph√∫t). URL c√≥ th·ªÉ qu√° ch·∫≠m ho·∫∑c file qu√° l·ªõn.",
                color=discord.Color.red()
            ))
        except aiohttp.ClientError as e:
            await status_msg.edit(embed=discord.Embed(
                title="‚ùå L·ªói k·∫øt n·ªëi",
                description=f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn URL: {str(e)[:100]}",
                color=discord.Color.red()
            ))
        except Exception as e:
            # Clean up partial file
            if os.path.exists(filepath):
                try:
                    os.remove(filepath)
                except:
                    pass
            
            logger.error(f"Error downloading video: {e}")
            await status_msg.edit(embed=discord.Embed(
                title="‚ùå L·ªói t·∫£i video",
                description=f"C√≥ l·ªói x·∫£y ra: {str(e)[:100]}",
                color=discord.Color.red()
            ))
    
    def _is_valid_url(self, url: str) -> bool:
        """
        Ki·ªÉm tra URL c√≥ h·ª£p l·ªá kh√¥ng
        """
        try:
            result = urlparse(url)
            return all([result.scheme, result.netloc]) and result.scheme in ['http', 'https']
        except:
            return False
    
    def _sanitize_filename(self, filename: str) -> str:
        """
        L√†m s·∫°ch t√™n file, lo·∫°i b·ªè k√Ω t·ª± kh√¥ng h·ª£p l·ªá
        """
        # Remove invalid characters for Windows/Linux
        invalid_chars = '<>:"/\\|?*'
        for char in invalid_chars:
            filename = filename.replace(char, '_')
        
        # Remove multiple spaces and dots
        filename = re.sub(r'\.+', '.', filename)
        filename = re.sub(r'\s+', ' ', filename)
        
        # Trim and ensure not empty
        filename = filename.strip()
        if not filename:
            filename = f"video_{int(datetime.now().timestamp())}.mp4"
        
        return filename
