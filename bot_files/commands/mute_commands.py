"""
Mute v√† Unmute commands
"""
import discord
from discord.ext import commands
import logging
import re
from datetime import datetime, timedelta
from .base import BaseCommand

logger = logging.getLogger(__name__)

class MuteCommands(BaseCommand):
    """Class ch·ª©a c√°c commands li√™n quan ƒë·∫øn mute"""
    
    def register_commands(self):
        """Register mute and unmute commands"""
        
        @self.bot.command(name='mute', aliases=['timeout'])
        async def mute_user(ctx, member: discord.Member, duration: str, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
            """
            Mute (timeout) m·ªôt user v·ªõi th·ªùi gian t√πy ch·ªânh
            
            Usage: 
                ;mute @user 10m Spam tin nh·∫Øn
                ;mute @user 1h30m Vi ph·∫°m quy t·∫Øc
                ;mute @user 2d H√†nh vi kh√¥ng ph√π h·ª£p
            
            ƒê·ªãnh d·∫°ng th·ªùi gian:
                s/sec/seconds - gi√¢y
                m/min/minutes - ph√∫t  
                h/hour/hours - gi·ªù
                d/day/days - ng√†y
                w/week/weeks - tu·∫ßn
            
            V√≠ d·ª•: 30s, 5m, 1h, 2d, 1w, 1h30m, 2d12h
            """
            await self.execute_with_rate_limit(ctx, self._mute_user_impl, ctx, member, duration, reason)
        
        @self.bot.command(name='unmute', aliases=['untimeout'])
        async def unmute_user(ctx, member: discord.Member):
            """
            Remove timeout c·ªßa m·ªôt user v·ªõi rate limiting
            
            Usage: ;unmute @user ho·∫∑c ;untimeout @user
            """
            # S·ª≠ d·ª•ng rate limiting cho command n√†y
            await self.execute_with_rate_limit(ctx, self._unmute_user_impl, ctx, member)
        
        @self.bot.command(name='muteinfo', aliases=['timeoutinfo'])
        async def mute_info(ctx, member: discord.Member = None):
            """
            Xem th√¥ng tin mute c·ªßa m·ªôt user ho·∫∑c t·∫•t c·∫£ users b·ªã mute
            
            Usage: 
                ;muteinfo - Xem t·∫•t c·∫£ users b·ªã mute
                ;muteinfo @user - Xem th√¥ng tin mute c·ªßa user c·ª• th·ªÉ
            """
            await self.execute_with_rate_limit(ctx, self._mute_info_impl, ctx, member)
    
    def _parse_duration(self, duration_str: str) -> timedelta:
        """
        Parse duration string th√†nh timedelta object
        
        Args:
            duration_str: String th·ªùi gian nh∆∞ "1h30m", "2d", "30s"
            
        Returns:
            timedelta: Th·ªùi gian ƒë√£ parse
            
        Raises:
            ValueError: N·∫øu format kh√¥ng h·ª£p l·ªá
        """
        # Regex pattern ƒë·ªÉ match c√°c ƒë·ªãnh d·∫°ng th·ªùi gian
        pattern = r'(\d+)\s*(s|sec|seconds?|m|min|minutes?|h|hour|hours?|d|day|days?|w|week|weeks?)'
        matches = re.findall(pattern, duration_str.lower())
        
        if not matches:
            raise ValueError("ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá")
        
        total_seconds = 0
        
        for value, unit in matches:
            value = int(value)
            
            # Convert to seconds
            if unit in ['s', 'sec', 'second', 'seconds']:
                total_seconds += value
            elif unit in ['m', 'min', 'minute', 'minutes']:
                total_seconds += value * 60
            elif unit in ['h', 'hour', 'hours']:
                total_seconds += value * 3600
            elif unit in ['d', 'day', 'days']:
                total_seconds += value * 86400
            elif unit in ['w', 'week', 'weeks']:
                total_seconds += value * 604800
        
        if total_seconds <= 0:
            raise ValueError("Th·ªùi gian ph·∫£i l·ªõn h∆°n 0")
        
        # Discord timeout limit l√† 28 ng√†y
        max_seconds = 28 * 24 * 60 * 60  # 28 days
        if total_seconds > max_seconds:
            raise ValueError("Th·ªùi gian mute t·ªëi ƒëa l√† 28 ng√†y")
        
        return timedelta(seconds=total_seconds)
    
    def _format_duration(self, td: timedelta) -> str:
        """
        Format timedelta th√†nh string d·ªÖ ƒë·ªçc
        
        Args:
            td: timedelta object
            
        Returns:
            str: String th·ªùi gian ƒë√£ format
        """
        total_seconds = int(td.total_seconds())
        
        days = total_seconds // 86400
        hours = (total_seconds % 86400) // 3600
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60
        
        parts = []
        if days > 0:
            parts.append(f"{days} ng√†y")
        if hours > 0:
            parts.append(f"{hours} gi·ªù")
        if minutes > 0:
            parts.append(f"{minutes} ph√∫t")
        if seconds > 0 and not parts:  # Ch·ªâ hi·ªÉn th·ªã gi√¢y n·∫øu kh√¥ng c√≥ ƒë∆°n v·ªã l·ªõn h∆°n
            parts.append(f"{seconds} gi√¢y")
        
        return " ".join(parts) if parts else "0 gi√¢y"
    
    async def _mute_user_impl(self, ctx, member: discord.Member, duration: str, reason: str):
        """
        Implementation th·ª±c t·∫ø c·ªßa mute command
        """
        # Ki·ªÉm tra quy·ªÅn s·ª≠ d·ª•ng dynamic permission system
        if hasattr(self.bot_instance, 'permission_manager'):
            has_permission, user_level = self.bot_instance.permission_manager.check_command_permission(ctx, 'mute')
            if not has_permission:
                await ctx.reply(f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
        else:
            # Fallback: Ki·ªÉm tra quy·ªÅn admin n·∫øu kh√¥ng c√≥ permission system
            if not self.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                await ctx.reply(f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
        
        # Ki·ªÉm tra kh√¥ng th·ªÉ mute ch√≠nh m√¨nh
        if member == ctx.author:
            await ctx.reply(f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng th·ªÉ mute ch√≠nh m√¨nh!", mention_author=True)
            return
        
        # Ki·ªÉm tra kh√¥ng th·ªÉ mute bot
        if member.bot:
            await ctx.reply(f"{ctx.author.mention} ‚ùå Kh√¥ng th·ªÉ mute bot!", mention_author=True)
            return
        
        # Ki·ªÉm tra hierarchy - kh√¥ng th·ªÉ mute ng∆∞·ªùi c√≥ role cao h∆°n
        if ctx.author != ctx.guild.owner and member.top_role >= ctx.author.top_role:
            await ctx.reply(f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng th·ªÉ mute ng∆∞·ªùi c√≥ role cao h∆°n ho·∫∑c b·∫±ng b·∫°n!", mention_author=True)
            return
        
        try:
            # Parse duration
            duration_td = self._parse_duration(duration)
            duration_formatted = self._format_duration(duration_td)
            
            # Ki·ªÉm tra user ƒë√£ b·ªã mute ch∆∞a
            if member.timed_out_until and member.timed_out_until > datetime.now(member.timed_out_until.tzinfo):
                await ctx.reply(f"{ctx.author.mention} ‚ùå {member.mention} ƒë√£ b·ªã mute r·ªìi!", mention_author=True)
                return
            
            # Th·ª±c hi·ªán mute
            await member.timeout(duration_td, reason=f"Muted by {ctx.author}: {reason}")
            
            # T·∫°o embed th√¥ng b√°o
            embed = discord.Embed(
                title="üîá ƒê√£ mute user th√†nh c√¥ng",
                description=f"{member.mention} ƒë√£ b·ªã mute b·ªüi {ctx.author.mention}",
                color=discord.Color.red(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="‚è∞ Th·ªùi gian mute",
                value=duration_formatted,
                inline=True
            )
            
            embed.add_field(
                name="üìù L√Ω do",
                value=reason,
                inline=True
            )
            
            embed.add_field(
                name="üïê H·∫øt h·∫°n l√∫c",
                value=f"<t:{int((datetime.now() + duration_td).timestamp())}:F>",
                inline=False
            )
            
            embed.set_footer(text=f"Muted b·ªüi {ctx.author.display_name}", icon_url=ctx.author.display_avatar.url)
            
            await ctx.reply(embed=embed, mention_author=True)
            
            # G·ª≠i DM cho user b·ªã mute
            try:
                dm_embed = discord.Embed(
                    title="üîá B·∫°n ƒë√£ b·ªã mute",
                    description=f"B·∫°n ƒë√£ b·ªã mute trong server **{ctx.guild.name}**",
                    color=discord.Color.red(),
                    timestamp=datetime.now()
                )
                
                dm_embed.add_field(
                    name="‚è∞ Th·ªùi gian mute",
                    value=duration_formatted,
                    inline=True
                )
                
                dm_embed.add_field(
                    name="üìù L√Ω do",
                    value=reason,
                    inline=True
                )
                
                dm_embed.add_field(
                    name="üïê H·∫øt h·∫°n l√∫c",
                    value=f"<t:{int((datetime.now() + duration_td).timestamp())}:F>",
                    inline=False
                )
                
                dm_embed.add_field(
                    name="‚ö†Ô∏è L∆∞u √Ω",
                    value="Trong th·ªùi gian mute, b·∫°n kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ho·∫∑c tham gia voice chat.",
                    inline=False
                )
                
                await member.send(embed=dm_embed)
            except discord.Forbidden:
                # Kh√¥ng th·ªÉ g·ª≠i DM, b·ªè qua
                pass
            
            logger.info(f"User {member} ({member.id}) ƒë√£ b·ªã mute {duration_formatted} b·ªüi {ctx.author} ({ctx.author.id}) - L√Ω do: {reason}")
            
        except ValueError as e:
            await ctx.reply(f"{ctx.author.mention} ‚ùå {str(e)}", mention_author=True)
        except discord.Forbidden:
            await ctx.reply(f"{ctx.author.mention} ‚ùå Kh√¥ng c√≥ quy·ªÅn mute user n√†y!", mention_author=True)
        except discord.HTTPException as e:
            await ctx.reply(f"{ctx.author.mention} ‚ùå L·ªói HTTP: {str(e)[:100]}", mention_author=True)
        except Exception as e:
            await ctx.reply(f"{ctx.author.mention} ‚ùå C√≥ l·ªói x·∫£y ra: {str(e)[:100]}", mention_author=True)
            logger.error(f"L·ªói khi mute user {member}: {e}")
    
    async def _unmute_user_impl(self, ctx, member: discord.Member):
        """
        Implementation th·ª±c t·∫ø c·ªßa unmute command s·ª≠ d·ª•ng remove timeout
        """
        # Ki·ªÉm tra quy·ªÅn s·ª≠ d·ª•ng dynamic permission system
        if hasattr(self.bot_instance, 'permission_manager'):
            has_permission, user_level = self.bot_instance.permission_manager.check_command_permission(ctx, 'unmute')
            if not has_permission:
                await ctx.reply(f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
        else:
            # Fallback: Ki·ªÉm tra quy·ªÅn admin n·∫øu kh√¥ng c√≥ permission system
            if not self.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                await ctx.reply(f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
        
        try:
            from datetime import datetime
            
            # Ki·ªÉm tra user c√≥ b·ªã timeout kh√¥ng
            if not member.timed_out_until or member.timed_out_until <= datetime.now(member.timed_out_until.tzinfo):
                await ctx.reply(f"{ctx.author.mention} ‚ùå {member.mention} kh√¥ng b·ªã timeout!", mention_author=True)
                return
            
            # Remove timeout
            await member.timeout(None, reason=f"Timeout removed by {ctx.author}")
            
            embed = discord.Embed(
                title="üîä ƒê√£ remove timeout th√†nh c√¥ng",
                description=f"{ctx.author.mention} ƒë√£ remove timeout cho {member.mention}",
                color=discord.Color.green()
            )
            embed.add_field(
                name="‚ÑπÔ∏è Th√¥ng tin", 
                value="User c√≥ th·ªÉ chat v√† t∆∞∆°ng t√°c b√¨nh th∆∞·ªùng tr·ªü l·∫°i", 
                inline=False
            )
            
            await ctx.reply(embed=embed, mention_author=True)
            logger.info(f"User {member} ({member.id}) ƒë√£ ƒë∆∞·ª£c remove timeout b·ªüi {ctx.author} ({ctx.author.id})")
            
        except discord.Forbidden:
            await ctx.reply(f"{ctx.author.mention} ‚ùå Kh√¥ng c√≥ quy·ªÅn remove timeout user!", mention_author=True)
        except discord.HTTPException as e:
            await ctx.reply(f"{ctx.author.mention} ‚ùå L·ªói HTTP: {str(e)[:50]}", mention_author=True)
        except Exception as e:
            await ctx.reply(f"{ctx.author.mention} ‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}", mention_author=True)
            logger.error(f"L·ªói khi remove timeout user {member}: {e}")
    
    async def _mute_info_impl(self, ctx, member: discord.Member = None):
        """
        Implementation th·ª±c t·∫ø c·ªßa muteinfo command
        """
        # Ki·ªÉm tra quy·ªÅn s·ª≠ d·ª•ng dynamic permission system
        if hasattr(self.bot_instance, 'permission_manager'):
            has_permission, user_level = self.bot_instance.permission_manager.check_command_permission(ctx, 'muteinfo')
            if not has_permission:
                await ctx.reply(f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
        else:
            # Fallback: Ki·ªÉm tra quy·ªÅn admin n·∫øu kh√¥ng c√≥ permission system
            if not self.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                await ctx.reply(f"{ctx.author.mention} ‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
        
        try:
            if member:
                # Xem th√¥ng tin mute c·ªßa user c·ª• th·ªÉ
                if not member.timed_out_until or member.timed_out_until <= datetime.now(member.timed_out_until.tzinfo):
                    await ctx.reply(f"{ctx.author.mention} ‚ÑπÔ∏è {member.mention} hi·ªán kh√¥ng b·ªã mute!", mention_author=True)
                    return
                
                # T√≠nh th·ªùi gian c√≤n l·∫°i
                remaining_time = member.timed_out_until - datetime.now(member.timed_out_until.tzinfo)
                remaining_formatted = self._format_duration(remaining_time)
                
                embed = discord.Embed(
                    title="üîá Th√¥ng tin Mute",
                    description=f"Th√¥ng tin mute c·ªßa {member.mention}",
                    color=discord.Color.orange(),
                    timestamp=datetime.now()
                )
                
                embed.add_field(
                    name="üë§ User",
                    value=f"{member.mention}\n({member.display_name})",
                    inline=True
                )
                
                embed.add_field(
                    name="‚è∞ Th·ªùi gian c√≤n l·∫°i",
                    value=remaining_formatted,
                    inline=True
                )
                
                embed.add_field(
                    name="üïê H·∫øt h·∫°n l√∫c",
                    value=f"<t:{int(member.timed_out_until.timestamp())}:F>",
                    inline=False
                )
                
                embed.set_thumbnail(url=member.display_avatar.url)
                embed.set_footer(text=f"Requested by {ctx.author.display_name}", icon_url=ctx.author.display_avatar.url)
                
                await ctx.reply(embed=embed, mention_author=True)
                
            else:
                # Xem t·∫•t c·∫£ users b·ªã mute trong server
                muted_members = []
                current_time = datetime.now()
                
                for member in ctx.guild.members:
                    if member.timed_out_until and member.timed_out_until > current_time.replace(tzinfo=member.timed_out_until.tzinfo):
                        remaining_time = member.timed_out_until - current_time.replace(tzinfo=member.timed_out_until.tzinfo)
                        remaining_formatted = self._format_duration(remaining_time)
                        muted_members.append({
                            'member': member,
                            'remaining': remaining_formatted,
                            'expires_at': member.timed_out_until
                        })
                
                if not muted_members:
                    await ctx.reply(f"{ctx.author.mention} ‚ÑπÔ∏è Hi·ªán kh√¥ng c√≥ user n√†o b·ªã mute trong server!", mention_author=True)
                    return
                
                # S·∫Øp x·∫øp theo th·ªùi gian h·∫øt h·∫°n
                muted_members.sort(key=lambda x: x['expires_at'])
                
                embed = discord.Embed(
                    title="üîá Danh s√°ch Users b·ªã Mute",
                    description=f"C√≥ **{len(muted_members)}** user ƒëang b·ªã mute trong server",
                    color=discord.Color.red(),
                    timestamp=datetime.now()
                )
                
                # Hi·ªÉn th·ªã t·ªëi ƒëa 10 users ƒë·ªÉ tr√°nh embed qu√° d√†i
                display_count = min(len(muted_members), 10)
                
                for i, muted in enumerate(muted_members[:display_count]):
                    member = muted['member']
                    remaining = muted['remaining']
                    expires_timestamp = int(muted['expires_at'].timestamp())
                    
                    embed.add_field(
                        name=f"üë§ {member.display_name}",
                        value=f"C√≤n l·∫°i: **{remaining}**\nH·∫øt h·∫°n: <t:{expires_timestamp}:R>",
                        inline=True
                    )
                
                if len(muted_members) > 10:
                    embed.add_field(
                        name="‚ûï V√† nhi·ªÅu h∆°n n·ªØa...",
                        value=f"C√≤n **{len(muted_members) - 10}** user kh√°c b·ªã mute",
                        inline=False
                    )
                
                embed.set_footer(text=f"Requested by {ctx.author.display_name}", icon_url=ctx.author.display_avatar.url)
                
                await ctx.reply(embed=embed, mention_author=True)
                
        except Exception as e:
            await ctx.reply(f"{ctx.author.mention} ‚ùå C√≥ l·ªói x·∫£y ra: {str(e)[:100]}", mention_author=True)
            logger.error(f"L·ªói khi xem th√¥ng tin mute: {e}")
