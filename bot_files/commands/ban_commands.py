# -*- coding: utf-8 -*-
"""
Ban Commands - H·ªá th·ªëng c·∫•m user s·ª≠ d·ª•ng bot
Ch·ªâ Supreme Admin m·ªõi c√≥ quy·ªÅn ban/unban user
"""
import discord
from discord.ext import commands
import json
import os
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class BanCommands:
    def __init__(self, bot_instance):
        self.bot_instance = bot_instance
        self.bot = bot_instance.bot
        self.data_folder = 'data'
        self.banned_users_file = os.path.join(self.data_folder, 'banned_users.json')
        
        # T·∫°o data folder n·∫øu ch∆∞a c√≥
        if not os.path.exists(self.data_folder):
            os.makedirs(self.data_folder)
        self.banned_users = {}  # {user_id: {'reason': str, 'timestamp': str, 'banned_by': int}}
        self.load_banned_users()
        self.setup_commands()
    
    def load_banned_users(self):
        """T·∫£i danh s√°ch user b·ªã ban t·ª´ file JSON"""
        try:
            if os.path.exists(self.banned_users_file):
                with open(self.banned_users_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # Convert string keys back to int
                    self.banned_users = {int(k): v for k, v in data.get('banned_users', {}).items()}
                logger.info(f"ƒê√£ t·∫£i {len(self.banned_users)} user b·ªã ban")
            else:
                # T·∫°o file banned users m·∫∑c ƒë·ªãnh
                default_data = {
                    "banned_users": {},
                    "description": "Danh s√°ch users b·ªã c·∫•m s·ª≠ d·ª•ng bot",
                    "ban_history": []
                }
                with open(self.banned_users_file, 'w', encoding='utf-8') as f:
                    json.dump(default_data, f, indent=4, ensure_ascii=False)
                logger.info(f"ƒê√£ t·∫°o file banned users m·ªõi: {self.banned_users_file}")
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i banned users: {e}")
    
    def save_banned_users(self):
        """L∆∞u danh s√°ch user b·ªã ban v√†o file JSON"""
        try:
            # Load existing data ƒë·ªÉ gi·ªØ l·∫°i ban_history
            existing_data = {}
            if os.path.exists(self.banned_users_file):
                with open(self.banned_users_file, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
            
            # Convert int keys to string for JSON
            banned_data = {str(k): v for k, v in self.banned_users.items()}
            
            # Update banned_users
            existing_data['banned_users'] = banned_data
            existing_data['description'] = "Danh s√°ch users b·ªã c·∫•m s·ª≠ d·ª•ng bot"
            
            with open(self.banned_users_file, 'w', encoding='utf-8') as f:
                json.dump(existing_data, f, indent=4, ensure_ascii=False)
            logger.info("ƒê√£ l∆∞u banned users th√†nh c√¥ng")
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u banned users: {e}")
    
    def add_ban_history(self, user_id: int, action: str, admin_id: int, reason: str = ""):
        """Th√™m l·ªãch s·ª≠ ban/unban v√†o file"""
        try:
            # Load existing data
            existing_data = {}
            if os.path.exists(self.banned_users_file):
                with open(self.banned_users_file, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
            
            # Ensure ban_history exists
            if 'ban_history' not in existing_data:
                existing_data['ban_history'] = []
            
            # Add new history entry
            history_entry = {
                'user_id': user_id,
                'action': action,  # 'ban' ho·∫∑c 'unban'
                'admin_id': admin_id,
                'reason': reason,
                'timestamp': datetime.now().isoformat()
            }
            
            existing_data['ban_history'].append(history_entry)
            
            # Keep only last 100 entries ƒë·ªÉ tr√°nh file qu√° l·ªõn
            if len(existing_data['ban_history']) > 100:
                existing_data['ban_history'] = existing_data['ban_history'][-100:]
            
            # Save back to file
            with open(self.banned_users_file, 'w', encoding='utf-8') as f:
                json.dump(existing_data, f, indent=4, ensure_ascii=False)
                
        except Exception as e:
            logger.error(f"L·ªói khi th√™m ban history: {e}")
    
    def is_user_banned(self, user_id: int) -> bool:
        """Ki·ªÉm tra xem user c√≥ b·ªã ban kh√¥ng"""
        return user_id in self.banned_users
    
    def get_ban_info(self, user_id: int) -> dict:
        """L·∫•y th√¥ng tin ban c·ªßa user"""
        return self.banned_users.get(user_id, {})
    
    def ban_user(self, user_id: int, reason: str, admin_id: int):
        """Ban user"""
        self.banned_users[user_id] = {
            'reason': reason,
            'timestamp': datetime.now().isoformat(),
            'banned_by': admin_id
        }
        self.save_banned_users()
        self.add_ban_history(user_id, 'ban', admin_id, reason)
    
    def unban_user(self, user_id: int, admin_id: int, reason: str = ""):
        """Unban user"""
        if user_id in self.banned_users:
            del self.banned_users[user_id]
            self.save_banned_users()
            self.add_ban_history(user_id, 'unban', admin_id, reason)
            return True
        return False
    
    def setup_commands(self):
        """Thi·∫øt l·∫≠p c√°c l·ªánh ban"""
        
        @self.bot.command(name='ban')
        async def ban_command(ctx, user_id: str = None, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
            """
            C·∫•m user s·ª≠ d·ª•ng bot
            Ch·ªâ Supreme Admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng
            
            Usage: ;ban <user_id> [l√Ω do]
            """
            # Ki·ªÉm tra quy·ªÅn Supreme Admin
            if not self.bot_instance.is_supreme_admin(ctx.author.id):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ ban user!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            if not user_id:
                embed = discord.Embed(
                    title="‚ùå Thi·∫øu tham s·ªë",
                    description="Vui l√≤ng nh·∫≠p user ID c·∫ßn ban!",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="üí° C√°ch s·ª≠ d·ª•ng",
                    value="`/ban <user_id> [l√Ω do]`",
                    inline=False
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Parse user ID
            try:
                target_user_id = int(user_id)
            except ValueError:
                embed = discord.Embed(
                    title="‚ùå User ID kh√¥ng h·ª£p l·ªá",
                    description="Vui l√≤ng nh·∫≠p user ID h·ª£p l·ªá (ch·ªâ s·ªë)!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Kh√¥ng th·ªÉ ban ch√≠nh m√¨nh
            if target_user_id == ctx.author.id:
                embed = discord.Embed(
                    title="‚ùå L·ªói",
                    description="B·∫°n kh√¥ng th·ªÉ ban ch√≠nh m√¨nh!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Kh√¥ng th·ªÉ ban Supreme Admin
            if self.bot_instance.is_supreme_admin(target_user_id):
                embed = discord.Embed(
                    title="‚ùå L·ªói",
                    description="Kh√¥ng th·ªÉ ban Supreme Admin!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Ki·ªÉm tra user ƒë√£ b·ªã ban ch∆∞a
            if self.is_user_banned(target_user_id):
                embed = discord.Embed(
                    title="‚ö†Ô∏è Th√¥ng b√°o",
                    description=f"User `{target_user_id}` ƒë√£ b·ªã ban r·ªìi!",
                    color=discord.Color.orange()
                )
                
                ban_info = self.get_ban_info(target_user_id)
                if ban_info:
                    embed.add_field(
                        name="üìù L√Ω do hi·ªán t·∫°i",
                        value=ban_info.get('reason', 'Kh√¥ng c√≥ l√Ω do'),
                        inline=False
                    )
                
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Ban user
            self.ban_user(target_user_id, reason, ctx.author.id)
            
            # L·∫•y th√¥ng tin user n·∫øu c√≥ th·ªÉ
            try:
                target_user = await self.bot.fetch_user(target_user_id)
                user_info = f"{target_user.display_name} ({target_user.name})"
            except:
                user_info = f"User ID: {target_user_id}"
            
            embed = discord.Embed(
                title="üî® User ƒë√£ b·ªã ban",
                description=f"**{user_info}** ƒë√£ b·ªã c·∫•m s·ª≠ d·ª•ng bot!",
                color=discord.Color.red(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üë§ User",
                value=f"{user_info} (`{target_user_id}`)",
                inline=True
            )
            
            embed.add_field(
                name="üìù L√Ω do",
                value=reason,
                inline=True
            )
            
            embed.add_field(
                name="üëë Ban b·ªüi",
                value=ctx.author.mention,
                inline=True
            )
            
            embed.add_field(
                name="‚ö†Ô∏è L∆∞u √Ω",
                value="User s·∫Ω kh√¥ng th·ªÉ s·ª≠ d·ª•ng b·∫•t k·ª≥ l·ªánh n√†o c·ªßa bot",
                inline=False
            )
            
            embed.set_footer(text="S·ª≠ d·ª•ng ;unban ƒë·ªÉ b·ªè ban")
            await ctx.reply(embed=embed, mention_author=True)
            
            logger.info(f"User {target_user_id} ƒë√£ b·ªã ban b·ªüi {ctx.author} v·ªõi l√Ω do: {reason}")
        
        @self.bot.command(name='unban')
        async def unban_command(ctx, user_id: str = None, *, reason: str = "ƒê∆∞·ª£c tha th·ª©"):
            """
            B·ªè ban user
            Ch·ªâ Supreme Admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng
            
            Usage: ;unban <user_id> [l√Ω do]
            """
            # Ki·ªÉm tra quy·ªÅn Supreme Admin
            if not self.bot_instance.is_supreme_admin(ctx.author.id):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ unban user!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            if not user_id:
                embed = discord.Embed(
                    title="‚ùå Thi·∫øu tham s·ªë",
                    description="Vui l√≤ng nh·∫≠p user ID c·∫ßn unban!",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="üí° C√°ch s·ª≠ d·ª•ng",
                    value="`/unban <user_id> [l√Ω do]`",
                    inline=False
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Parse user ID
            try:
                target_user_id = int(user_id)
            except ValueError:
                embed = discord.Embed(
                    title="‚ùå User ID kh√¥ng h·ª£p l·ªá",
                    description="Vui l√≤ng nh·∫≠p user ID h·ª£p l·ªá (ch·ªâ s·ªë)!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Ki·ªÉm tra user c√≥ b·ªã ban kh√¥ng
            if not self.is_user_banned(target_user_id):
                embed = discord.Embed(
                    title="‚ö†Ô∏è Th√¥ng b√°o",
                    description=f"User `{target_user_id}` kh√¥ng b·ªã ban!",
                    color=discord.Color.orange()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Unban user
            success = self.unban_user(target_user_id, ctx.author.id, reason)
            
            if success:
                # L·∫•y th√¥ng tin user n·∫øu c√≥ th·ªÉ
                try:
                    target_user = await self.bot.fetch_user(target_user_id)
                    user_info = f"{target_user.display_name} ({target_user.name})"
                except:
                    user_info = f"User ID: {target_user_id}"
                
                embed = discord.Embed(
                    title="‚úÖ User ƒë√£ ƒë∆∞·ª£c unban",
                    description=f"**{user_info}** ƒë√£ ƒë∆∞·ª£c b·ªè ban!",
                    color=discord.Color.green(),
                    timestamp=datetime.now()
                )
                
                embed.add_field(
                    name="üë§ User",
                    value=f"{user_info} (`{target_user_id}`)",
                    inline=True
                )
                
                embed.add_field(
                    name="üìù L√Ω do unban",
                    value=reason,
                    inline=True
                )
                
                embed.add_field(
                    name="üëë Unban b·ªüi",
                    value=ctx.author.mention,
                    inline=True
                )
                
                embed.add_field(
                    name="üéâ Th√¥ng b√°o",
                    value="User c√≥ th·ªÉ s·ª≠ d·ª•ng bot tr·ªü l·∫°i!",
                    inline=False
                )
                
                await ctx.reply(embed=embed, mention_author=True)
                
                logger.info(f"User {target_user_id} ƒë√£ ƒë∆∞·ª£c unban b·ªüi {ctx.author} v·ªõi l√Ω do: {reason}")
            else:
                embed = discord.Embed(
                    title="‚ùå L·ªói",
                    description="C√≥ l·ªói x·∫£y ra khi unban user!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
        
        @self.bot.command(name='banlist')
        async def banlist_command(ctx):
            """
            Xem danh s√°ch user b·ªã ban
            Admin v√† Supreme Admin c√≥ th·ªÉ s·ª≠ d·ª•ng
            
            Usage: ;banlist
            """
            # Ki·ªÉm tra quy·ªÅn admin
            if not self.bot_instance.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ admin m·ªõi c√≥ th·ªÉ xem danh s√°ch ban!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            if not self.banned_users:
                embed = discord.Embed(
                    title="üìã Danh s√°ch Ban",
                    description="Hi·ªán t·∫°i kh√¥ng c√≥ user n√†o b·ªã ban!",
                    color=discord.Color.green()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            embed = discord.Embed(
                title="üî® Danh s√°ch User b·ªã Ban",
                description=f"C√≥ **{len(self.banned_users)}** user ƒëang b·ªã ban:",
                color=discord.Color.red(),
                timestamp=datetime.now()
            )
            
            # Hi·ªÉn th·ªã t·ªëi ƒëa 10 user ƒë·ªÉ tr√°nh embed qu√° d√†i
            user_list = list(self.banned_users.items())[:10]
            user_info_list = []
            
            for user_id, ban_info in user_list:
                try:
                    user = await self.bot.fetch_user(user_id)
                    user_info = f"**{user.display_name}** (`{user_id}`)"
                except:
                    user_info = f"**Unknown User** (`{user_id}`)"
                
                reason = ban_info.get('reason', 'Kh√¥ng c√≥ l√Ω do')
                if len(reason) > 50:
                    reason = reason[:50] + "..."
                
                user_info_list.append(f"{user_info}\n*L√Ω do: {reason}*")
            
            embed.add_field(
                name="üë• Users b·ªã Ban",
                value="\n\n".join(user_info_list) if user_info_list else "Kh√¥ng c√≥ user n√†o",
                inline=False
            )
            
            if len(self.banned_users) > 10:
                embed.add_field(
                    name="‚ö†Ô∏è L∆∞u √Ω",
                    value=f"Ch·ªâ hi·ªÉn th·ªã 10/{len(self.banned_users)} user ƒë·∫ßu ti√™n",
                    inline=False
                )
            
            embed.set_footer(text="S·ª≠ d·ª•ng ;checkban <user_id> ƒë·ªÉ xem chi ti·∫øt")
            await ctx.reply(embed=embed, mention_author=True)
        
        @self.bot.command(name='banhistory')
        async def banhistory_command(ctx, limit: int = 10):
            """
            Xem l·ªãch s·ª≠ ban/unban
            Ch·ªâ Supreme Admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng
            
            Usage: ;banhistory [s·ªë l∆∞·ª£ng]
            """
            # Ki·ªÉm tra quy·ªÅn Supreme Admin
            if not self.bot_instance.is_supreme_admin(ctx.author.id):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ xem l·ªãch s·ª≠ ban!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Gi·ªõi h·∫°n limit
            limit = max(1, min(limit, 20))  # T·ª´ 1 ƒë·∫øn 20
            
            try:
                # Load history t·ª´ file
                history_data = []
                if os.path.exists(self.banned_users_file):
                    with open(self.banned_users_file, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        history_data = data.get('ban_history', [])
                
                if not history_data:
                    embed = discord.Embed(
                        title="üìã L·ªãch s·ª≠ Ban",
                        description="Ch∆∞a c√≥ l·ªãch s·ª≠ ban/unban n√†o!",
                        color=discord.Color.blue()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # Hi·ªÉn th·ªã entries g·∫ßn nh·∫•t
                recent_history = history_data[-limit:]
                
                embed = discord.Embed(
                    title="üìã L·ªãch s·ª≠ Ban/Unban",
                    description=f"**{len(recent_history)}** ho·∫°t ƒë·ªông g·∫ßn nh·∫•t:",
                    color=discord.Color.blue(),
                    timestamp=datetime.now()
                )
                
                for entry in reversed(recent_history):  # Hi·ªÉn th·ªã t·ª´ m·ªõi nh·∫•t
                    action_emoji = "üî®" if entry['action'] == 'ban' else "‚úÖ"
                    action_text = "BAN" if entry['action'] == 'ban' else "UNBAN"
                    
                    # L·∫•y th√¥ng tin user
                    try:
                        user = await self.bot.fetch_user(entry['user_id'])
                        user_info = f"{user.display_name}"
                    except:
                        user_info = f"Unknown User"
                    
                    # L·∫•y th√¥ng tin admin
                    try:
                        admin = await self.bot.fetch_user(entry['admin_id'])
                        admin_info = f"{admin.display_name}"
                    except:
                        admin_info = f"Unknown Admin"
                    
                    # Format timestamp
                    try:
                        timestamp = datetime.fromisoformat(entry['timestamp'])
                        time_str = timestamp.strftime("%d/%m/%Y %H:%M")
                    except:
                        time_str = "Unknown time"
                    
                    field_value = f"**User:** {user_info} (`{entry['user_id']}`)\n"
                    field_value += f"**By:** {admin_info}\n"
                    if entry.get('reason'):
                        field_value += f"**Reason:** {entry['reason']}\n"
                    field_value += f"**Time:** {time_str}"
                    
                    embed.add_field(
                        name=f"{action_emoji} {action_text}",
                        value=field_value,
                        inline=False
                    )
                
                if len(history_data) > limit:
                    embed.set_footer(text=f"Hi·ªÉn th·ªã {limit}/{len(history_data)} ho·∫°t ƒë·ªông")
                
                await ctx.reply(embed=embed, mention_author=True)
                
            except Exception as e:
                embed = discord.Embed(
                    title="‚ùå L·ªói",
                    description=f"C√≥ l·ªói x·∫£y ra khi t·∫£i l·ªãch s·ª≠: {str(e)}",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                logger.error(f"L·ªói trong banhistory: {e}")
        
        @self.bot.command(name='checkban')
        async def checkban_command(ctx, user_id: str = None):
            """
            Ki·ªÉm tra tr·∫°ng th√°i ban c·ªßa user
            Admin v√† Supreme Admin c√≥ th·ªÉ s·ª≠ d·ª•ng
            
            Usage: ;checkban <user_id>
            """
            # Ki·ªÉm tra quy·ªÅn admin
            if not self.bot_instance.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ admin m·ªõi c√≥ th·ªÉ ki·ªÉm tra ban status!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            if not user_id:
                embed = discord.Embed(
                    title="‚ùå Thi·∫øu tham s·ªë",
                    description="Vui l√≤ng nh·∫≠p user ID c·∫ßn ki·ªÉm tra!",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="üí° C√°ch s·ª≠ d·ª•ng",
                    value="`/checkban <user_id>`",
                    inline=False
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Parse user ID
            try:
                target_user_id = int(user_id)
            except ValueError:
                embed = discord.Embed(
                    title="‚ùå User ID kh√¥ng h·ª£p l·ªá",
                    description="Vui l√≤ng nh·∫≠p user ID h·ª£p l·ªá (ch·ªâ s·ªë)!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # L·∫•y th√¥ng tin user
            try:
                target_user = await self.bot.fetch_user(target_user_id)
                user_info = f"{target_user.display_name} ({target_user.name})"
            except:
                user_info = f"User ID: {target_user_id}"
            
            # Ki·ªÉm tra ban status
            is_banned = self.is_user_banned(target_user_id)
            
            if is_banned:
                ban_info = self.get_ban_info(target_user_id)
                
                embed = discord.Embed(
                    title="üî® User b·ªã Ban",
                    description=f"**{user_info}** ƒëang b·ªã c·∫•m s·ª≠ d·ª•ng bot!",
                    color=discord.Color.red(),
                    timestamp=datetime.now()
                )
                
                embed.add_field(
                    name="üë§ User",
                    value=f"{user_info} (`{target_user_id}`)",
                    inline=True
                )
                
                embed.add_field(
                    name="üìù L√Ω do",
                    value=ban_info.get('reason', 'Kh√¥ng c√≥ l√Ω do'),
                    inline=True
                )
                
                # Th√¥ng tin admin ban
                try:
                    banned_by = ban_info.get('banned_by')
                    if banned_by:
                        admin = await self.bot.fetch_user(banned_by)
                        admin_info = f"{admin.display_name}"
                    else:
                        admin_info = "Unknown"
                except:
                    admin_info = "Unknown"
                
                embed.add_field(
                    name="üëë Ban b·ªüi",
                    value=admin_info,
                    inline=True
                )
                
                # Th·ªùi gian ban
                ban_time = ban_info.get('timestamp')
                if ban_time:
                    try:
                        timestamp = datetime.fromisoformat(ban_time)
                        embed.add_field(
                            name="‚è∞ Th·ªùi gian ban",
                            value=f"<t:{int(timestamp.timestamp())}:F>",
                            inline=False
                        )
                    except:
                        pass
                
            else:
                embed = discord.Embed(
                    title="‚úÖ User kh√¥ng b·ªã Ban",
                    description=f"**{user_info}** c√≥ th·ªÉ s·ª≠ d·ª•ng bot b√¨nh th∆∞·ªùng!",
                    color=discord.Color.green(),
                    timestamp=datetime.now()
                )
                
                embed.add_field(
                    name="üë§ User",
                    value=f"{user_info} (`{target_user_id}`)",
                    inline=True
                )
                
                embed.add_field(
                    name="üìä Tr·∫°ng th√°i",
                    value="‚úÖ Kh√¥ng b·ªã ban",
                    inline=True
                )
            
            await ctx.reply(embed=embed, mention_author=True)
    
    def register_commands(self):
        """ƒêƒÉng k√Ω commands - ƒë∆∞·ª£c g·ªçi t·ª´ bot ch√≠nh"""
        logger.info("Ban commands ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω")
