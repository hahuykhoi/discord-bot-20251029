"""
Leaderboard Commands - H·ªá th·ªëng b·∫£ng x·∫øp h·∫°ng v√† cu·ªôc thi cho Discord bot
L·ªánh: ;weeklytop, ;leaderboard, ;competition
"""
import discord
from discord.ext import commands
import json
import os
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional
from utils.shared_wallet import shared_wallet

logger = logging.getLogger(__name__)

class LeaderboardCommands:
    def __init__(self, bot_instance):
        """
        Kh·ªüi t·∫°o Leaderboard Commands
        
        Args:
            bot_instance: Instance c·ªßa AutoReplyBotRefactored
        """
        self.bot_instance = bot_instance
        self.bot = bot_instance.bot
        self.weekly_data_file = 'data/weekly_leaderboard.json'
        self.weekly_data = self.load_weekly_data()
        
        logger.info("Leaderboard Commands ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o")
    
    def load_weekly_data(self) -> Dict:
        """Load weekly leaderboard data"""
        try:
            if os.path.exists(self.weekly_data_file):
                with open(self.weekly_data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"L·ªói khi load weekly data: {e}")
            return {}
    
    def save_weekly_data(self) -> None:
        """Save weekly leaderboard data"""
        try:
            os.makedirs(os.path.dirname(self.weekly_data_file), exist_ok=True)
            with open(self.weekly_data_file, 'w', encoding='utf-8') as f:
                json.dump(self.weekly_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"L·ªói khi save weekly data: {e}")
    
    def get_current_week(self) -> str:
        """L·∫•y tu·∫ßn hi·ªán t·∫°i (format: YYYY-WW)"""
        now = datetime.now()
        year, week, _ = now.isocalendar()
        return f"{year}-{week:02d}"
    
    def add_weekly_win(self, user_id: int, game_type: str) -> None:
        """Th√™m 1 v√°n th·∫Øng v√†o weekly leaderboard"""
        week = self.get_current_week()
        user_str = str(user_id)
        
        if week not in self.weekly_data:
            self.weekly_data[week] = {}
        
        if user_str not in self.weekly_data[week]:
            self.weekly_data[week][user_str] = {
                'total_wins': 0,
                'taixiu_wins': 0,
                'rps_wins': 0,
                'slot_wins': 0,
                'flip_wins': 0,
                'blackjack_wins': 0
            }
        
        self.weekly_data[week][user_str]['total_wins'] += 1
        self.weekly_data[week][user_str][f'{game_type}_wins'] += 1
        self.save_weekly_data()
    
    def get_weekly_leaderboard(self, limit: int = 10) -> list:
        """L·∫•y b·∫£ng x·∫øp h·∫°ng tu·∫ßn hi·ªán t·∫°i"""
        week = self.get_current_week()
        
        if week not in self.weekly_data:
            return []
        
        # S·∫Øp x·∫øp theo total_wins
        sorted_users = sorted(
            self.weekly_data[week].items(),
            key=lambda x: x[1]['total_wins'],
            reverse=True
        )
        
        return sorted_users[:limit]
    
    def reset_weekly_leaderboard(self) -> dict:
        """Reset b·∫£ng x·∫øp h·∫°ng tu·∫ßn v√† trao th∆∞·ªüng cho top players"""
        week = self.get_current_week()
        
        if week not in self.weekly_data:
            return {"message": "Kh√¥ng c√≥ d·ªØ li·ªáu tu·∫ßn n√†y ƒë·ªÉ reset"}
        
        # L·∫•y top 3 players
        leaderboard = self.get_weekly_leaderboard(10)  # L·∫•y nhi·ªÅu ƒë·ªÉ c√≥ l·ªãch s·ª≠
        rewards_given = []
        
        for i, (user_id, data) in enumerate(leaderboard):
            try:
                user_id_int = int(user_id)
                wins = data['total_wins']
                
                if i == 0:  # Top 1
                    # Trao 2k EXP
                    reward_exp = 2000
                    # Shop system ƒë√£ b·ªã x√≥a - ch·ªâ log th√¥ng tin
                    logger.info(f"Weekly Top 1: User {user_id_int} v·ªõi {wins} wins - S·∫Ω trao {reward_exp} EXP Rare (Shop system ƒë√£ x√≥a)")
                    
                    rewards_given.append({
                        'user_id': user_id_int,
                        'rank': 1,
                        'wins': wins,
                        'reward': reward_exp
                    })
                    
                elif i == 1:  # Top 2
                    # Trao 1k EXP
                    reward_exp = 1000
                    # Shop system ƒë√£ b·ªã x√≥a - ch·ªâ log th√¥ng tin
                    logger.info(f"Weekly Top 2: User {user_id_int} v·ªõi {wins} wins - S·∫Ω trao {reward_exp} EXP Rare (Shop system ƒë√£ x√≥a)")
                    
                    rewards_given.append({
                        'user_id': user_id_int,
                        'rank': 2,
                        'wins': wins,
                        'reward': reward_exp
                    })
                    
                elif i == 2:  # Top 3
                    # Trao 500 EXP
                    reward_exp = 500
                    # Shop system ƒë√£ b·ªã x√≥a - ch·ªâ log th√¥ng tin
                    logger.info(f"Weekly Top 3: User {user_id_int} v·ªõi {wins} wins - S·∫Ω trao {reward_exp} EXP Rare (Shop system ƒë√£ x√≥a)")
                    
                    rewards_given.append({
                        'user_id': user_id_int,
                        'rank': 3,
                        'wins': wins,
                        'reward': reward_exp
                    })
                    
            except Exception as e:
                logger.error(f"L·ªói khi trao th∆∞·ªüng cho user {user_id}: {e}")
        
        # L∆∞u l·ªãch s·ª≠ tu·∫ßn v·ª´a k·∫øt th√∫c
        if 'history' not in self.weekly_data:
            self.weekly_data['history'] = {}
        
        self.weekly_data['history'][week] = {
            'leaderboard': leaderboard,
            'rewards': rewards_given,
            'end_date': datetime.now().isoformat()
        }
        
        # X√≥a d·ªØ li·ªáu tu·∫ßn hi·ªán t·∫°i ƒë·ªÉ b·∫Øt ƒë·∫ßu tu·∫ßn m·ªõi
        if week in self.weekly_data:
            del self.weekly_data[week]
        
        self.save_weekly_data()
        
        return {
            'week': week,
            'rewards_given': rewards_given,
            'total_participants': len(leaderboard)
        }
    
    def get_last_week_winners(self) -> dict:
        """L·∫•y th√¥ng tin ng∆∞·ªùi th·∫Øng tu·∫ßn tr∆∞·ªõc"""
        if 'history' not in self.weekly_data:
            return None
        
        # L·∫•y tu·∫ßn g·∫ßn nh·∫•t trong history
        if not self.weekly_data['history']:
            return None
        
        last_week = max(self.weekly_data['history'].keys())
        return self.weekly_data['history'][last_week]
    
    def register_commands(self):
        """Register leaderboard commands"""
        
        @self.bot.command(name='weeklytop', aliases=['topweek', 'bangdua'])
        async def weekly_top_command(ctx):
            """
            Hi·ªÉn th·ªã b·∫£ng ƒëua top h√†ng tu·∫ßn
            
            Usage: ;weeklytop
            """
            try:
                # T·∫°o embed b·∫£ng ƒëua
                embed = discord.Embed(
                    title="üèÜ B·∫¢NG ƒêUA TOP H√ÄNG TU·∫¶N",
                    description="Cu·ªôc thi th·ªëng k√™ game h√†ng tu·∫ßn v·ªõi ph·∫ßn th∆∞·ªüng h·∫•p d·∫´n!",
                    color=discord.Color.gold(),
                    timestamp=datetime.now()
                )
                
                # Th√¥ng tin cu·ªôc thi
                embed.add_field(
                    name="üìÖ Th·ªùi gian:",
                    value=(
                        "‚Ä¢ **B·∫Øt ƒë·∫ßu:** Th·ª© 2 h√†ng tu·∫ßn (00:00)\n"
                        "‚Ä¢ **K·∫øt th√∫c:** Ch·ªß nh·∫≠t h√†ng tu·∫ßn (23:59)\n"
                        "‚Ä¢ **Trao th∆∞·ªüng:** Th·ª© 2 tu·∫ßn sau"
                    ),
                    inline=False
                )
                
                embed.add_field(
                    name="üéØ Ti√™u ch√≠ x·∫øp h·∫°ng:",
                    value=(
                        "‚Ä¢ **T·ªïng s·ªë v√°n th·∫Øng** trong tu·∫ßn\n"
                        "‚Ä¢ **T·∫•t c·∫£ game:** T√†i X·ªâu, RPS, Slot, Flip, Blackjack\n"
                        "‚Ä¢ **Ch·ªâ t√≠nh v√°n th·∫Øng** (kh√¥ng t√≠nh h√≤a ho·∫∑c thua)\n"
                        "‚Ä¢ **Reset m·ªói tu·∫ßn** - C∆° h·ªôi c√¥ng b·∫±ng cho t·∫•t c·∫£"
                    ),
                    inline=False
                )
                
                embed.add_field(
                    name="üèÖ Ph·∫ßn th∆∞·ªüng:",
                    value=(
                        "ü•á **TOP 1:** 2,000 EXP Rare\n"
                        "ü•à **TOP 2:** 1,000 EXP Rare\n"
                        "ü•â **TOP 3:** 500 EXP Rare\n"
                        "üèÖ **TOP 4 tr·ªü xu·ªëng:** Kh√¥ng c√≥ ph·∫ßn th∆∞·ªüng"
                    ),
                    inline=False
                )
                
                # L·∫•y b·∫£ng x·∫øp h·∫°ng th·ª±c t·∫ø
                leaderboard = self.get_weekly_leaderboard(10)
                
                if leaderboard:
                    leaderboard_text = ""
                    medals = ["ü•á", "ü•à", "ü•â"] + [f"{i}Ô∏è‚É£" for i in range(4, 11)]
                    
                    for i, (user_id, data) in enumerate(leaderboard):
                        try:
                            user = self.bot.get_user(int(user_id))
                            username = user.display_name if user else f"User {user_id}"
                            wins = data['total_wins']
                            
                            leaderboard_text += f"{medals[i]} **{username}** - {wins} v√°n th·∫Øng\n"
                        except:
                            continue
                    
                    embed.add_field(
                        name="üìä BXH hi·ªán t·∫°i:",
                        value=leaderboard_text if leaderboard_text else "Ch∆∞a c√≥ d·ªØ li·ªáu tu·∫ßn n√†y",
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="üìä BXH hi·ªán t·∫°i:",
                        value="Ch∆∞a c√≥ ai tham gia tu·∫ßn n√†y. H√£y ch∆°i game ƒë·ªÉ l√™n b·∫£ng x·∫øp h·∫°ng!",
                        inline=False
                    )
                
                embed.add_field(
                    name="üìà C√°ch tham gia:",
                    value=(
                        "‚Ä¢ **Ch∆°i game** b·∫•t k·ª≥: `;taixiu`, `;rps`, `;slot`, `;flip`, `;blackjack`\n"
                        "‚Ä¢ **Th·∫Øng v√°n** ƒë·ªÉ t√≠ch l≈©y ƒëi·ªÉm\n"
                        "‚Ä¢ **Ki·ªÉm tra th·ª© h·∫°ng** b·∫±ng `;myleaderboard`\n"
                        "‚Ä¢ **Nh·∫≠n th∆∞·ªüng** t·ª± ƒë·ªông v√†o th·ª© 2"
                    ),
                    inline=False
                )
                
                # Th√¥ng tin tu·∫ßn hi·ªán t·∫°i
                current_week = self.get_current_week()
                now = datetime.now()
                # T√≠nh ng√†y th·ª© 2 tu·∫ßn n√†y
                monday = now - timedelta(days=now.weekday())
                sunday = monday + timedelta(days=6)
                
                embed.add_field(
                    name="‚ö° Th√¥ng tin tu·∫ßn n√†y:",
                    value=(
                        f"‚Ä¢ **Tu·∫ßn:** {current_week}\n"
                        f"‚Ä¢ **T·ª´:** {monday.strftime('%d/%m')} - {sunday.strftime('%d/%m/%Y')}\n"
                        f"‚Ä¢ **T·ªïng ng∆∞·ªùi tham gia:** {len(leaderboard)} ng∆∞·ªùi\n"
                        f"‚Ä¢ **T·ªïng v√°n th·∫Øng:** {sum(data['total_wins'] for _, data in leaderboard)} v√°n"
                    ),
                    inline=False
                )
                
                embed.add_field(
                    name="üéÆ Game ƒë∆∞·ª£c t√≠nh:",
                    value=(
                        "üé≤ **T√†i X·ªâu** - ƒêo√°n t√†i/x·ªâu\n"
                        "‚úÇÔ∏è **RPS** - K√©o b√∫a bao\n"
                        "üé∞ **Slot** - M√°y ƒë√°nh b·∫°c\n"
                        "ü™ô **Flip** - Tung xu\n"
                        "üÉè **Blackjack** - B√†i 21"
                    ),
                    inline=True
                )
                
                embed.add_field(
                    name="üèÜ Th√†nh t√≠ch:",
                    value=(
                        "üëë **Vua tu·∫ßn tr∆∞·ªõc:** Ch∆∞a c√≥\n"
                        "üî• **K·ª∑ l·ª•c:** Ch∆∞a c√≥\n"
                        "‚≠ê **Streak cao nh·∫•t:** Ch∆∞a c√≥\n"
                        "üíé **EXP ƒë√£ trao:** 0 EXP"
                    ),
                    inline=True
                )
                
                embed.set_footer(
                    text="C·∫≠p nh·∫≠t real-time ‚Ä¢ Ch√∫c may m·∫Øn! üçÄ",
                    icon_url=ctx.author.avatar.url if ctx.author.avatar else ctx.author.default_avatar.url
                )
                
                await ctx.reply(embed=embed, mention_author=True)
                
            except Exception as e:
                logger.error(f"L·ªói trong weekly top command: {e}")
                embed = discord.Embed(
                    title="‚ùå L·ªói h·ªá th·ªëng",
                    description="C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã b·∫£ng ƒëua. Vui l√≤ng th·ª≠ l·∫°i!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
        
        @self.bot.command(name='myleaderboard', aliases=['myrank', 'hangtoi'])
        async def my_leaderboard_command(ctx):
            """
            Xem th·ª© h·∫°ng c√° nh√¢n trong tu·∫ßn
            
            Usage: ;myleaderboard
            """
            try:
                week = self.get_current_week()
                user_str = str(ctx.author.id)
                
                if week not in self.weekly_data or user_str not in self.weekly_data[week]:
                    embed = discord.Embed(
                        title="üìä Th·ª© h·∫°ng c·ªßa b·∫°n",
                        description="B·∫°n ch∆∞a tham gia cu·ªôc thi tu·∫ßn n√†y!",
                        color=discord.Color.blue()
                    )
                    embed.add_field(
                        name="üí° C√°ch tham gia:",
                        value="Ch∆°i b·∫•t k·ª≥ game n√†o v√† th·∫Øng ƒë·ªÉ l√™n b·∫£ng x·∫øp h·∫°ng!",
                        inline=False
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # L·∫•y d·ªØ li·ªáu user
                user_data = self.weekly_data[week][user_str]
                
                # T√¨m th·ª© h·∫°ng
                leaderboard = self.get_weekly_leaderboard(100)  # L·∫•y nhi·ªÅu ƒë·ªÉ t√¨m th·ª© h·∫°ng
                rank = None
                for i, (uid, _) in enumerate(leaderboard):
                    if uid == user_str:
                        rank = i + 1
                        break
                
                embed = discord.Embed(
                    title="üìä Th·ª© h·∫°ng c·ªßa b·∫°n",
                    description=f"Th·ªëng k√™ tu·∫ßn {week}",
                    color=discord.Color.green(),
                    timestamp=datetime.now()
                )
                
                embed.add_field(
                    name="üèÖ Th·ª© h·∫°ng:",
                    value=f"**#{rank}** / {len(leaderboard)} ng∆∞·ªùi" if rank else "Ch∆∞a x√°c ƒë·ªãnh",
                    inline=True
                )
                
                embed.add_field(
                    name="üéØ T·ªïng th·∫Øng:",
                    value=f"**{user_data['total_wins']}** v√°n",
                    inline=True
                )
                
                embed.add_field(
                    name="üéÆ Chi ti·∫øt:",
                    value=(
                        f"üé≤ T√†i X·ªâu: {user_data.get('taixiu_wins', 0)}\n"
                        f"‚úÇÔ∏è RPS: {user_data.get('rps_wins', 0)}\n"
                        f"üé∞ Slot: {user_data.get('slot_wins', 0)}\n"
                        f"ü™ô Flip: {user_data.get('flip_wins', 0)}\n"
                        f"üÉè Blackjack: {user_data.get('blackjack_wins', 0)}"
                    ),
                    inline=False
                )
                
                # Ph·∫ßn th∆∞·ªüng d·ª± ki·∫øn
                reward_text = "üèÖ Kh√¥ng c√≥ ph·∫ßn th∆∞·ªüng"
                if rank:
                    if rank == 1:
                        reward_text = "ü•á 2,000 EXP Rare"
                    elif rank == 2:
                        reward_text = "ü•à 1,000 EXP Rare"
                    elif rank == 3:
                        reward_text = "ü•â 500 EXP Rare"
                    else:
                        reward_text = "üèÖ Kh√¥ng c√≥ ph·∫ßn th∆∞·ªüng"
                
                embed.add_field(
                    name="üéÅ Ph·∫ßn th∆∞·ªüng d·ª± ki·∫øn:",
                    value=reward_text,
                    inline=False
                )
                
                embed.set_author(
                    name=ctx.author.display_name,
                    icon_url=ctx.author.avatar.url if ctx.author.avatar else ctx.author.default_avatar.url
                )
                
                embed.set_footer(text="Ch∆°i th√™m ƒë·ªÉ c·∫£i thi·ªán th·ª© h·∫°ng!")
                
                await ctx.reply(embed=embed, mention_author=True)
                
            except Exception as e:
                logger.error(f"L·ªói trong my leaderboard command: {e}")
                embed = discord.Embed(
                    title="‚ùå L·ªói h·ªá th·ªëng",
                    description="C√≥ l·ªói x·∫£y ra khi xem th·ª© h·∫°ng. Vui l√≤ng th·ª≠ l·∫°i!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
        
        @self.bot.command(name='weeklyhistory', aliases=['lichsutop', 'tophistory'])
        async def weekly_history_command(ctx):
            """
            Xem l·ªãch s·ª≠ c√°c tu·∫ßn tr∆∞·ªõc
            
            Usage: ;weeklyhistory
            """
            try:
                if 'history' not in self.weekly_data or not self.weekly_data['history']:
                    embed = discord.Embed(
                        title="üìö L·ªãch s·ª≠ b·∫£ng ƒëua",
                        description="Ch∆∞a c√≥ l·ªãch s·ª≠ tu·∫ßn n√†o!",
                        color=discord.Color.blue()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                embed = discord.Embed(
                    title="üìö L·ªäCH S·ª¨ B·∫¢NG ƒêUA H√ÄNG TU·∫¶N",
                    description="C√°c nh√† v√¥ ƒë·ªãch tu·∫ßn tr∆∞·ªõc",
                    color=discord.Color.purple(),
                    timestamp=datetime.now()
                )
                
                # L·∫•y 5 tu·∫ßn g·∫ßn nh·∫•t
                recent_weeks = sorted(self.weekly_data['history'].keys(), reverse=True)[:5]
                
                for week in recent_weeks:
                    history = self.weekly_data['history'][week]
                    rewards = history.get('rewards', [])
                    
                    if rewards:
                        winners_text = ""
                        for reward in rewards:
                            try:
                                user = self.bot.get_user(reward['user_id'])
                                username = user.display_name if user else f"User {reward['user_id']}"
                                if reward['rank'] == 1:
                                    rank_emoji = "ü•á"
                                elif reward['rank'] == 2:
                                    rank_emoji = "ü•à"
                                elif reward['rank'] == 3:
                                    rank_emoji = "ü•â"
                                else:
                                    rank_emoji = "üèÖ"
                                winners_text += f"{rank_emoji} **{username}** - {reward['wins']} wins ‚Üí {reward['reward']:,} EXP\n"
                            except:
                                continue
                        
                        embed.add_field(
                            name=f"üìÖ Tu·∫ßn {week}",
                            value=winners_text if winners_text else "Kh√¥ng c√≥ ng∆∞·ªùi th·∫Øng",
                            inline=False
                        )
                
                embed.set_footer(text="Top 5 tu·∫ßn g·∫ßn nh·∫•t")
                await ctx.reply(embed=embed, mention_author=True)
                
            except Exception as e:
                logger.error(f"L·ªói trong weekly history command: {e}")
                embed = discord.Embed(
                    title="‚ùå L·ªói h·ªá th·ªëng",
                    description="C√≥ l·ªói x·∫£y ra khi xem l·ªãch s·ª≠. Vui l√≤ng th·ª≠ l·∫°i!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
        
        @self.bot.command(name='resetweekly', aliases=['resetbangdua'])
        async def reset_weekly_command(ctx):
            """
            Reset b·∫£ng ƒëua tu·∫ßn v√† trao th∆∞·ªüng (Admin only)
            
            Usage: ;resetweekly
            """
            try:
                # Ki·ªÉm tra quy·ªÅn admin
                if not self.bot_instance.is_admin(ctx.author.id):
                    embed = discord.Embed(
                        title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                        description="Ch·ªâ Admin m·ªõi c√≥ th·ªÉ reset b·∫£ng ƒëua tu·∫ßn!",
                        color=discord.Color.red()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # Th·ª±c hi·ªán reset
                result = self.reset_weekly_leaderboard()
                
                if "message" in result:
                    embed = discord.Embed(
                        title="‚ÑπÔ∏è Th√¥ng b√°o",
                        description=result["message"],
                        color=discord.Color.blue()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # T·∫°o embed th√¥ng b√°o k·∫øt qu·∫£
                embed = discord.Embed(
                    title="üèÜ RESET B·∫¢NG ƒêUA TU·∫¶N TH√ÄNH C√îNG",
                    description=f"ƒê√£ reset tu·∫ßn {result['week']} v√† trao th∆∞·ªüng!",
                    color=discord.Color.green(),
                    timestamp=datetime.now()
                )
                
                if result['rewards_given']:
                    rewards_text = ""
                    for reward in result['rewards_given']:
                        try:
                            user = self.bot.get_user(reward['user_id'])
                            username = user.display_name if user else f"User {reward['user_id']}"
                            if reward['rank'] == 1:
                                rank_emoji = "ü•á"
                            elif reward['rank'] == 2:
                                rank_emoji = "ü•à"
                            elif reward['rank'] == 3:
                                rank_emoji = "ü•â"
                            else:
                                rank_emoji = "üèÖ"
                            rewards_text += f"{rank_emoji} **{username}** - {reward['wins']} wins ‚Üí **{reward['reward']:,} EXP**\n"
                        except:
                            continue
                    
                    embed.add_field(
                        name="üéÅ Ph·∫ßn th∆∞·ªüng ƒë√£ trao:",
                        value=rewards_text,
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="üéÅ Ph·∫ßn th∆∞·ªüng ƒë√£ trao:",
                        value="Kh√¥ng c√≥ ai ƒë·ªß ƒëi·ªÅu ki·ªán nh·∫≠n th∆∞·ªüng tu·∫ßn n√†y",
                        inline=False
                    )
                
                embed.add_field(
                    name="üìä Th·ªëng k√™:",
                    value=f"‚Ä¢ **T·ªïng ng∆∞·ªùi tham gia:** {result['total_participants']}\n‚Ä¢ **Tu·∫ßn m·ªõi b·∫Øt ƒë·∫ßu:** {self.get_current_week()}",
                    inline=False
                )
                
                embed.set_footer(text="B·∫£ng ƒëua tu·∫ßn m·ªõi ƒë√£ b·∫Øt ƒë·∫ßu!")
                await ctx.reply(embed=embed, mention_author=True)
                
            except Exception as e:
                logger.error(f"L·ªói trong reset weekly command: {e}")
                embed = discord.Embed(
                    title="‚ùå L·ªói h·ªá th·ªëng",
                    description="C√≥ l·ªói x·∫£y ra khi reset b·∫£ng ƒëua. Vui l√≤ng th·ª≠ l·∫°i!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
        
        logger.info("ƒê√£ ƒëƒÉng k√Ω Leaderboard commands: weeklytop, myleaderboard, weeklyhistory, resetweekly")
