"""
Feedback Commands for Discord Bot
G·ª≠i feedback/b√°o l·ªói v·ªÅ DM cho Supreme Admin
"""
import discord
from discord.ext import commands
import logging
import json
import os
from datetime import datetime
from .base import BaseCommand

logger = logging.getLogger(__name__)

class FeedbackCommands(BaseCommand):
    """Class ch·ª©a l·ªánh feedback"""
    
    def __init__(self, bot_instance):
        super().__init__(bot_instance)
        self.feedback_file = "feedback_history.json"
        
    def register_commands(self):
        """Register feedback commands"""
        
        @self.bot.command(name='feedback', aliases=['report'])
        async def send_feedback(ctx, *, content=None):
            """G·ª≠i feedback/b√°o l·ªói v·ªÅ DM cho Supreme Admin"""
            if not content:
                embed = discord.Embed(
                    title="üìù G·ª≠i Feedback",
                    description="Vui l√≤ng cung c·∫•p n·ªôi dung feedback!\n\n**C√°ch s·ª≠ d·ª•ng:**\n; <n·ªôi dung>`",
                    color=discord.Color.blue()
                )
                embed.add_field(
                    name="üí° V√≠ d·ª•",
                    value=(
                        "; Bot b·ªã l·ªói khi d√πng l·ªánh play`\n"
                        "; ƒê·ªÅ xu·∫•t th√™m l·ªánh mute t·∫°m th·ªùi`\n"
                        "; C·∫£m ∆°n admin ƒë√£ t·∫°o bot tuy·ªát v·ªùi!`"
                    ),
                    inline=False
                )
                embed.add_field(
                    name="üìã Lo·∫°i feedback",
                    value="‚Ä¢ B√°o l·ªói (Bug report)\n‚Ä¢ ƒê·ªÅ xu·∫•t t√≠nh nƒÉng\n‚Ä¢ G√≥p √Ω c·∫£i thi·ªán\n‚Ä¢ L·ªùi c·∫£m ∆°n",
                    inline=False
                )
                embed.set_footer(text="Feedback s·∫Ω ƒë∆∞·ª£c g·ª≠i tr·ª±c ti·∫øp ƒë·∫øn Supreme Admin")
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # L·∫•y th√¥ng tin Supreme Admin
            supreme_admin_id = await self._get_supreme_admin_id()
            if not supreme_admin_id:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng t√¨m th·∫•y Supreme Admin",
                    description="Hi·ªán t·∫°i ch∆∞a c√≥ Supreme Admin ƒë∆∞·ª£c thi·∫øt l·∫≠p!\n\nVui l√≤ng li√™n h·ªá admin server ƒë·ªÉ thi·∫øt l·∫≠p.",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # L·∫•y Supreme Admin user
            try:
                supreme_admin = await self.bot.fetch_user(supreme_admin_id)
            except discord.NotFound:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y Supreme Admin",
                    description="Supreme Admin ID kh√¥ng h·ª£p l·ªá ho·∫∑c user kh√¥ng t·ªìn t·∫°i!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            except Exception as e:
                logger.error(f"Error fetching supreme admin: {e}")
                embed = discord.Embed(
                    title="‚ùå L·ªói h·ªá th·ªëng",
                    description="Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Supreme Admin. Vui l√≤ng th·ª≠ l·∫°i sau!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # T·∫°o embed feedback ƒë·ªÉ g·ª≠i cho Supreme Admin
            feedback_embed = discord.Embed(
                title="üìù Feedback t·ª´ User",
                description=content,
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            
            # Th√¥ng tin ng∆∞·ªùi g·ª≠i
            feedback_embed.add_field(
                name="üë§ Ng∆∞·ªùi g·ª≠i",
                value=f"{ctx.author.mention} ({ctx.author})",
                inline=True
            )
            feedback_embed.add_field(
                name="üÜî User ID",
                value=str(ctx.author.id),
                inline=True
            )
            feedback_embed.add_field(
                name="üìÖ Th·ªùi gian",
                value=f"<t:{int(datetime.now().timestamp())}:F>",
                inline=True
            )
            
            # Th√¥ng tin server
            feedback_embed.add_field(
                name="üè† Server",
                value=f"{ctx.guild.name} ({ctx.guild.id})",
                inline=True
            )
            feedback_embed.add_field(
                name="üì¢ Channel",
                value=f"{ctx.channel.mention} ({ctx.channel.name})",
                inline=True
            )
            feedback_embed.add_field(
                name="üîó Jump Link",
                value=f"[ƒê·∫øn tin nh·∫Øn]({ctx.message.jump_url})",
                inline=True
            )
            
            # Avatar ng∆∞·ªùi g·ª≠i
            if ctx.author.avatar:
                feedback_embed.set_thumbnail(url=ctx.author.avatar.url)
            
            feedback_embed.set_footer(
                text=f"Feedback ID: {ctx.message.id}",
                icon_url=self.bot.user.avatar.url if self.bot.user and self.bot.user.avatar else None
            )
            
            # G·ª≠i DM cho Supreme Admin
            try:
                await supreme_admin.send(embed=feedback_embed)
                
                # L∆∞u feedback v√†o history
                await self._save_feedback_history({
                    'id': str(ctx.message.id),
                    'user_id': str(ctx.author.id),
                    'username': str(ctx.author),
                    'content': content,
                    'server_id': str(ctx.guild.id),
                    'server_name': ctx.guild.name,
                    'channel_id': str(ctx.channel.id),
                    'channel_name': ctx.channel.name,
                    'timestamp': datetime.now().isoformat(),
                    'jump_url': ctx.message.jump_url
                })
                
                # Th√¥ng b√°o th√†nh c√¥ng cho user
                success_embed = discord.Embed(
                    title="‚úÖ Feedback ƒë√£ ƒë∆∞·ª£c g·ª≠i!",
                    description=f"Feedback c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn **{supreme_admin.display_name}**!",
                    color=discord.Color.green()
                )
                success_embed.add_field(
                    name="üìù N·ªôi dung",
                    value=content[:100] + ("..." if len(content) > 100 else ""),
                    inline=False
                )
                success_embed.add_field(
                    name="‚è∞ Th·ªùi gian g·ª≠i",
                    value=f"<t:{int(datetime.now().timestamp())}:R>",
                    inline=True
                )
                success_embed.add_field(
                    name="üìã Feedback ID",
                    value=f"`{ctx.message.id}`",
                    inline=True
                )
                success_embed.set_footer(text="C·∫£m ∆°n b·∫°n ƒë√£ g√≥p √Ω ƒë·ªÉ c·∫£i thi·ªán bot!")
                
                await ctx.reply(embed=success_embed, mention_author=True)
                logger.info(f"Feedback sent from {ctx.author} to Supreme Admin: {content[:50]}...")
                
            except discord.Forbidden:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng th·ªÉ g·ª≠i DM",
                    description=f"Supreme Admin **{supreme_admin.display_name}** ƒë√£ t·∫Øt DM ho·∫∑c ch·∫∑n bot!\n\nVui l√≤ng li√™n h·ªá admin qua c√°ch kh√°c.",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                logger.warning(f"Cannot send DM to Supreme Admin {supreme_admin}: DM disabled or blocked")
                
            except Exception as e:
                logger.error(f"Error sending feedback DM: {e}")
                embed = discord.Embed(
                    title="‚ùå L·ªói g·ª≠i feedback",
                    description="C√≥ l·ªói x·∫£y ra khi g·ª≠i feedback. Vui l√≤ng th·ª≠ l·∫°i sau!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
        
        @self.bot.command(name='feedbackstats', aliases=['fbstats'])
        async def feedback_stats(ctx):
            """Xem th·ªëng k√™ feedback (ch·ªâ Supreme Admin)"""
            # Ki·ªÉm tra quy·ªÅn Supreme Admin
            supreme_admin_id = await self._get_supreme_admin_id()
            if not supreme_admin_id or ctx.author.id != supreme_admin_id:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ xem th·ªëng k√™ feedback!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # ƒê·ªçc feedback history
            feedback_history = await self._load_feedback_history()
            
            if not feedback_history:
                embed = discord.Embed(
                    title="üìä Th·ªëng k√™ Feedback",
                    description="Ch∆∞a c√≥ feedback n√†o ƒë∆∞·ª£c g·ª≠i!",
                    color=discord.Color.blue()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Th·ªëng k√™
            total_feedback = len(feedback_history)
            unique_users = len(set(f['user_id'] for f in feedback_history))
            recent_feedback = [f for f in feedback_history if 
                             (datetime.now() - datetime.fromisoformat(f['timestamp'])).days <= 7]
            
            embed = discord.Embed(
                title="üìä Th·ªëng k√™ Feedback",
                description="T·ªïng quan v·ªÅ feedback t·ª´ users",
                color=discord.Color.purple()
            )
            
            embed.add_field(
                name="üìù T·ªïng feedback",
                value=f"{total_feedback} feedback",
                inline=True
            )
            embed.add_field(
                name="üë• Unique users",
                value=f"{unique_users} ng∆∞·ªùi",
                inline=True
            )
            embed.add_field(
                name="üìÖ Tu·∫ßn n√†y",
                value=f"{len(recent_feedback)} feedback",
                inline=True
            )
            
            # Top 5 feedback g·∫ßn nh·∫•t
            if feedback_history:
                recent_list = ""
                for i, feedback in enumerate(sorted(feedback_history, 
                                                  key=lambda x: x['timestamp'], reverse=True)[:5]):
                    timestamp = datetime.fromisoformat(feedback['timestamp'])
                    recent_list += f"`{i+1}.` **{feedback['username']}**\n"
                    recent_list += f"    {feedback['content'][:50]}{'...' if len(feedback['content']) > 50 else ''}\n"
                    recent_list += f"    <t:{int(timestamp.timestamp())}:R>\n\n"
                
                embed.add_field(
                    name="üìã Feedback g·∫ßn nh·∫•t",
                    value=recent_list,
                    inline=False
                )
            
            embed.set_footer(text=f"D·ªØ li·ªáu t·ª´ {self.feedback_file}")
            await ctx.reply(embed=embed, mention_author=True)
    
    async def _get_supreme_admin_id(self):
        """L·∫•y Supreme Admin ID t·ª´ file config"""
        try:
            if os.path.exists("supreme_admin.json"):
                with open("supreme_admin.json", "r", encoding="utf-8") as f:
                    data = json.load(f)
                    return data.get("supreme_admin_id")
        except Exception as e:
            logger.error(f"Error reading supreme admin config: {e}")
        return None
    
    async def _save_feedback_history(self, feedback_data):
        """L∆∞u feedback v√†o history file"""
        try:
            history = await self._load_feedback_history()
            history.append(feedback_data)
            
            # Gi·ªØ t·ªëi ƒëa 1000 feedback g·∫ßn nh·∫•t
            if len(history) > 1000:
                history = history[-1000:]
            
            with open(self.feedback_file, "w", encoding="utf-8") as f:
                json.dump(history, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"Error saving feedback history: {e}")
    
    async def _load_feedback_history(self):
        """ƒê·ªçc feedback history t·ª´ file"""
        try:
            if os.path.exists(self.feedback_file):
                with open(self.feedback_file, "r", encoding="utf-8") as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"Error loading feedback history: {e}")
        return []
