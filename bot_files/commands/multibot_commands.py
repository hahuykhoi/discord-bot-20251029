import discord
from discord.ext import commands
import json
import os
import asyncio
import aiohttp
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class MultiBotCommands:
    def __init__(self, bot_instance):
        self.bot_instance = bot_instance
        self.bot = bot_instance.bot
        self.tokens_file = 'tokens/bot_config.json'
        self.bot_configs = {}
        self.load_bot_configs()
        self.setup_commands()
    
    def load_bot_configs(self):
        """Load bot configurations from file"""
        try:
            if os.path.exists(self.tokens_file):
                with open(self.tokens_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.bot_configs = data.get('bots', {})
                    self.settings = data.get('settings', {})
                logger.info(f"Loaded {len(self.bot_configs)} bot configurations")
            else:
                logger.warning("Bot config file not found, creating default")
                self.create_default_config()
        except Exception as e:
            logger.error(f"Error loading bot configs: {e}")
            self.bot_configs = {}
            self.settings = {}
    
    def create_default_config(self):
        """Create default configuration file"""
        default_config = {
            "bots": {},
            "settings": {
                "max_concurrent_bots": 5,
                "message_delay": 1.0,
                "retry_attempts": 3,
                "timeout": 30
            },
            "last_updated": datetime.now().isoformat()
        }
        
        os.makedirs('tokens', exist_ok=True)
        with open(self.tokens_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=4, ensure_ascii=False)
    
    def save_bot_configs(self):
        """Save bot configurations to file"""
        try:
            data = {
                "bots": self.bot_configs,
                "settings": self.settings,
                "last_updated": datetime.now().isoformat()
            }
            with open(self.tokens_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=4, ensure_ascii=False)
            logger.info("Bot configurations saved successfully")
        except Exception as e:
            logger.error(f"Error saving bot configs: {e}")
    
    async def send_message_via_bot(self, token, channel_id, content):
        """Send message using specific bot token"""
        try:
            headers = {
                'Authorization': f'Bot {token}',
                'Content-Type': 'application/json'
            }
            
            payload = {
                'content': content
            }
            
            async with aiohttp.ClientSession() as session:
                url = f'https://discord.com/api/v10/channels/{channel_id}/messages'
                async with session.post(url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        return True, "Success"
                    else:
                        error_text = await response.text()
                        return False, f"HTTP {response.status}: {error_text}"
        
        except Exception as e:
            return False, str(e)
    
    async def send_dm_via_bot(self, token, user_id, content):
        """Send DM using specific bot token"""
        try:
            headers = {
                'Authorization': f'Bot {token}',
                'Content-Type': 'application/json'
            }
            
            # First create DM channel
            dm_payload = {
                'recipient_id': user_id
            }
            
            async with aiohttp.ClientSession() as session:
                # Create DM channel
                dm_url = 'https://discord.com/api/v10/users/@me/channels'
                async with session.post(dm_url, headers=headers, json=dm_payload) as dm_response:
                    if dm_response.status != 200:
                        error_text = await dm_response.text()
                        return False, f"Failed to create DM: HTTP {dm_response.status}: {error_text}"
                    
                    dm_data = await dm_response.json()
                    dm_channel_id = dm_data['id']
                
                # Send message to DM channel
                message_payload = {
                    'content': content
                }
                
                message_url = f'https://discord.com/api/v10/channels/{dm_channel_id}/messages'
                async with session.post(message_url, headers=headers, json=message_payload) as message_response:
                    if message_response.status == 200:
                        return True, "Success"
                    else:
                        error_text = await message_response.text()
                        return False, f"HTTP {message_response.status}: {error_text}"
        
        except Exception as e:
            return False, str(e)
    
    async def change_bot_nickname(self, token, guild_id, nickname):
        """Change bot nickname using specific bot token"""
        try:
            headers = {
                'Authorization': f'Bot {token}',
                'Content-Type': 'application/json'
            }
            
            payload = {
                'nick': nickname
            }
            
            async with aiohttp.ClientSession() as session:
                url = f'https://discord.com/api/v10/guilds/{guild_id}/members/@me'
                async with session.patch(url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        return True, "Success"
                    else:
                        error_text = await response.text()
                        return False, f"HTTP {response.status}: {error_text}"
        
        except Exception as e:
            return False, str(e)
    
    def setup_commands(self):
        """Setup multi-bot commands"""
        
        @self.bot.command(name='multibot')
        async def multibot_command(ctx, action=None, *args):
            """
            Multi-bot management system
            
            Usage:
            ;multibot list - Xem danh s√°ch bot
            ;multibot add <name> <token> [description] - Th√™m bot m·ªõi
            ;multibot remove <name> - X√≥a bot
            ;multibot toggle <name> - B·∫≠t/t·∫Øt bot
            ;multibot send <bot_name> <channel_id> <message> - G·ª≠i tin nh·∫Øn
            ;multibot broadcast <channel_id> <message> - G·ª≠i qua t·∫•t c·∫£ bot active
            """
            # Ki·ªÉm tra quy·ªÅn admin
            if not self.bot_instance.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng Multi-Bot system!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            if not action:
                await self.show_help(ctx)
                return
            
            if action == 'list':
                await self.list_bots(ctx)
            elif action == 'add':
                await self.add_bot(ctx, args)
            elif action == 'remove':
                await self.remove_bot(ctx, args)
            elif action == 'toggle':
                await self.toggle_bot(ctx, args)
            elif action == 'send':
                await self.send_message(ctx, args)
            elif action == 'broadcast':
                await self.broadcast_message(ctx, args)
            else:
                await self.show_help(ctx)
        
        @self.bot.command(name='sendall')
        async def sendall_command(ctx, channel_id=None, count=None, *, message=None):
            """
            G·ª≠i tin nh·∫Øn qua s·ªë l∆∞·ª£ng bot t√πy ch·ªçn
            
            Usage: ;sendall <channel_id> [count] <message>
            """
            # Ki·ªÉm tra quy·ªÅn admin
            if not self.bot_instance.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh sendall!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Parse arguments
            if not channel_id:
                embed = discord.Embed(
                    title="‚ùå Thi·∫øu tham s·ªë",
                    description="C·∫ßn √≠t nh·∫•t channel ID v√† tin nh·∫Øn!",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="üí° C√°ch s·ª≠ d·ª•ng",
                    value=(
                        "`;sendall <channel_id> <message>` - G·ª≠i qua t·∫•t c·∫£ bot\n"
                        "`;sendall <channel_id> <s·ªë> <message>` - G·ª≠i qua s·ªë bot c·ª• th·ªÉ"
                    ),
                    inline=False
                )
                embed.add_field(
                    name="üìù V√≠ d·ª•",
                    value=(
                        "`;sendall 123456789 Hello everyone!`\n"
                        "`;sendall 123456789 3 Hello from 3 bots!`"
                    ),
                    inline=False
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Check if count is provided
            bot_count = None
            if count and count.isdigit():
                bot_count = int(count)
                if bot_count < 1:
                    embed = discord.Embed(
                        title="‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá",
                        description="S·ªë l∆∞·ª£ng bot ph·∫£i l·ªõn h∆°n 0!",
                        color=discord.Color.red()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
            elif count and not count.isdigit():
                # count is actually part of message
                message = f"{count} {message}" if message else count
                bot_count = None
            
            if not message:
                embed = discord.Embed(
                    title="‚ùå Thi·∫øu tin nh·∫Øn",
                    description="Vui l√≤ng nh·∫≠p n·ªôi dung tin nh·∫Øn!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            try:
                channel_id_int = int(channel_id)
            except ValueError:
                embed = discord.Embed(
                    title="‚ùå Channel ID kh√¥ng h·ª£p l·ªá",
                    description="Channel ID ph·∫£i l√† s·ªë!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Call custom broadcast with count
            await self.broadcast_with_count(ctx, channel_id_int, message, bot_count)
        
        @self.bot.command(name='dmall')
        async def dmall_command(ctx, user_id=None, count=None, *, message=None):
            """
            G·ª≠i DM qua s·ªë l∆∞·ª£ng bot t√πy ch·ªçn
            
            Usage: ;dmall <user_id> [count] <message>
            """
            # Ki·ªÉm tra quy·ªÅn admin
            if not self.bot_instance.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh dmall!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Parse arguments
            if not user_id:
                embed = discord.Embed(
                    title="‚ùå Thi·∫øu tham s·ªë",
                    description="C·∫ßn √≠t nh·∫•t user ID v√† tin nh·∫Øn!",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="üí° C√°ch s·ª≠ d·ª•ng",
                    value=(
                        "`;dmall <user_id> <message>` - DM qua t·∫•t c·∫£ bot\n"
                        "`;dmall <user_id> <s·ªë> <message>` - DM qua s·ªë bot c·ª• th·ªÉ\n"
                        "`;dmall @user <message>` - DM qua mention"
                    ),
                    inline=False
                )
                embed.add_field(
                    name="üìù V√≠ d·ª•",
                    value=(
                        "`;dmall 123456789 Hello!`\n"
                        "`;dmall @user 2 Hello from 2 bots!`"
                    ),
                    inline=False
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Handle mention
            if user_id.startswith('<@') and user_id.endswith('>'):
                user_id = user_id[2:-1]
                if user_id.startswith('!'):
                    user_id = user_id[1:]
            
            # Check if count is provided
            bot_count = None
            if count and count.isdigit():
                bot_count = int(count)
                if bot_count < 1:
                    embed = discord.Embed(
                        title="‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá",
                        description="S·ªë l∆∞·ª£ng bot ph·∫£i l·ªõn h∆°n 0!",
                        color=discord.Color.red()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
            elif count and not count.isdigit():
                # count is actually part of message
                message = f"{count} {message}" if message else count
                bot_count = None
            
            if not message:
                embed = discord.Embed(
                    title="‚ùå Thi·∫øu tin nh·∫Øn",
                    description="Vui l√≤ng nh·∫≠p n·ªôi dung tin nh·∫Øn!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            try:
                user_id_int = int(user_id)
            except ValueError:
                embed = discord.Embed(
                    title="‚ùå User ID kh√¥ng h·ª£p l·ªá",
                    description="User ID ph·∫£i l√† s·ªë!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Call DM broadcast
            await self.dm_broadcast_with_count(ctx, user_id_int, message, bot_count)
        
        @self.bot.command(name='setupbot')
        async def setupbot_command(ctx, *, nickname=None):
            """
            ƒê·ªïi t√™n t·∫•t c·∫£ bot th√†nh m·ªôt t√™n
            
            Usage: ;setupbot <nickname>
            """
            # Ki·ªÉm tra quy·ªÅn admin
            if not self.bot_instance.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh setupbot!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            if not nickname:
                embed = discord.Embed(
                    title="‚ùå Thi·∫øu t√™n bot",
                    description="Vui l√≤ng nh·∫≠p t√™n m·ªõi cho t·∫•t c·∫£ bot!",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="üí° C√°ch s·ª≠ d·ª•ng",
                    value="`;setupbot <t√™n_m·ªõi>`",
                    inline=False
                )
                embed.add_field(
                    name="üìù V√≠ d·ª•",
                    value="`;setupbot Helper Bot`",
                    inline=False
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            if len(nickname) > 32:
                embed = discord.Embed(
                    title="‚ùå T√™n qu√° d√†i",
                    description="T√™n bot kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 32 k√Ω t·ª±!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # L·∫•y danh s√°ch bot active
            active_bots = {name: config for name, config in self.bot_configs.items() 
                          if config.get('active', False)}
            
            if not active_bots:
                embed = discord.Embed(
                    title="‚ö†Ô∏è Kh√¥ng c√≥ bot active",
                    description="Kh√¥ng c√≥ bot n√†o ƒë∆∞·ª£c k√≠ch ho·∫°t ƒë·ªÉ ƒë·ªïi t√™n!",
                    color=discord.Color.orange()
                )
                embed.add_field(
                    name="üí° Gi·∫£i ph√°p",
                    value="S·ª≠ d·ª•ng `;multibot toggle <name>` ƒë·ªÉ k√≠ch ho·∫°t bot",
                    inline=False
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Hi·ªÉn th·ªã progress
            progress_embed = discord.Embed(
                title="ü§ñ ƒêang ƒë·ªïi t√™n bot...",
                description=f"ƒê·ªïi t√™n {len(active_bots)} bot th√†nh: **{nickname}**",
                color=discord.Color.yellow()
            )
            progress_msg = await ctx.reply(embed=progress_embed, mention_author=True)
            
            # ƒê·ªïi t√™n t·∫•t c·∫£ bot
            results = {}
            delay = self.settings.get('message_delay', 1.0)
            guild_id = ctx.guild.id
            
            for bot_name, config in active_bots.items():
                token = config['token']
                success, result = await self.change_bot_nickname(token, guild_id, nickname)
                results[bot_name] = {'success': success, 'result': result}
                
                # Delay gi·ªØa c√°c bot ƒë·ªÉ tr√°nh rate limit
                await asyncio.sleep(delay)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            success_count = sum(1 for r in results.values() if r['success'])
            fail_count = len(results) - success_count
            
            if success_count > 0:
                embed = discord.Embed(
                    title="ü§ñ ƒê·ªïi t√™n bot ho√†n t·∫•t",
                    description=f"ƒê√£ ƒë·ªïi t√™n {success_count}/{len(active_bots)} bot th√†nh: **{nickname}**",
                    color=discord.Color.green() if fail_count == 0 else discord.Color.orange()
                )
            else:
                embed = discord.Embed(
                    title="‚ùå ƒê·ªïi t√™n th·∫•t b·∫°i",
                    description="Kh√¥ng th·ªÉ ƒë·ªïi t√™n bot n√†o!",
                    color=discord.Color.red()
                )
            
            # Chi ti·∫øt k·∫øt qu·∫£
            success_bots = [name for name, r in results.items() if r['success']]
            fail_bots = [name for name, r in results.items() if not r['success']]
            
            if success_bots:
                embed.add_field(
                    name="‚úÖ Th√†nh c√¥ng",
                    value=', '.join(success_bots),
                    inline=False
                )
            
            if fail_bots:
                embed.add_field(
                    name="‚ùå Th·∫•t b·∫°i",
                    value=', '.join(fail_bots),
                    inline=False
                )
                
                # Hi·ªÉn th·ªã l√Ω do th·∫•t b·∫°i ƒë·∫ßu ti√™n
                first_fail = next((r['result'] for r in results.values() if not r['success']), None)
                if first_fail:
                    embed.add_field(
                        name="üîç L√Ω do th·∫•t b·∫°i",
                        value=first_fail[:200] + "..." if len(first_fail) > 200 else first_fail,
                        inline=False
                    )
            
            embed.add_field(
                name="üìù T√™n m·ªõi",
                value=f"**{nickname}**",
                inline=False
            )
            
            embed.set_footer(text="L∆∞u √Ω: Bot c·∫ßn quy·ªÅn 'Change Nickname' ƒë·ªÉ ƒë·ªïi t√™n")
            
            await progress_msg.edit(embed=embed)
            logger.info(f"Admin {ctx.author} changed {success_count}/{len(active_bots)} bot nicknames to: {nickname}")
    
    async def broadcast_with_count(self, ctx, channel_id, message, bot_count=None):
        """Broadcast message with custom bot count"""
        # L·∫•y danh s√°ch bot active
        active_bots = {name: config for name, config in self.bot_configs.items() 
                      if config.get('active', False)}
        
        if not active_bots:
            embed = discord.Embed(
                title="‚ö†Ô∏è Kh√¥ng c√≥ bot active",
                description="Kh√¥ng c√≥ bot n√†o ƒë∆∞·ª£c k√≠ch ho·∫°t ƒë·ªÉ g·ª≠i tin nh·∫Øn!",
                color=discord.Color.orange()
            )
            embed.add_field(
                name="üí° Gi·∫£i ph√°p",
                value="S·ª≠ d·ª•ng `;multibot toggle <name>` ƒë·ªÉ k√≠ch ho·∫°t bot",
                inline=False
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng bot n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
        if bot_count:
            if bot_count > len(active_bots):
                embed = discord.Embed(
                    title="‚ö†Ô∏è S·ªë l∆∞·ª£ng v∆∞·ª£t qu√°",
                    description=f"Ch·ªâ c√≥ {len(active_bots)} bot active, kh√¥ng th·ªÉ g·ª≠i qua {bot_count} bot!",
                    color=discord.Color.orange()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # L·∫•y s·ªë l∆∞·ª£ng bot ƒë·∫ßu ti√™n
            active_bots = dict(list(active_bots.items())[:bot_count])
        
        # Hi·ªÉn th·ªã progress
        progress_embed = discord.Embed(
            title="üì° ƒêang g·ª≠i tin nh·∫Øn...",
            description=f"G·ª≠i tin nh·∫Øn qua {len(active_bots)} bot",
            color=discord.Color.yellow()
        )
        progress_msg = await ctx.reply(embed=progress_embed, mention_author=True)
        
        # G·ª≠i tin nh·∫Øn qua c√°c bot
        results = {}
        delay = self.settings.get('message_delay', 1.0)
        
        for bot_name, config in active_bots.items():
            token = config['token']
            success, result = await self.send_message_via_bot(token, channel_id, message)
            results[bot_name] = {'success': success, 'result': result}
            
            # Delay gi·ªØa c√°c bot ƒë·ªÉ tr√°nh rate limit
            await asyncio.sleep(delay)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        success_count = sum(1 for r in results.values() if r['success'])
        fail_count = len(results) - success_count
        
        if success_count > 0:
            embed = discord.Embed(
                title="üì° G·ª≠i tin nh·∫Øn ho√†n t·∫•t",
                description=f"ƒê√£ g·ª≠i tin nh·∫Øn qua {success_count}/{len(active_bots)} bot",
                color=discord.Color.green() if fail_count == 0 else discord.Color.orange()
            )
        else:
            embed = discord.Embed(
                title="‚ùå G·ª≠i tin nh·∫Øn th·∫•t b·∫°i",
                description="Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn qua bot n√†o!",
                color=discord.Color.red()
            )
        
        # Chi ti·∫øt k·∫øt qu·∫£
        success_bots = [name for name, r in results.items() if r['success']]
        fail_bots = [name for name, r in results.items() if not r['success']]
        
        if success_bots:
            embed.add_field(
                name="‚úÖ Th√†nh c√¥ng",
                value=', '.join(success_bots),
                inline=False
            )
        
        if fail_bots:
            embed.add_field(
                name="‚ùå Th·∫•t b·∫°i",
                value=', '.join(fail_bots),
                inline=False
            )
        
        embed.add_field(
            name="üìù N·ªôi dung",
            value=message[:200] + "..." if len(message) > 200 else message,
            inline=False
        )
        
        embed.add_field(
            name="üìç K√™nh",
            value=f"<#{channel_id}>",
            inline=True
        )
        
        if bot_count:
            embed.add_field(
                name="ü§ñ S·ªë bot",
                value=f"{len(active_bots)} bot",
                inline=True
            )
        
        await progress_msg.edit(embed=embed)
        logger.info(f"Admin {ctx.author} sent message via {success_count}/{len(active_bots)} bots")
    
    async def dm_broadcast_with_count(self, ctx, user_id, message, bot_count=None):
        """Broadcast DM with custom bot count"""
        # L·∫•y danh s√°ch bot active
        active_bots = {name: config for name, config in self.bot_configs.items() 
                      if config.get('active', False)}
        
        if not active_bots:
            embed = discord.Embed(
                title="‚ö†Ô∏è Kh√¥ng c√≥ bot active",
                description="Kh√¥ng c√≥ bot n√†o ƒë∆∞·ª£c k√≠ch ho·∫°t ƒë·ªÉ g·ª≠i DM!",
                color=discord.Color.orange()
            )
            embed.add_field(
                name="üí° Gi·∫£i ph√°p",
                value="S·ª≠ d·ª•ng `;multibot toggle <name>` ƒë·ªÉ k√≠ch ho·∫°t bot",
                inline=False
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng bot n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
        if bot_count:
            if bot_count > len(active_bots):
                embed = discord.Embed(
                    title="‚ö†Ô∏è S·ªë l∆∞·ª£ng v∆∞·ª£t qu√°",
                    description=f"Ch·ªâ c√≥ {len(active_bots)} bot active, kh√¥ng th·ªÉ g·ª≠i qua {bot_count} bot!",
                    color=discord.Color.orange()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # L·∫•y s·ªë l∆∞·ª£ng bot ƒë·∫ßu ti√™n
            active_bots = dict(list(active_bots.items())[:bot_count])
        
        # Hi·ªÉn th·ªã progress
        progress_embed = discord.Embed(
            title="üí¨ ƒêang g·ª≠i DM...",
            description=f"G·ª≠i DM qua {len(active_bots)} bot",
            color=discord.Color.yellow()
        )
        progress_msg = await ctx.reply(embed=progress_embed, mention_author=True)
        
        # G·ª≠i DM qua c√°c bot
        results = {}
        delay = self.settings.get('message_delay', 1.0)
        
        for bot_name, config in active_bots.items():
            token = config['token']
            success, result = await self.send_dm_via_bot(token, user_id, message)
            results[bot_name] = {'success': success, 'result': result}
            
            # Delay gi·ªØa c√°c bot ƒë·ªÉ tr√°nh rate limit
            await asyncio.sleep(delay)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        success_count = sum(1 for r in results.values() if r['success'])
        fail_count = len(results) - success_count
        
        if success_count > 0:
            embed = discord.Embed(
                title="üí¨ G·ª≠i DM ho√†n t·∫•t",
                description=f"ƒê√£ g·ª≠i DM qua {success_count}/{len(active_bots)} bot",
                color=discord.Color.green() if fail_count == 0 else discord.Color.orange()
            )
        else:
            embed = discord.Embed(
                title="‚ùå G·ª≠i DM th·∫•t b·∫°i",
                description="Kh√¥ng th·ªÉ g·ª≠i DM qua bot n√†o!",
                color=discord.Color.red()
            )
        
        # Chi ti·∫øt k·∫øt qu·∫£
        success_bots = [name for name, r in results.items() if r['success']]
        fail_bots = [name for name, r in results.items() if not r['success']]
        
        if success_bots:
            embed.add_field(
                name="‚úÖ Th√†nh c√¥ng",
                value=', '.join(success_bots),
                inline=False
            )
        
        if fail_bots:
            embed.add_field(
                name="‚ùå Th·∫•t b·∫°i",
                value=', '.join(fail_bots),
                inline=False
            )
            
            # Hi·ªÉn th·ªã l√Ω do th·∫•t b·∫°i ƒë·∫ßu ti√™n
            first_fail = next((r['result'] for r in results.values() if not r['success']), None)
            if first_fail:
                embed.add_field(
                    name="üîç L√Ω do th·∫•t b·∫°i",
                    value=first_fail[:200] + "..." if len(first_fail) > 200 else first_fail,
                    inline=False
                )
        
        embed.add_field(
            name="üìù N·ªôi dung",
            value=message[:200] + "..." if len(message) > 200 else message,
            inline=False
        )
        
        embed.add_field(
            name="üë§ Ng∆∞·ªùi nh·∫≠n",
            value=f"<@{user_id}>",
            inline=True
        )
        
        if bot_count:
            embed.add_field(
                name="ü§ñ S·ªë bot",
                value=f"{len(active_bots)} bot",
                inline=True
            )
        
        embed.set_footer(text="L∆∞u √Ω: User ph·∫£i cho ph√©p DM t·ª´ server members")
        
        await progress_msg.edit(embed=embed)
        logger.info(f"Admin {ctx.author} sent DM via {success_count}/{len(active_bots)} bots to user {user_id}")
    
    async def show_help(self, ctx):
        """Show help menu"""
        embed = discord.Embed(
            title="ü§ñ Multi-Bot System",
            description="Qu·∫£n l√Ω v√† s·ª≠ d·ª•ng nhi·ªÅu bot Discord",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="üìã Qu·∫£n l√Ω Bot",
            value=(
                "`;multibot list` - Xem danh s√°ch bot\n"
                "`;multibot add <name> <token> [m√¥ t·∫£]` - Th√™m bot\n"
                "`;multibot remove <name>` - X√≥a bot\n"
                "`;multibot toggle <name>` - B·∫≠t/t·∫Øt bot"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üí¨ G·ª≠i tin nh·∫Øn",
            value=(
                "`;sendall <channel_id> [s·ªë] <message>` - G·ª≠i qua s·ªë bot t√πy ch·ªçn\n"
                "`;dmall <user_id> [s·ªë] <message>` - DM qua s·ªë bot t√πy ch·ªçn\n"
                "`;multibot send <bot> <channel_id> <message>` - G·ª≠i qua 1 bot"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üé≠ Qu·∫£n l√Ω t√™n bot",
            value=(
                "`;setupbot <t√™n_m·ªõi>` - ƒê·ªïi t√™n t·∫•t c·∫£ bot active"
            ),
            inline=False
        )
        
        embed.add_field(
            name="‚ö†Ô∏è L∆∞u √Ω",
            value="‚Ä¢ Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng\n‚Ä¢ Token ƒë∆∞·ª£c l∆∞u tr·ªØ an to√†n\n‚Ä¢ Bot ph·∫£i c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn",
            inline=False
        )
        
        await ctx.reply(embed=embed, mention_author=True)
    
    async def list_bots(self, ctx):
        """List all configured bots"""
        if not self.bot_configs:
            embed = discord.Embed(
                title="üìù Danh s√°ch Bot tr·ªëng",
                description="Ch∆∞a c√≥ bot n√†o ƒë∆∞·ª£c c·∫•u h√¨nh. S·ª≠ d·ª•ng `;multibot add` ƒë·ªÉ th√™m bot.",
                color=discord.Color.orange()
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        embed = discord.Embed(
            title="ü§ñ Danh s√°ch Multi-Bot",
            description=f"T·ªïng c·ªông: {len(self.bot_configs)} bot",
            color=discord.Color.green()
        )
        
        for bot_name, config in self.bot_configs.items():
            status = "üü¢ Active" if config.get('active', False) else "üî¥ Inactive"
            embed.add_field(
                name=f"{config.get('name', bot_name)}",
                value=(
                    f"**Status:** {status}\n"
                    f"**ID:** {bot_name}\n"
                    f"**M√¥ t·∫£:** {config.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')}"
                ),
                inline=True
            )
        
        embed.set_footer(text="S·ª≠ d·ª•ng ;multibot toggle <name> ƒë·ªÉ b·∫≠t/t·∫Øt bot")
        await ctx.reply(embed=embed, mention_author=True)
    
    async def add_bot(self, ctx, args):
        """Add new bot configuration"""
        if len(args) < 2:
            embed = discord.Embed(
                title="‚ùå Thi·∫øu tham s·ªë",
                description="C·∫ßn √≠t nh·∫•t t√™n bot v√† token!",
                color=discord.Color.red()
            )
            embed.add_field(
                name="üí° C√°ch s·ª≠ d·ª•ng",
                value="`;multibot add <name> <token> [m√¥ t·∫£]`",
                inline=False
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        bot_name = args[0]
        token = args[1]
        description = ' '.join(args[2:]) if len(args) > 2 else "Kh√¥ng c√≥ m√¥ t·∫£"
        
        # X√≥a tin nh·∫Øn ch·ª©a token ƒë·ªÉ b·∫£o m·∫≠t
        try:
            await ctx.message.delete()
        except:
            pass
        
        if bot_name in self.bot_configs:
            embed = discord.Embed(
                title="‚ö†Ô∏è Bot ƒë√£ t·ªìn t·∫°i",
                description=f"Bot '{bot_name}' ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh tr∆∞·ªõc ƒë√≥!",
                color=discord.Color.orange()
            )
            await ctx.send(embed=embed)
            return
        
        # Th√™m bot m·ªõi
        self.bot_configs[bot_name] = {
            'name': bot_name.title(),
            'token': token,
            'description': description,
            'active': False,
            'added_by': ctx.author.id,
            'added_at': datetime.now().isoformat()
        }
        
        self.save_bot_configs()
        
        embed = discord.Embed(
            title="‚úÖ Th√™m bot th√†nh c√¥ng",
            description=f"Bot '{bot_name}' ƒë√£ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng!",
            color=discord.Color.green()
        )
        embed.add_field(name="T√™n", value=bot_name.title(), inline=True)
        embed.add_field(name="M√¥ t·∫£", value=description, inline=True)
        embed.add_field(name="Tr·∫°ng th√°i", value="üî¥ Inactive (m·∫∑c ƒë·ªãnh)", inline=True)
        embed.set_footer(text="S·ª≠ d·ª•ng ;multibot toggle ƒë·ªÉ k√≠ch ho·∫°t bot")
        
        await ctx.send(embed=embed)
        logger.info(f"Admin {ctx.author} added new bot: {bot_name}")
    
    async def remove_bot(self, ctx, args):
        """Remove bot configuration"""
        if not args:
            embed = discord.Embed(
                title="‚ùå Thi·∫øu t√™n bot",
                description="Vui l√≤ng nh·∫≠p t√™n bot c·∫ßn x√≥a!",
                color=discord.Color.red()
            )
            embed.add_field(
                name="üí° C√°ch s·ª≠ d·ª•ng",
                value="`;multibot remove <name>`",
                inline=False
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        bot_name = args[0]
        
        if bot_name not in self.bot_configs:
            embed = discord.Embed(
                title="‚ùå Bot kh√¥ng t·ªìn t·∫°i",
                description=f"Kh√¥ng t√¨m th·∫•y bot '{bot_name}'!",
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        # X√≥a bot
        removed_bot = self.bot_configs.pop(bot_name)
        self.save_bot_configs()
        
        embed = discord.Embed(
            title="‚úÖ X√≥a bot th√†nh c√¥ng",
            description=f"Bot '{bot_name}' ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi h·ªá th·ªëng!",
            color=discord.Color.green()
        )
        embed.add_field(name="Bot ƒë√£ x√≥a", value=removed_bot.get('name', bot_name), inline=True)
        
        await ctx.reply(embed=embed, mention_author=True)
        logger.info(f"Admin {ctx.author} removed bot: {bot_name}")
    
    async def toggle_bot(self, ctx, args):
        """Toggle bot active status"""
        if not args:
            embed = discord.Embed(
                title="‚ùå Thi·∫øu t√™n bot",
                description="Vui l√≤ng nh·∫≠p t√™n bot c·∫ßn b·∫≠t/t·∫Øt!",
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        bot_name = args[0]
        
        if bot_name not in self.bot_configs:
            embed = discord.Embed(
                title="‚ùå Bot kh√¥ng t·ªìn t·∫°i",
                description=f"Kh√¥ng t√¨m th·∫•y bot '{bot_name}'!",
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        # Toggle status
        current_status = self.bot_configs[bot_name].get('active', False)
        new_status = not current_status
        self.bot_configs[bot_name]['active'] = new_status
        self.save_bot_configs()
        
        status_text = "üü¢ Active" if new_status else "üî¥ Inactive"
        action_text = "k√≠ch ho·∫°t" if new_status else "t·∫Øt"
        
        embed = discord.Embed(
            title=f"‚úÖ ƒê√£ {action_text} bot",
            description=f"Bot '{bot_name}' hi·ªán t·∫°i: {status_text}",
            color=discord.Color.green() if new_status else discord.Color.red()
        )
        
        await ctx.reply(embed=embed, mention_author=True)
        logger.info(f"Admin {ctx.author} toggled bot {bot_name}: {new_status}")
    
    async def send_message(self, ctx, args):
        """Send message via specific bot"""
        if len(args) < 3:
            embed = discord.Embed(
                title="‚ùå Thi·∫øu tham s·ªë",
                description="C·∫ßn ƒë·ªß: t√™n bot, channel ID v√† n·ªôi dung tin nh·∫Øn!",
                color=discord.Color.red()
            )
            embed.add_field(
                name="üí° C√°ch s·ª≠ d·ª•ng",
                value="`;multibot send <bot_name> <channel_id> <message>`",
                inline=False
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        bot_name = args[0]
        try:
            channel_id = int(args[1])
        except ValueError:
            embed = discord.Embed(
                title="‚ùå Channel ID kh√¥ng h·ª£p l·ªá",
                description="Channel ID ph·∫£i l√† s·ªë!",
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        message = ' '.join(args[2:])
        
        if bot_name not in self.bot_configs:
            embed = discord.Embed(
                title="‚ùå Bot kh√¥ng t·ªìn t·∫°i",
                description=f"Kh√¥ng t√¨m th·∫•y bot '{bot_name}'!",
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        if not self.bot_configs[bot_name].get('active', False):
            embed = discord.Embed(
                title="‚ö†Ô∏è Bot ch∆∞a k√≠ch ho·∫°t",
                description=f"Bot '{bot_name}' ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t!",
                color=discord.Color.orange()
            )
            embed.add_field(
                name="üí° Gi·∫£i ph√°p",
                value=f"S·ª≠ d·ª•ng `;multibot toggle {bot_name}` ƒë·ªÉ k√≠ch ho·∫°t",
                inline=False
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        # G·ª≠i tin nh·∫Øn
        token = self.bot_configs[bot_name]['token']
        success, result = await self.send_message_via_bot(token, channel_id, message)
        
        if success:
            embed = discord.Embed(
                title="‚úÖ G·ª≠i tin nh·∫Øn th√†nh c√¥ng",
                description=f"ƒê√£ g·ª≠i tin nh·∫Øn qua bot '{bot_name}'",
                color=discord.Color.green()
            )
            embed.add_field(name="Bot", value=bot_name, inline=True)
            embed.add_field(name="Channel", value=f"<#{channel_id}>", inline=True)
            embed.add_field(name="N·ªôi dung", value=message[:100] + "..." if len(message) > 100 else message, inline=False)
        else:
            embed = discord.Embed(
                title="‚ùå G·ª≠i tin nh·∫Øn th·∫•t b·∫°i",
                description=f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn qua bot '{bot_name}'",
                color=discord.Color.red()
            )
            embed.add_field(name="L·ªói", value=result, inline=False)
        
        await ctx.reply(embed=embed, mention_author=True)
        logger.info(f"Admin {ctx.author} sent message via {bot_name}: {success}")
    
    async def broadcast_message(self, ctx, args):
        """Broadcast message via all active bots"""
        if len(args) < 2:
            embed = discord.Embed(
                title="‚ùå Thi·∫øu tham s·ªë",
                description="C·∫ßn channel ID v√† n·ªôi dung tin nh·∫Øn!",
                color=discord.Color.red()
            )
            embed.add_field(
                name="üí° C√°ch s·ª≠ d·ª•ng",
                value="`;multibot broadcast <channel_id> <message>`",
                inline=False
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        try:
            channel_id = int(args[0])
        except ValueError:
            embed = discord.Embed(
                title="‚ùå Channel ID kh√¥ng h·ª£p l·ªá",
                description="Channel ID ph·∫£i l√† s·ªë!",
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        message = ' '.join(args[1:])
        
        # L·∫•y danh s√°ch bot active
        active_bots = {name: config for name, config in self.bot_configs.items() 
                      if config.get('active', False)}
        
        if not active_bots:
            embed = discord.Embed(
                title="‚ö†Ô∏è Kh√¥ng c√≥ bot active",
                description="Kh√¥ng c√≥ bot n√†o ƒë∆∞·ª£c k√≠ch ho·∫°t ƒë·ªÉ g·ª≠i tin nh·∫Øn!",
                color=discord.Color.orange()
            )
            embed.add_field(
                name="üí° Gi·∫£i ph√°p",
                value="S·ª≠ d·ª•ng `;multibot toggle <name>` ƒë·ªÉ k√≠ch ho·∫°t bot",
                inline=False
            )
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        # Hi·ªÉn th·ªã progress
        progress_embed = discord.Embed(
            title="üì° ƒêang broadcast...",
            description=f"G·ª≠i tin nh·∫Øn qua {len(active_bots)} bot active",
            color=discord.Color.yellow()
        )
        progress_msg = await ctx.reply(embed=progress_embed, mention_author=True)
        
        # G·ª≠i tin nh·∫Øn qua t·∫•t c·∫£ bot
        results = {}
        delay = self.settings.get('message_delay', 1.0)
        
        for bot_name, config in active_bots.items():
            token = config['token']
            success, result = await self.send_message_via_bot(token, channel_id, message)
            results[bot_name] = {'success': success, 'result': result}
            
            # Delay gi·ªØa c√°c bot ƒë·ªÉ tr√°nh rate limit
            await asyncio.sleep(delay)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        success_count = sum(1 for r in results.values() if r['success'])
        fail_count = len(results) - success_count
        
        if success_count > 0:
            embed = discord.Embed(
                title="üì° Broadcast ho√†n t·∫•t",
                description=f"ƒê√£ g·ª≠i tin nh·∫Øn qua {success_count}/{len(active_bots)} bot",
                color=discord.Color.green() if fail_count == 0 else discord.Color.orange()
            )
        else:
            embed = discord.Embed(
                title="‚ùå Broadcast th·∫•t b·∫°i",
                description="Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn qua bot n√†o!",
                color=discord.Color.red()
            )
        
        # Chi ti·∫øt k·∫øt qu·∫£
        success_bots = [name for name, r in results.items() if r['success']]
        fail_bots = [name for name, r in results.items() if not r['success']]
        
        if success_bots:
            embed.add_field(
                name="‚úÖ Th√†nh c√¥ng",
                value=', '.join(success_bots),
                inline=False
            )
        
        if fail_bots:
            embed.add_field(
                name="‚ùå Th·∫•t b·∫°i",
                value=', '.join(fail_bots),
                inline=False
            )
        
        embed.add_field(
            name="üìù N·ªôi dung",
            value=message[:200] + "..." if len(message) > 200 else message,
            inline=False
        )
        
        await progress_msg.edit(embed=embed)
        logger.info(f"Admin {ctx.author} broadcast message: {success_count}/{len(active_bots)} success")
    
    def register_commands(self):
        """Register all commands"""
        logger.info("Multi-Bot commands ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω")
