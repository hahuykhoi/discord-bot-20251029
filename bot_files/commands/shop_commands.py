import discord
from discord.ext import commands
import json
import os
from datetime import datetime
import asyncio
import logging

logger = logging.getLogger(__name__)

class ShopCommands:
    def __init__(self, bot_instance):
        self.bot_instance = bot_instance
        self.bot = bot_instance.bot
        self.shop_data_file = 'data/shop_data.json'
        self.orders_data_file = 'data/shop_orders.json'
        self.pending_orders_file = 'data/pending_orders.json'
        self.shop_config_file = 'data/shop_config.json'
        self.shop_data = self.load_shop_data()
        self.shop_config = self.load_shop_config()
        self.pending_orders = self.load_pending_orders()
        self.daily_purchases_file = 'data/daily_purchases.json'
        self.daily_purchases = self.load_daily_purchases()
        
        # EXP Rare packages removed - only Gmail and TikTok now
        self.exp_packages = {}
        
        # Other products configuration
        self.other_products = {
            "gmail": {
                "name": "Gmail 1 tu·∫ßn",
                "price": 1000000,  # 1 tri·ªáu xu
                "description": "T√†i kho·∫£n Gmail m·ªõi s·ª≠ d·ª•ng ƒë∆∞·ª£c 1 tu·∫ßn",
                "type": "digital"
            },
            "tiktok": {
                "name": "TikTok Account",
                "price": 1000000,  # 1 tri·ªáu xu
                "description": "T√†i kho·∫£n TikTok ƒë√£ t·∫°o s·∫µn",
                "type": "digital"
            }
        }
        
        # Product inventory (admin can manage)
        self.product_inventory_file = 'data/product_inventory.json'
        self.product_inventory = self.load_product_inventory()
    
    def load_shop_data(self):
        """Load shop data from file"""
        if os.path.exists(self.shop_data_file):
            try:
                with open(self.shop_data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"L·ªói khi load shop data: {e}")
                return {}
        return {}
    
    def save_shop_data(self):
        """Save shop data to file"""
        try:
            os.makedirs(os.path.dirname(self.shop_data_file), exist_ok=True)
            with open(self.shop_data_file, 'w', encoding='utf-8') as f:
                json.dump(self.shop_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"L·ªói khi save shop data: {e}")
    
    def load_shop_config(self):
        """Load shop configuration from file"""
        if os.path.exists(self.shop_config_file):
            try:
                with open(self.shop_config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"L·ªói khi load shop config: {e}")
                return {}
        return {}
    
    def save_shop_config(self):
        """Save shop configuration to file"""
        try:
            os.makedirs(os.path.dirname(self.shop_config_file), exist_ok=True)
            with open(self.shop_config_file, 'w', encoding='utf-8') as f:
                json.dump(self.shop_config, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"L·ªói khi save shop config: {e}")
    
    def load_pending_orders(self):
        """Load pending orders from file"""
        if os.path.exists(self.pending_orders_file):
            try:
                with open(self.pending_orders_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"L·ªói khi load pending orders: {e}")
                return {}
        return {}
    
    def save_pending_orders(self):
        """Save pending orders to file"""
        try:
            os.makedirs(os.path.dirname(self.pending_orders_file), exist_ok=True)
            with open(self.pending_orders_file, 'w', encoding='utf-8') as f:
                json.dump(self.pending_orders, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"L·ªói khi save pending orders: {e}")
    
    def load_daily_purchases(self):
        """Load daily purchases from file"""
        if os.path.exists(self.daily_purchases_file):
            try:
                with open(self.daily_purchases_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"L·ªói khi load daily purchases: {e}")
                return {}
        return {}
    
    def save_daily_purchases(self):
        """Save daily purchases to file"""
        try:
            os.makedirs(os.path.dirname(self.daily_purchases_file), exist_ok=True)
            with open(self.daily_purchases_file, 'w', encoding='utf-8') as f:
                json.dump(self.daily_purchases, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"L·ªói khi save daily purchases: {e}")
    
    # check_purchase_eligibility removed - no restrictions for Gmail/TikTok
    
    # record_daily_purchase removed - no daily restrictions for Gmail/TikTok
    
    def get_user_balance(self, user_id):
        """Get user balance from shared wallet"""
        try:
            if hasattr(self.bot_instance, 'shared_wallet') and self.bot_instance.shared_wallet:
                return self.bot_instance.shared_wallet.get_balance(user_id)
            return 0
        except:
            return 0
    
    def deduct_user_balance(self, user_id, amount):
        """Deduct amount from user balance"""
        try:
            if hasattr(self.bot_instance, 'shared_wallet') and self.bot_instance.shared_wallet:
                if self.bot_instance.shared_wallet.has_sufficient_balance(user_id, amount):
                    self.bot_instance.shared_wallet.subtract_balance(user_id, amount)
                    return True
            return False
        except Exception as e:
            logger.error(f"L·ªói khi tr·ª´ ti·ªÅn user {user_id}: {e}")
            return False
    
    def add_user_exp(self, user_id, exp_amount):
        """Add EXP Rare to user"""
        user_str = str(user_id)
        if user_str not in self.shop_data:
            self.shop_data[user_str] = {"exp_rare": 0, "purchases": []}
        
        self.shop_data[user_str]["exp_rare"] += exp_amount
        self.save_shop_data()
    
    def get_user_exp(self, user_id):
        """Get user EXP Rare"""
        user_str = str(user_id)
        if user_str in self.shop_data:
            return self.shop_data[user_str].get("exp_rare", 0)
        return 0
    
    def load_product_inventory(self):
        """Load product inventory from JSON file"""
        if os.path.exists(self.product_inventory_file):
            try:
                with open(self.product_inventory_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {"gmail": [], "tiktok": []}
        return {"gmail": [], "tiktok": []}
    
    def save_product_inventory(self):
        """Save product inventory to JSON file"""
        os.makedirs(os.path.dirname(self.product_inventory_file), exist_ok=True)
        with open(self.product_inventory_file, 'w', encoding='utf-8') as f:
            json.dump(self.product_inventory, f, ensure_ascii=False, indent=2)
    
    async def create_order_channel(self, guild, user, package_id, package_info):
        """Create a private channel for the order"""
        try:
            # Ki·ªÉm tra chi ti·∫øt c√°c quy·ªÅn c·∫ßn thi·∫øt
            bot_permissions = guild.me.guild_permissions
            logger.info(f"Checking permissions in guild {guild.name}:")
            logger.info(f"- manage_channels: {bot_permissions.manage_channels}")
            logger.info(f"- send_messages: {bot_permissions.send_messages}")
            logger.info(f"- embed_links: {bot_permissions.embed_links}")
            logger.info(f"- read_message_history: {bot_permissions.read_message_history}")
            
            if not bot_permissions.manage_channels:
                logger.error(f"Bot kh√¥ng c√≥ quy·ªÅn manage_channels trong guild {guild.name}")
                return None
            
            # T·∫°o t√™n channel
            channel_name = f"order-{user.name}-{package_id}-{datetime.now().strftime('%m%d%H%M')}"
            
            # T·∫°o category n·∫øu ch∆∞a c√≥
            category = discord.utils.get(guild.categories, name="üõí Shop Orders")
            if not category:
                try:
                    logger.info(f"T·∫°o category 'üõí Shop Orders' trong guild {guild.name}")
                    category = await guild.create_category("üõí Shop Orders")
                    logger.info(f"‚úÖ ƒê√£ t·∫°o category th√†nh c√¥ng: {category.name} (ID: {category.id})")
                except discord.Forbidden as e:
                    logger.error(f"‚ùå Bot kh√¥ng c√≥ quy·ªÅn t·∫°o category trong guild {guild.name}: {e}")
                    category = None
                except Exception as e:
                    logger.error(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o category: {e}")
                    category = None
            else:
                logger.info(f"‚úÖ Category 'üõí Shop Orders' ƒë√£ t·ªìn t·∫°i: {category.name} (ID: {category.id})")
            
            # T·∫°o channel PRIVATE - ch·ªâ role Administrator, Support v√† user mua h√†ng xem ƒë∆∞·ª£c
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(
                    read_messages=False,  # Everyone KH√îNG xem ƒë∆∞·ª£c
                    send_messages=False
                ),
                user: discord.PermissionOverwrite(
                    read_messages=True, 
                    send_messages=True,
                    read_message_history=True
                ),
                guild.me: discord.PermissionOverwrite(
                    read_messages=True,
                    send_messages=True,
                    read_message_history=True
                )
            }
            
            # Th√™m quy·ªÅn cho c√°c role ƒë∆∞·ª£c ph√©p (t·ª´ config)
            allowed_roles = self.shop_config.get("allowed_roles", [])
            roles_found = 0
            
            for role_id in allowed_roles:
                role = guild.get_role(role_id)
                if role:
                    overwrites[role] = discord.PermissionOverwrite(
                        read_messages=True, 
                        send_messages=True,
                        read_message_history=True,
                        manage_messages=True  # Role c√≥ th·ªÉ x√≥a tin nh·∫Øn
                    )
                    logger.info(f"‚úÖ ƒê√£ c·∫•p quy·ªÅn cho role: {role.name} (ID: {role.id})")
                    roles_found += 1
                else:
                    logger.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y role v·ªõi ID {role_id} trong server")
            
            # Fallback: N·∫øu kh√¥ng c√≥ role n√†o ƒë∆∞·ª£c c·∫•u h√¨nh ho·∫∑c t√¨m th·∫•y, s·ª≠ d·ª•ng hard-code roles
            if roles_found == 0:
                logger.info("üîÑ Fallback: S·ª≠ d·ª•ng hard-code roles v√¨ kh√¥ng c√≥ role n√†o ƒë∆∞·ª£c c·∫•u h√¨nh")
                
                # Th√™m quy·ªÅn cho role Administrator (fallback)
                admin_role = discord.utils.get(guild.roles, name="Administrator")
                if admin_role:
                    overwrites[admin_role] = discord.PermissionOverwrite(
                        read_messages=True, 
                        send_messages=True,
                        read_message_history=True,
                        manage_messages=True
                    )
                    logger.info(f"‚úÖ Fallback: ƒê√£ c·∫•p quy·ªÅn cho role Administrator: {admin_role.name}")
                    roles_found += 1
                
                # Th√™m quy·ªÅn cho role Support (fallback)
                support_role = discord.utils.get(guild.roles, name="Support")
                if support_role:
                    overwrites[support_role] = discord.PermissionOverwrite(
                        read_messages=True, 
                        send_messages=True,
                        read_message_history=True,
                        manage_messages=True
                    )
                    logger.info(f"‚úÖ Fallback: ƒê√£ c·∫•p quy·ªÅn cho role Support: {support_role.name}")
                    roles_found += 1
                
                # N·∫øu v·∫´n kh√¥ng c√≥ role n√†o, s·ª≠ d·ª•ng admin IDs
                if roles_found == 0:
                    logger.info("üîÑ Final fallback: S·ª≠ d·ª•ng admin IDs v√¨ kh√¥ng t√¨m th·∫•y role n√†o")
                    for admin_id in self.shop_config.get("admin_ids", []):
                        admin_user = guild.get_member(admin_id)
                        if admin_user:
                            overwrites[admin_user] = discord.PermissionOverwrite(
                                read_messages=True, 
                                send_messages=True,
                                read_message_history=True,
                                manage_messages=True
                            )
                    
                    for supreme_admin_id in self.shop_config.get("supreme_admin_ids", []):
                        supreme_admin_user = guild.get_member(supreme_admin_id)
                        if supreme_admin_user:
                            overwrites[supreme_admin_user] = discord.PermissionOverwrite(
                                read_messages=True, 
                                send_messages=True,
                                read_message_history=True,
                                manage_messages=True
                            )
            
            try:
                logger.info(f"T·∫°o text channel '{channel_name}' trong guild {guild.name}")
                if category:
                    logger.info(f"S·ª≠ d·ª•ng category: {category.name} (ID: {category.id})")
                    # Ki·ªÉm tra permissions trong category
                    category_permissions = category.permissions_for(guild.me)
                    logger.info(f"Category permissions - manage_channels: {category_permissions.manage_channels}")
                    logger.info(f"Category permissions - send_messages: {category_permissions.send_messages}")
                else:
                    logger.info("T·∫°o channel kh√¥ng c√≥ category")
                
                channel = await guild.create_text_channel(
                    channel_name,
                    category=category,
                    overwrites=overwrites
                )
                logger.info(f"‚úÖ ƒê√£ t·∫°o text channel th√†nh c√¥ng: {channel.name} (ID: {channel.id})")
                return channel
            except discord.Forbidden as e:
                logger.error(f"‚ùå Bot kh√¥ng c√≥ quy·ªÅn t·∫°o text channel trong guild {guild.name}: {e}")
                logger.error(f"Error details: {e.code} - {e.text}")
                
                # Th·ª≠ t·∫°o channel kh√¥ng c√≥ category
                if category:
                    logger.info("Th·ª≠ t·∫°o channel kh√¥ng c√≥ category...")
                    try:
                        channel = await guild.create_text_channel(
                            channel_name,
                            overwrites=overwrites
                        )
                        logger.info(f"‚úÖ ƒê√£ t·∫°o text channel th√†nh c√¥ng (kh√¥ng c√≥ category): {channel.name} (ID: {channel.id})")
                        return channel
                    except discord.Forbidden as e2:
                        logger.error(f"‚ùå V·∫´n kh√¥ng th·ªÉ t·∫°o text channel (kh√¥ng c√≥ category): {e2}")
                        return None
                    except Exception as e2:
                        logger.error(f"‚ùå L·ªói khi t·∫°o channel kh√¥ng c√≥ category: {e2}")
                        return None
                else:
                    return None
            except Exception as e:
                logger.error(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o text channel: {e}")
                return None
            
        except discord.Forbidden:
            logger.error(f"Bot kh√¥ng c√≥ quy·ªÅn t·∫°o order channel trong guild {guild.name}")
            return None
        except Exception as e:
            logger.error(f"L·ªói t·∫°o order channel: {e}")
            return None
    
    async def create_order_embed(self, user, package_id, package_info, order_id):
        """Create order confirmation embed"""
        embed = discord.Embed(
            title="üõí X√°c nh·∫≠n ƒë∆°n h√†ng EXP Rare",
            description=f"ƒê∆°n h√†ng #{order_id}",
            color=discord.Color.gold(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üë§ Kh√°ch h√†ng:",
            value=f"{user.mention} ({user.name})",
            inline=True
        )
        
        embed.add_field(
            name="üì¶ S·∫£n ph·∫©m:",
            value=f"**{package_info['name']}**",
            inline=True
        )
        
        embed.add_field(
            name="üí∞ Gi√°:",
            value=f"{package_info['price']:,} xu",
            inline=True
        )
        
        embed.add_field(
            name="‚≠ê EXP Rare nh·∫≠n ƒë∆∞·ª£c:",
            value=f"{package_info['exp']:,} EXP",
            inline=True
        )
        
        embed.add_field(
            name="üìÖ Th·ªùi gian ƒë·∫∑t:",
            value=f"<t:{int(datetime.now().timestamp())}:F>",
            inline=True
        )
        
        embed.add_field(
            name="üîÑ Tr·∫°ng th√°i:",
            value="‚è≥ **ƒêang x·ª≠ l√Ω**",
            inline=True
        )
        
        embed.add_field(
            name="üìã H∆∞·ªõng d·∫´n:",
            value=(
                "‚Ä¢ Admin s·∫Ω x·ª≠ l√Ω ƒë∆°n h√†ng c·ªßa b·∫°n\n"
                "‚Ä¢ Vui l√≤ng ch·ªù x√°c nh·∫≠n\n"
                "‚Ä¢ S·ª≠ d·ª•ng ;stop ƒë·ªÉ ho√†n th√†nh ƒë∆°n h√†ng\n"
                "‚Ä¢ K√™nh n√†y s·∫Ω b·ªã x√≥a sau khi ho√†n th√†nh"
            ),
            inline=False
        )
        
        embed.set_footer(
            text="EXP Rare Shop ‚Ä¢ ƒê∆°n h√†ng t·ª± ƒë·ªông",
            icon_url=user.display_avatar.url
        )
        
        return embed
    
    async def notify_order_handlers(self, guild, order_id, user, package_info, channel):
        """G·ª≠i th√¥ng b√°o ƒë·∫øn c√°c order handlers v√† admin t·ªëi cao"""
        try:
            # T·∫°o embed th√¥ng b√°o
            embed = discord.Embed(
                title="üîî Th√¥ng b√°o ƒë∆°n h√†ng m·ªõi",
                description=f"C√≥ ƒë∆°n h√†ng EXP Rare c·∫ßn x·ª≠ l√Ω!",
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üì¶ ƒê∆°n h√†ng:",
                value=f"#{order_id}",
                inline=True
            )
            
            embed.add_field(
                name="üë§ Kh√°ch h√†ng:",
                value=f"{user.mention} ({user.name})",
                inline=True
            )
            
            embed.add_field(
                name="üõí S·∫£n ph·∫©m:",
                value=package_info['name'],
                inline=True
            )
            
            embed.add_field(
                name="üí∞ Gi√° tr·ªã:",
                value=f"{package_info['price']:,} xu",
                inline=True
            )
            
            embed.add_field(
                name="‚≠ê EXP Rare:",
                value=f"{package_info['exp']:,} EXP",
                inline=True
            )
            
            embed.add_field(
                name="üè† K√™nh x·ª≠ l√Ω:",
                value=channel.mention,
                inline=True
            )
            
            embed.add_field(
                name="üìã H∆∞·ªõng d·∫´n:",
                value="V√†o k√™nh v√† s·ª≠ d·ª•ng ;stop ƒë·ªÉ ho√†n th√†nh ƒë∆°n h√†ng",
                inline=False
            )
            
            embed.set_footer(
                text="Shop Order Notification",
                icon_url=user.display_avatar.url
            )
            
            # G·ª≠i th√¥ng b√°o cho Supreme Admin
            supreme_admin_id = self.bot_instance.config.get('supreme_admin_id')
            if supreme_admin_id:
                try:
                    supreme_admin = self.bot.get_user(supreme_admin_id)
                    if supreme_admin:
                        # T·∫°o embed ƒë·∫∑c bi·ªát cho Supreme Admin
                        supreme_embed = discord.Embed(
                            title="üëë TH√îNG B√ÅO ƒê∆†N H√ÄNG M·ªöI - SUPREME ADMIN",
                            description=f"C√≥ ƒë∆°n h√†ng EXP Rare m·ªõi c·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω!",
                            color=discord.Color.gold(),
                            timestamp=datetime.now()
                        )
                        
                        supreme_embed.add_field(
                            name="üì¶ M√£ ƒë∆°n h√†ng:",
                            value=f"**#{order_id}**",
                            inline=True
                        )
                        
                        supreme_embed.add_field(
                            name="üë§ Kh√°ch h√†ng:",
                            value=f"{user.mention} ({user.name})\nID: {user.id}",
                            inline=True
                        )
                        
                        supreme_embed.add_field(
                            name="üõí S·∫£n ph·∫©m:",
                            value=f"**{package_info['name']}**",
                            inline=True
                        )
                        
                        supreme_embed.add_field(
                            name="üí∞ Gi√° tr·ªã giao d·ªãch:",
                            value=f"**{package_info['price']:,} xu**",
                            inline=True
                        )
                        
                        supreme_embed.add_field(
                            name="‚≠ê EXP Rare:",
                            value=f"**{package_info['exp']:,} EXP**",
                            inline=True
                        )
                        
                        supreme_embed.add_field(
                            name="üè† K√™nh x·ª≠ l√Ω:",
                            value=f"{channel.mention}\n(Ch·ªâ role ƒë∆∞·ª£c c·∫•u h√¨nh truy c·∫≠p ƒë∆∞·ª£c)",
                            inline=True
                        )
                        
                        supreme_embed.add_field(
                            name="üïê Th·ªùi gian:",
                            value=f"<t:{int(datetime.now().timestamp())}:F>",
                            inline=True
                        )
                        
                        supreme_embed.add_field(
                            name="üìä Tr·∫°ng th√°i:",
                            value="‚è≥ **ƒêang ch·ªù x·ª≠ l√Ω**",
                            inline=True
                        )
                        
                        supreme_embed.add_field(
                            name="üë®‚Äçüíº Quy·ªÅn h·∫°n Supreme Admin:",
                            value=(
                                "‚Ä¢ C√≥ th·ªÉ truy c·∫≠p k√™nh order\n"
                                "‚Ä¢ C√≥ th·ªÉ s·ª≠ d·ª•ng ;stop ƒë·ªÉ ho√†n th√†nh\n"
                                "‚Ä¢ Gi√°m s√°t to√†n b·ªô giao d·ªãch\n"
                                "‚Ä¢ Qu·∫£n l√Ω order handlers"
                            ),
                            inline=False
                        )
                        
                        supreme_embed.set_footer(
                            text="Supreme Admin Notification ‚Ä¢ EXP Rare Shop",
                            icon_url=user.display_avatar.url
                        )
                        
                        await supreme_admin.send(embed=supreme_embed)
                        logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o ƒë∆°n h√†ng {order_id} cho Supreme Admin {supreme_admin_id}")
                        
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn Supreme Admin {supreme_admin_id}: {e}")
            
            # G·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ Admin
            for admin_id in self.bot_instance.config.get('admin_ids', []):
                try:
                    admin_user = self.bot.get_user(admin_id)
                    if admin_user:
                        # T·∫°o embed cho Admin
                        admin_embed = discord.Embed(
                            title="üõ°Ô∏è TH√îNG B√ÅO ƒê∆†N H√ÄNG M·ªöI - ADMIN",
                            description=f"C√≥ ƒë∆°n h√†ng EXP Rare m·ªõi c·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω!",
                            color=discord.Color.blue(),
                            timestamp=datetime.now()
                        )
                        
                        admin_embed.add_field(
                            name="üì¶ M√£ ƒë∆°n h√†ng:",
                            value=f"**#{order_id}**",
                            inline=True
                        )
                        
                        admin_embed.add_field(
                            name="üë§ Kh√°ch h√†ng:",
                            value=f"{user.mention} ({user.name})\nID: {user.id}",
                            inline=True
                        )
                        
                        admin_embed.add_field(
                            name="üõí S·∫£n ph·∫©m:",
                            value=f"**{package_info['name']}**",
                            inline=True
                        )
                        
                        admin_embed.add_field(
                            name="üí∞ Gi√° tr·ªã giao d·ªãch:",
                            value=f"**{package_info['price']:,} xu**",
                            inline=True
                        )
                        
                        admin_embed.add_field(
                            name="‚≠ê EXP Rare:",
                            value=f"**{package_info['exp']:,} EXP**",
                            inline=True
                        )
                        
                        admin_embed.add_field(
                            name="üè† K√™nh x·ª≠ l√Ω:",
                            value=f"{channel.mention}\n(Ch·ªâ role ƒë∆∞·ª£c c·∫•u h√¨nh truy c·∫≠p ƒë∆∞·ª£c)",
                            inline=True
                        )
                        
                        admin_embed.add_field(
                            name="üïê Th·ªùi gian:",
                            value=f"<t:{int(datetime.now().timestamp())}:F>",
                            inline=True
                        )
                        
                        admin_embed.add_field(
                            name="üìä Tr·∫°ng th√°i:",
                            value="‚è≥ **ƒêang ch·ªù x·ª≠ l√Ω**",
                            inline=True
                        )
                        
                        admin_embed.add_field(
                            name="üõ°Ô∏è Quy·ªÅn h·∫°n Admin:",
                            value=(
                                "‚Ä¢ C√≥ th·ªÉ truy c·∫≠p k√™nh order\n"
                                "‚Ä¢ C√≥ th·ªÉ s·ª≠ d·ª•ng ;stop ƒë·ªÉ ho√†n th√†nh\n"
                                "‚Ä¢ Gi√°m s√°t giao d·ªãch\n"
                                "‚Ä¢ Qu·∫£n l√Ω ƒë∆°n h√†ng"
                            ),
                            inline=False
                        )
                        
                        admin_embed.set_footer(
                            text="Admin Notification ‚Ä¢ EXP Rare Shop",
                            icon_url=user.display_avatar.url
                        )
                        
                        await admin_user.send(embed=admin_embed)
                        logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o ƒë∆°n h√†ng {order_id} cho Admin {admin_id}")
                        
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn Admin {admin_id}: {e}")
            
            # G·ª≠i th√¥ng b√°o cho Order Handlers
            for handler_id in self.shop_config.get("order_handlers", []):
                handler_user = guild.get_member(handler_id)
                if handler_user:
                    try:
                        await handler_user.send(embed=embed)
                        logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o ƒë∆°n h√†ng {order_id} cho handler {handler_id}")
                        
                    except Exception as e:
                        logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn handler {handler_id}: {e}")
                        
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o order handlers: {e}")
    
    def is_shop_channel(self, channel):
        """Ki·ªÉm tra xem c√≥ ph·∫£i k√™nh shop kh√¥ng"""
        # Ki·ªÉm tra k√™nh ƒë∆∞·ª£c c·∫•u h√¨nh trong config tr∆∞·ªõc
        configured_shop_channel = self.shop_config.get("shop_channel_id")
        if configured_shop_channel and channel.id == configured_shop_channel:
            return True
        
        # Fallback: Ki·ªÉm tra theo t√™n k√™nh (c≈©)
        shop_keywords = ['shop', 'store', 'mua-ban', 'cua-hang', 'exp-rare']
        channel_name = channel.name.lower()
        
        # Ki·ªÉm tra t√™n k√™nh c√≥ ch·ª©a t·ª´ kh√≥a shop kh√¥ng
        for keyword in shop_keywords:
            if keyword in channel_name:
                return True
        
        # Ki·ªÉm tra category c√≥ ph·∫£i shop kh√¥ng
        if channel.category:
            category_name = channel.category.name.lower()
            for keyword in shop_keywords:
                if keyword in category_name:
                    return True
        
        return False
    
    async def refund_order(self, ctx, reason="Y√™u c·∫ßu ho√†n ti·ªÅn"):
        """Ho√†n ti·ªÅn ƒë∆°n h√†ng v√† x√≥a k√™nh"""
        try:
            # T√¨m order ID t·ª´ t√™n k√™nh
            channel_name = ctx.channel.name
            order_id = None
            
            # Parse order ID t·ª´ t√™n k√™nh: order-user-package-timestamp
            parts = channel_name.split('-')
            if len(parts) >= 4:
                # T·∫°o order ID t·ª´ c√°c ph·∫ßn
                order_id = f"{parts[1]}-{parts[2]}-{parts[3]}"
            
            if not order_id:
                await ctx.reply("‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh m√£ ƒë∆°n h√†ng t·ª´ t√™n k√™nh!", mention_author=True)
                return
            
            # T√¨m th√¥ng tin ƒë∆°n h√†ng
            order_info = None
            for oid, odata in self.orders_data.items():
                if oid.endswith(order_id) or order_id in oid:
                    order_info = odata
                    order_id = oid
                    break
            
            if not order_info:
                await ctx.reply(f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng: {order_id}", mention_author=True)
                return
            
            user_id = order_info['user_id']
            refund_amount = order_info['price']
            
            # Ho√†n ti·ªÅn cho user
            if hasattr(self.bot_instance, 'shared_wallet') and self.bot_instance.shared_wallet:
                self.bot_instance.shared_wallet.add_balance(user_id, refund_amount)
                logger.info(f"Refunded {refund_amount:,} xu to user {user_id} for order {order_id}")
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            self.orders_data[order_id]['status'] = 'refunded'
            self.orders_data[order_id]['refund_reason'] = reason
            self.orders_data[order_id]['refunded_by'] = ctx.author.id
            self.orders_data[order_id]['refund_time'] = datetime.now().isoformat()
            self.save_orders_data()
            
            # Th√¥ng b√°o ho√†n ti·ªÅn th√†nh c√¥ng
            refund_embed = discord.Embed(
                title="üí∞ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn",
                description=f"ƒê∆°n h√†ng #{order_id} ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn th√†nh c√¥ng",
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            
            refund_embed.add_field(
                name="üíµ S·ªë ti·ªÅn ho√†n:",
                value=f"{refund_amount:,} xu",
                inline=True
            )
            
            refund_embed.add_field(
                name="üë§ Kh√°ch h√†ng:",
                value=f"<@{user_id}>",
                inline=True
            )
            
            refund_embed.add_field(
                name="üìù L√Ω do:",
                value=reason,
                inline=True
            )
            
            refund_embed.add_field(
                name="üë®‚Äçüíº X·ª≠ l√Ω b·ªüi:",
                value=f"{ctx.author.mention}",
                inline=True
            )
            
            refund_embed.set_footer(text="K√™nh s·∫Ω b·ªã x√≥a sau 10 gi√¢y")
            
            await ctx.send(embed=refund_embed)
            
            # Th√¥ng b√°o cho user
            try:
                user = self.bot.get_user(user_id)
                if user:
                    user_embed = discord.Embed(
                        title="üí∞ ƒê∆°n h√†ng ƒë∆∞·ª£c ho√†n ti·ªÅn",
                        description=f"ƒê∆°n h√†ng #{order_id} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn",
                        color=discord.Color.orange(),
                        timestamp=datetime.now()
                    )
                    
                    user_embed.add_field(
                        name="üíµ S·ªë ti·ªÅn nh·∫≠n l·∫°i:",
                        value=f"{refund_amount:,} xu",
                        inline=True
                    )
                    
                    user_embed.add_field(
                        name="üìù L√Ω do ho√†n ti·ªÅn:",
                        value=reason,
                        inline=True
                    )
                    
                    user_embed.add_field(
                        name="üë®‚Äçüíº X·ª≠ l√Ω b·ªüi:",
                        value=f"Admin {ctx.author.name}",
                        inline=True
                    )
                    
                    current_balance = self.get_user_balance(user_id)
                    user_embed.add_field(
                        name="üí∞ S·ªë d∆∞ hi·ªán t·∫°i:",
                        value=f"{current_balance:,} xu",
                        inline=False
                    )
                    
                    user_embed.set_footer(text="C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!")
                    
                    await user.send(embed=user_embed)
            except:
                pass
            
            # X√≥a k√™nh sau 10 gi√¢y
            await asyncio.sleep(10)
            await ctx.channel.delete(reason=f"Order refunded by {ctx.author.name}: {reason}")
            
        except Exception as e:
            logger.error(f"L·ªói khi ho√†n ti·ªÅn order: {e}")
            await ctx.reply(f"‚ùå C√≥ l·ªói x·∫£y ra khi ho√†n ti·ªÅn: {str(e)}", mention_author=True)
    
    async def notify_order_completion(self, user_id, order_id, package_info, completed_by):
        """G·ª≠i th√¥ng b√°o ho√†n th√†nh ƒë∆°n h√†ng ƒë·∫øn ng∆∞·ªùi mua"""
        try:
            user = self.bot.get_user(user_id)
            if user:
                embed = discord.Embed(
                    title="‚úÖ ƒê∆°n h√†ng ho√†n th√†nh!",
                    description=f"ƒê∆°n h√†ng #{order_id} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng",
                    color=discord.Color.green(),
                    timestamp=datetime.now()
                )
                
                embed.add_field(
                    name="üì¶ S·∫£n ph·∫©m:",
                    value=package_info,
                    inline=True
                )
                
                embed.add_field(
                    name="‚≠ê EXP Rare nh·∫≠n ƒë∆∞·ª£c:",
                    value=f"{self.orders_data[order_id]['exp_amount']:,} EXP",
                    inline=True
                )
                
                embed.add_field(
                    name="üë®‚Äçüíº X·ª≠ l√Ω b·ªüi:",
                    value=f"<@{completed_by}>",
                    inline=True
                )
                
                embed.add_field(
                    name="üíé T·ªïng EXP Rare hi·ªán c√≥:",
                    value=f"{self.get_user_exp(user_id):,} EXP",
                    inline=False
                )
                
                embed.set_footer(
                    text="C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!",
                    icon_url=user.display_avatar.url
                )
                
                await user.send(embed=embed)
                
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ho√†n th√†nh ƒë·∫øn user {user_id}: {e}")
    
    async def add_allowed_role(self, ctx, role):
        """Th√™m role v√†o danh s√°ch ƒë∆∞·ª£c ph√©p truy c·∫≠p k√™nh order"""
        try:
            role_id = role.id
            role_name = role.name
            
            # Ki·ªÉm tra role ƒë√£ t·ªìn t·∫°i ch∆∞a
            if role_id in self.shop_config.get("allowed_roles", []):
                embed = discord.Embed(
                    title="‚ö†Ô∏è Role ƒë√£ t·ªìn t·∫°i",
                    description=f"Role **{role_name}** ƒë√£ c√≥ trong danh s√°ch ƒë∆∞·ª£c ph√©p truy c·∫≠p k√™nh order.",
                    color=discord.Color.orange()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Th√™m role v√†o config
            if "allowed_roles" not in self.shop_config:
                self.shop_config["allowed_roles"] = []
            
            self.shop_config["allowed_roles"].append(role_id)
            self.save_shop_config()
            
            # T·∫°o embed th√¥ng b√°o th√†nh c√¥ng
            embed = discord.Embed(
                title="‚úÖ ƒê√£ th√™m role th√†nh c√¥ng",
                description=f"Role **{role_name}** ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch ƒë∆∞·ª£c ph√©p truy c·∫≠p k√™nh order.",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üé≠ Role ƒë∆∞·ª£c th√™m:",
                value=f"{role.mention} ({role_name})",
                inline=True
            )
            
            embed.add_field(
                name="üÜî Role ID:",
                value=f"`{role_id}`",
                inline=True
            )
            
            embed.add_field(
                name="üë®‚Äçüíº ƒê∆∞·ª£c th√™m b·ªüi:",
                value=ctx.author.mention,
                inline=True
            )
            
            embed.add_field(
                name="üîë Quy·ªÅn h·∫°n:",
                value=(
                    "‚Ä¢ Xem t·∫•t c·∫£ k√™nh order\n"
                    "‚Ä¢ G·ª≠i tin nh·∫Øn trong k√™nh order\n"
                    "‚Ä¢ X√≥a tin nh·∫Øn (manage_messages)\n"
                    "‚Ä¢ Xem l·ªãch s·ª≠ tin nh·∫Øn"
                ),
                inline=False
            )
            
            embed.set_footer(
                text="Shop System ‚Ä¢ Role Management",
                icon_url=ctx.author.display_avatar.url
            )
            
            await ctx.reply(embed=embed, mention_author=True)
            logger.info(f"Admin {ctx.author.id} ƒë√£ th√™m role {role_name} ({role_id}) v√†o allowed_roles")
            
        except Exception as e:
            logger.error(f"L·ªói khi th√™m role {role.name}: {e}")
            embed = discord.Embed(
                title="‚ùå L·ªói khi th√™m role",
                description=f"C√≥ l·ªói x·∫£y ra khi th√™m role **{role.name}**.",
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed, mention_author=True)
    
    async def remove_allowed_role(self, ctx, role):
        """X√≥a role kh·ªèi danh s√°ch ƒë∆∞·ª£c ph√©p truy c·∫≠p k√™nh order"""
        try:
            role_id = role.id
            role_name = role.name
            
            # Ki·ªÉm tra role c√≥ t·ªìn t·∫°i kh√¥ng
            if role_id not in self.shop_config.get("allowed_roles", []):
                embed = discord.Embed(
                    title="‚ö†Ô∏è Role kh√¥ng t·ªìn t·∫°i",
                    description=f"Role **{role_name}** kh√¥ng c√≥ trong danh s√°ch ƒë∆∞·ª£c ph√©p truy c·∫≠p k√™nh order.",
                    color=discord.Color.orange()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # X√≥a role kh·ªèi config
            self.shop_config["allowed_roles"].remove(role_id)
            self.save_shop_config()
            
            # T·∫°o embed th√¥ng b√°o th√†nh c√¥ng
            embed = discord.Embed(
                title="‚úÖ ƒê√£ x√≥a role th√†nh c√¥ng",
                description=f"Role **{role_name}** ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch ƒë∆∞·ª£c ph√©p truy c·∫≠p k√™nh order.",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üé≠ Role ƒë∆∞·ª£c x√≥a:",
                value=f"{role.mention} ({role_name})",
                inline=True
            )
            
            embed.add_field(
                name="üÜî Role ID:",
                value=f"`{role_id}`",
                inline=True
            )
            
            embed.add_field(
                name="üë®‚Äçüíº ƒê∆∞·ª£c x√≥a b·ªüi:",
                value=ctx.author.mention,
                inline=True
            )
            
            embed.add_field(
                name="‚ö†Ô∏è L∆∞u √Ω:",
                value="Role n√†y s·∫Ω kh√¥ng th·ªÉ truy c·∫≠p c√°c k√™nh order m·ªõi ƒë∆∞·ª£c t·∫°o.",
                inline=False
            )
            
            embed.set_footer(
                text="Shop System ‚Ä¢ Role Management",
                icon_url=ctx.author.display_avatar.url
            )
            
            await ctx.reply(embed=embed, mention_author=True)
            logger.info(f"Admin {ctx.author.id} ƒë√£ x√≥a role {role_name} ({role_id}) kh·ªèi allowed_roles")
            
        except Exception as e:
            logger.error(f"L·ªói khi x√≥a role {role.name}: {e}")
            embed = discord.Embed(
                title="‚ùå L·ªói khi x√≥a role",
                description=f"C√≥ l·ªói x·∫£y ra khi x√≥a role **{role.name}**.",
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed, mention_author=True)
    
    async def list_allowed_roles(self, ctx):
        """Hi·ªÉn th·ªã danh s√°ch role ƒë∆∞·ª£c ph√©p truy c·∫≠p k√™nh order"""
        try:
            allowed_roles = self.shop_config.get("allowed_roles", [])
            
            embed = discord.Embed(
                title="üé≠ Danh s√°ch Role ƒë∆∞·ª£c ph√©p truy c·∫≠p k√™nh order",
                description="C√°c role n√†y c√≥ th·ªÉ xem v√† chat trong t·∫•t c·∫£ k√™nh order EXP Rare",
                color=discord.Color.blue(),
                timestamp=datetime.now()
            )
            
            if not allowed_roles:
                embed.add_field(
                    name="üìù Danh s√°ch tr·ªëng",
                    value="Ch∆∞a c√≥ role n√†o ƒë∆∞·ª£c th√™m v√†o danh s√°ch.\nS·ª≠ d·ª•ng ; add @Role` ƒë·ªÉ th√™m role.",
                    inline=False
                )
            else:
                role_list = []
                for role_id in allowed_roles:
                    role = ctx.guild.get_role(role_id)
                    if role:
                        role_list.append(f"‚Ä¢ {role.mention} (`{role.name}` - ID: `{role_id}`)")
                    else:
                        role_list.append(f"‚Ä¢ ‚ö†Ô∏è Role kh√¥ng t·ªìn t·∫°i (ID: `{role_id}`)")
                
                embed.add_field(
                    name=f"üìã Danh s√°ch ({len(allowed_roles)} role):",
                    value="\n".join(role_list) if role_list else "Kh√¥ng c√≥ role h·ª£p l·ªá",
                    inline=False
                )
            
            embed.add_field(
                name="üîß Qu·∫£n l√Ω:",
                value=(
                    "‚Ä¢ ; add @Role` - Th√™m role\n"
                    "‚Ä¢ ; remove @Role` - X√≥a role\n"
                    "‚Ä¢ ; list` - Xem danh s√°ch"
                ),
                inline=False
            )
            
            embed.set_footer(
                text="Shop System ‚Ä¢ Role Management",
                icon_url=ctx.author.display_avatar.url
            )
            
            await ctx.reply(embed=embed, mention_author=True)
            
        except Exception as e:
            logger.error(f"L·ªói khi hi·ªÉn th·ªã danh s√°ch role: {e}")
            embed = discord.Embed(
                title="‚ùå L·ªói khi hi·ªÉn th·ªã danh s√°ch",
                description="C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã danh s√°ch role.",
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed, mention_author=True)
    
    async def buy_other_product(self, ctx, product_type):
        """Mua s·∫£n ph·∫©m kh√°c (Gmail, TikTok)"""
        if product_type not in self.other_products:
            await ctx.reply("‚ùå S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!", mention_author=True)
            return
        
        product_info = self.other_products[product_type]
        user_balance = self.get_user_balance(ctx.author.id)
        
        if user_balance < product_info['price']:
            embed = discord.Embed(
                title="‚ùå Kh√¥ng ƒë·ªß ti·ªÅn",
                description="B·∫°n kh√¥ng c√≥ ƒë·ªß xu ƒë·ªÉ mua s·∫£n ph·∫©m n√†y!",
                color=discord.Color.red()
            )
            
            embed.add_field(
                name="üí∞ S·ªë d∆∞ hi·ªán t·∫°i:",
                value=f"{user_balance:,} xu",
                inline=True
            )
            
            embed.add_field(
                name="üí∏ C·∫ßn th√™m:",
                value=f"{product_info['price'] - user_balance:,} xu",
                inline=True
            )
            
            await ctx.reply(embed=embed, mention_author=True)
            return
        
        # Ki·ªÉm tra c√≥ h√†ng trong kho kh√¥ng
        if product_type not in self.product_inventory or not self.product_inventory[product_type]:
            await ctx.reply(f"‚ùå Hi·ªán t·∫°i h·∫øt h√†ng {product_info['name']}! Vui l√≤ng li√™n h·ªá admin.", mention_author=True)
            return
        
        # Tr·ª´ ti·ªÅn
        if not self.deduct_user_balance(ctx.author.id, product_info['price']):
            await ctx.reply("‚ùå C√≥ l·ªói x·∫£y ra khi tr·ª´ ti·ªÅn!", mention_author=True)
            return
        
        # L·∫•y s·∫£n ph·∫©m t·ª´ kho
        product_item = self.product_inventory[product_type].pop(0)
        self.save_product_inventory()
        
        # G·ª≠i s·∫£n ph·∫©m qua DM
        try:
            dm_embed = discord.Embed(
                title=f"üéÅ {product_info['name']} c·ªßa b·∫°n",
                description=f"C·∫£m ∆°n b·∫°n ƒë√£ mua {product_info['name']}!",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            dm_embed.add_field(
                name="üì¶ S·∫£n ph·∫©m:",
                value=product_info['name'],
                inline=True
            )
            
            dm_embed.add_field(
                name="üí∞ Gi√°:",
                value=f"{product_info['price']:,} xu",
                inline=True
            )
            
            dm_embed.add_field(
                name="üìã Th√¥ng tin s·∫£n ph·∫©m:",
                value=f"```{product_item}```",
                inline=False
            )
            
            dm_embed.set_footer(text="C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!")
            
            await ctx.author.send(embed=dm_embed)
            
            # Th√¥ng b√°o th√†nh c√¥ng
            success_embed = discord.Embed(
                title="‚úÖ Mua h√†ng th√†nh c√¥ng!",
                description=f"ƒê√£ g·ª≠i {product_info['name']} v√†o DM c·ªßa b·∫°n!",
                color=discord.Color.green()
            )
            
            await ctx.reply(embed=success_embed, mention_author=True)
            
        except discord.Forbidden:
            # Kh√¥ng g·ª≠i ƒë∆∞·ª£c DM, ho√†n ti·ªÅn
            self.bot_instance.shared_wallet.add_balance(ctx.author.id, product_info['price'])
            self.product_inventory[product_type].insert(0, product_item)  # Tr·∫£ l·∫°i h√†ng
            self.save_product_inventory()
            
            await ctx.reply(
                "‚ùå Kh√¥ng th·ªÉ g·ª≠i DM cho b·∫°n! Vui l√≤ng b·∫≠t DM v√† th·ª≠ l·∫°i. ƒê√£ ho√†n ti·ªÅn.",
                mention_author=True
            )
    
    async def manage_product_inventory(self, ctx):
        """Qu·∫£n l√Ω kho h√†ng - ch·ªâ Admin"""
        if not self.bot_instance.is_admin(ctx.author.id):
            await ctx.reply("‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ qu·∫£n l√Ω kho h√†ng!", mention_author=True)
            return
        
        embed = discord.Embed(
            title="üì¶ Qu·∫£n l√Ω kho h√†ng",
            description="H·ªá th·ªëng qu·∫£n l√Ω s·∫£n ph·∫©m Gmail v√† TikTok",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng h√†ng hi·ªán c√≥
        gmail_count = len(self.product_inventory.get("gmail", []))
        tiktok_count = len(self.product_inventory.get("tiktok", []))
        
        embed.add_field(
            name="üìß Gmail 1 tu·∫ßn:",
            value=f"**{gmail_count}** s·∫£n ph·∫©m c√≥ s·∫µn\nüí∞ Gi√°: 1,000,000 xu",
            inline=True
        )
        
        embed.add_field(
            name="üì± TikTok Account:",
            value=f"**{tiktok_count}** s·∫£n ph·∫©m c√≥ s·∫µn\nüí∞ Gi√°: 1,000,000 xu",
            inline=True
        )
        
        embed.add_field(
            name="üîß L·ªánh qu·∫£n l√Ω:",
            value=(
                "**üìù Th√™m t·ª´ text:**\n"
                "`;shop hanghoa gmail user@gmail.com:password`\n"
                "`;shop hanghoa tiktok @username:password`\n\n"
                "**üìÅ Th√™m t·ª´ file:**\n"
                "`;shop hanghoa gmail` + ƒë√≠nh k√®m file .txt\n"
                "`;shop hanghoa tiktok` + ƒë√≠nh k√®m file .txt\n\n"
                "**üí° File format:** M·ªói d√≤ng = 1 t√†i kho·∫£n"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üìã H∆∞·ªõng d·∫´n:",
            value=(
                "‚Ä¢ N·ªôi dung s·∫£n ph·∫©m s·∫Ω ƒë∆∞·ª£c g·ª≠i tr·ª±c ti·∫øp cho kh√°ch h√†ng qua DM\n"
                "‚Ä¢ ƒê·ªãnh d·∫°ng t√πy √Ω, kh√°ch h√†ng s·∫Ω nh·∫≠n ƒë∆∞·ª£c ch√≠nh x√°c n·ªôi dung b·∫°n nh·∫≠p\n"
                "‚Ä¢ Khi h·∫øt h√†ng, kh√°ch h√†ng s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o li√™n h·ªá admin"
            ),
            inline=False
        )
        
        embed.set_footer(text="Shop System ‚Ä¢ Inventory Management")
        
        await ctx.reply(embed=embed, mention_author=True)
    
    async def add_product_to_inventory(self, ctx, product_type, content):
        """Th√™m s·∫£n ph·∫©m v√†o kho - h·ªó tr·ª£ file txt v√† text th∆∞·ªùng"""
        if not self.bot_instance.is_admin(ctx.author.id):
            await ctx.reply("‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ th√™m s·∫£n ph·∫©m v√†o kho!", mention_author=True)
            return
        
        if product_type not in ["gmail", "tiktok"]:
            await ctx.reply("‚ùå Lo·∫°i s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá! Ch·ªâ h·ªó tr·ª£: gmail, tiktok", mention_author=True)
            return
        
        # Kh·ªüi t·∫°o inventory n·∫øu ch∆∞a c√≥
        if product_type not in self.product_inventory:
            self.product_inventory[product_type] = []
        
        added_count = 0
        
        # Ki·ªÉm tra c√≥ file ƒë√≠nh k√®m kh√¥ng
        if ctx.message.attachments:
            for attachment in ctx.message.attachments:
                if attachment.filename.endswith('.txt'):
                    try:
                        # ƒê·ªçc file txt
                        file_content = await attachment.read()
                        file_text = file_content.decode('utf-8')
                        
                        # T√°ch t·ª´ng d√≤ng v√† lo·∫°i b·ªè d√≤ng tr·ªëng
                        lines = [line.strip() for line in file_text.split('\n') if line.strip()]
                        
                        # Th√™m t·ª´ng d√≤ng v√†o kho
                        for line in lines:
                            self.product_inventory[product_type].append(line)
                            added_count += 1
                        
                        self.save_product_inventory()
                        
                        # Th√¥ng b√°o th√†nh c√¥ng v·ªõi file
                        product_name = self.other_products[product_type]['name']
                        embed = discord.Embed(
                            title="‚úÖ ƒê√£ import s·∫£n ph·∫©m t·ª´ file",
                            description=f"ƒê√£ th√™m **{added_count}** {product_name} t·ª´ file `{attachment.filename}`!",
                            color=discord.Color.green(),
                            timestamp=datetime.now()
                        )
                        
                        embed.add_field(
                            name="üì¶ Lo·∫°i s·∫£n ph·∫©m:",
                            value=product_name,
                            inline=True
                        )
                        
                        embed.add_field(
                            name="üìÅ File x·ª≠ l√Ω:",
                            value=attachment.filename,
                            inline=True
                        )
                        
                        embed.add_field(
                            name="‚ûï S·ªë l∆∞·ª£ng th√™m:",
                            value=f"{added_count} t√†i kho·∫£n",
                            inline=True
                        )
                        
                        embed.add_field(
                            name="üìä T·ªïng hi·ªán c√≥:",
                            value=f"{len(self.product_inventory[product_type])} s·∫£n ph·∫©m",
                            inline=True
                        )
                        
                        embed.add_field(
                            name="üë®‚Äçüíº Th√™m b·ªüi:",
                            value=ctx.author.mention,
                            inline=True
                        )
                        
                        embed.add_field(
                            name="üìà T·ª∑ l·ªá th√†nh c√¥ng:",
                            value="100%",
                            inline=True
                        )
                        
                        # Hi·ªÉn th·ªã preview 3 d√≤ng ƒë·∫ßu
                        if lines:
                            preview_lines = lines[:3]
                            preview_text = '\n'.join(preview_lines)
                            if len(lines) > 3:
                                preview_text += f"\n... v√† {len(lines) - 3} t√†i kho·∫£n kh√°c"
                            
                            embed.add_field(
                                name="üëÄ Preview n·ªôi dung:",
                                value=f"```{preview_text}```",
                                inline=False
                            )
                        
                        embed.set_footer(text="Shop System ‚Ä¢ File Import Success")
                        
                        await ctx.reply(embed=embed, mention_author=True)
                        logger.info(f"Admin {ctx.author.id} import {added_count} {product_type} t·ª´ file {attachment.filename}")
                        return
                        
                    except UnicodeDecodeError:
                        await ctx.reply("‚ùå **L·ªói encoding!** File ph·∫£i l√† UTF-8. H√£y save file v·ªõi encoding UTF-8.", mention_author=True)
                        return
                    except Exception as e:
                        await ctx.reply(f"‚ùå **L·ªói khi ƒë·ªçc file:** {str(e)}", mention_author=True)
                        return
                else:
                    await ctx.reply("‚ùå **File kh√¥ng h·ª£p l·ªá!** Ch·ªâ h·ªó tr·ª£ file .txt", mention_author=True)
                    return
        
        # N·∫øu kh√¥ng c√≥ file, x·ª≠ l√Ω text th∆∞·ªùng
        elif content:
            self.product_inventory[product_type].append(content)
            self.save_product_inventory()
            added_count = 1
            
            # Th√¥ng b√°o th√†nh c√¥ng v·ªõi text
            product_name = self.other_products[product_type]['name']
            embed = discord.Embed(
                title="‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m v√†o kho",
                description=f"ƒê√£ th√™m {product_name} v√†o kho h√†ng th√†nh c√¥ng!",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üì¶ Lo·∫°i s·∫£n ph·∫©m:",
                value=product_name,
                inline=True
            )
            
            embed.add_field(
                name="üìä S·ªë l∆∞·ª£ng hi·ªán c√≥:",
                value=f"{len(self.product_inventory[product_type])} s·∫£n ph·∫©m",
                inline=True
            )
            
            embed.add_field(
                name="üë®‚Äçüíº ƒê∆∞·ª£c th√™m b·ªüi:",
                value=ctx.author.mention,
                inline=True
            )
            
            embed.add_field(
                name="üìã N·ªôi dung ƒë√£ th√™m:",
                value=f"```{content[:100]}{'...' if len(content) > 100 else ''}```",
                inline=False
            )
            
            embed.set_footer(text="Shop System ‚Ä¢ Manual Add")
            
            await ctx.reply(embed=embed, mention_author=True)
            logger.info(f"Admin {ctx.author.id} ƒë√£ th√™m {product_type} v√†o kho: {content[:50]}...")
        
        # N·∫øu kh√¥ng c√≥ c·∫£ file v√† content
        else:
            await ctx.reply(
                "‚ùå **Thi·∫øu n·ªôi dung ho·∫∑c file!**\n\n"
                "**üìù C√°ch s·ª≠ d·ª•ng:**\n"
                "‚Ä¢ **Text:** `;shop hanghoa gmail user@gmail.com:password`\n"
                "‚Ä¢ **File:** `;shop hanghoa gmail` + ƒë√≠nh k√®m file .txt\n\n"
                "**üìÅ Format file .txt:**\n"
                "```\n"
                "user1@gmail.com:password1\n"
                "user2@gmail.com:password2\n"
                "user3@gmail.com:password3\n"
                "...\n"
                "```\n\n"
                "**üí° L∆∞u √Ω:**\n"
                "‚Ä¢ M·ªói d√≤ng = 1 t√†i kho·∫£n\n"
                "‚Ä¢ File ph·∫£i l√† UTF-8 encoding\n"
                "‚Ä¢ D√≤ng tr·ªëng s·∫Ω b·ªã b·ªè qua",
                mention_author=True
            )
    
    def register_commands(self):
        """Register all shop commands"""
        
        @self.bot.command(name='shop')
        async def shop_command(ctx, action=None, product_type=None, *, content=None):
            """Hi·ªÉn th·ªã shop EXP Rare ho·∫∑c qu·∫£n l√Ω s·∫£n ph·∫©m"""
            # Ki·ªÉm tra k√™nh shop (DM ch·ªâ cho admin)
            is_dm = isinstance(ctx.channel, discord.DMChannel)
            is_admin = self.bot_instance.is_admin(ctx.author.id)
            
            # N·∫øu kh√¥ng ph·∫£i DM v√† kh√¥ng ph·∫£i k√™nh shop
            if not is_dm and not self.is_shop_channel(ctx.channel):
                if is_admin:
                    await ctx.reply(
                        "‚ùå **L·ªánh shop ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong k√™nh shop ho·∫∑c DM!**\n\n"
                        "üõí **T√¨m k√™nh c√≥ t√™n ch·ª©a:** `shop`, `store`, `mua-ban`\n"
                        "üí¨ **Admin c√≥ th·ªÉ s·ª≠ d·ª•ng qua DM (tin nh·∫Øn ri√™ng)**",
                        mention_author=True
                    )
                else:
                    await ctx.reply(
                        "‚ùå **L·ªánh shop ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong k√™nh shop!**\n\n"
                        "üõí **T√¨m k√™nh c√≥ t√™n ch·ª©a:** `shop`, `store`, `mua-ban`\n"
                        "üìù **Ho·∫∑c li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£**",
                        mention_author=True
                    )
                return
            
            if action == "add" and isinstance(product_type, int):
                # Legacy: add order handler
                await self.add_order_handler(ctx, product_type)
            elif action == "remove" and isinstance(product_type, int):
                # Legacy: remove order handler  
                await self.remove_order_handler(ctx, product_type)
            elif action == "list":
                await self.list_order_handlers(ctx)
            elif action == "test":
                await self.test_wallet_connection(ctx)
            elif action == "hanghoa" and not product_type:
                # Hi·ªÉn th·ªã menu qu·∫£n l√Ω kho h√†ng
                await self.manage_product_inventory(ctx)
            elif action == "hanghoa" and product_type in ["gmail", "tiktok"]:
                # Th√™m s·∫£n ph·∫©m v√†o kho (c√≥ th·ªÉ t·ª´ file ho·∫∑c content)
                await self.add_product_to_inventory(ctx, product_type, content)
            else:
                await self.show_shop(ctx)
        
        @self.bot.command(name='pendingorders', aliases=['pending', 'donhang'])
        async def pending_orders_command(ctx):
            """Xem danh s√°ch ƒë∆°n h√†ng ƒëang ch·ªù x·ª≠ l√Ω (Admin only)"""
            if not self.bot_instance.is_admin(ctx.author.id):
                await ctx.reply("‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ xem danh s√°ch ƒë∆°n h√†ng!", mention_author=True)
                return
            
            if not self.pending_orders:
                embed = discord.Embed(
                    title="üìã Danh s√°ch ƒë∆°n h√†ng",
                    description="Hi·ªán t·∫°i kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒëang ch·ªù x·ª≠ l√Ω!",
                    color=discord.Color.blue()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            embed = discord.Embed(
                title="üìã DANH S√ÅCH ƒê∆†N H√ÄNG ƒêANG CH·ªú",
                description=f"C√≥ **{len(self.pending_orders)}** ƒë∆°n h√†ng ƒëang ch·ªù x·ª≠ l√Ω",
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            
            for i, (order_id, order_data) in enumerate(self.pending_orders.items(), 1):
                if i > 10:  # Ch·ªâ hi·ªÉn th·ªã 10 ƒë∆°n h√†ng ƒë·∫ßu ti√™n
                    embed.add_field(
                        name="‚ö†Ô∏è Th√¥ng b√°o",
                        value=f"C√≤n {len(self.pending_orders) - 10} ƒë∆°n h√†ng kh√°c...",
                        inline=False
                    )
                    break
                
                try:
                    user = self.bot.get_user(order_data["user_id"])
                    username = user.display_name if user else f"User {order_data['user_id']}"
                    
                    order_time = datetime.fromisoformat(order_data["order_time"])
                    time_ago = datetime.now() - order_time
                    
                    if time_ago.days > 0:
                        time_str = f"{time_ago.days} ng√†y tr∆∞·ªõc"
                    elif time_ago.seconds > 3600:
                        time_str = f"{time_ago.seconds // 3600} gi·ªù tr∆∞·ªõc"
                    else:
                        time_str = f"{time_ago.seconds // 60} ph√∫t tr∆∞·ªõc"
                    
                    embed.add_field(
                        name=f"üÜî {order_id}",
                        value=(
                            f"üë§ **{username}**\n"
                            f"üì¶ {order_data['package_name']}\n"
                            f"üí∞ {order_data['price']:,} xu ‚Üí ‚≠ê {order_data['exp_amount']:,} EXP\n"
                            f"üïê {time_str}"
                        ),
                        inline=True
                    )
                except Exception as e:
                    logger.error(f"L·ªói khi hi·ªÉn th·ªã ƒë∆°n h√†ng {order_id}: {e}")
            
            embed.add_field(
                name="üí° H∆∞·ªõng d·∫´n x·ª≠ l√Ω:",
                value=(
                    "‚Ä¢ **Reply tin nh·∫Øn DM** t·ª´ bot ƒë·ªÉ ho√†n th√†nh ƒë∆°n h√†ng\n"
                    "‚Ä¢ Bot s·∫Ω t·ª± ƒë·ªông c·∫•p EXP v√† th√¥ng b√°o cho kh√°ch h√†ng\n"
                    "‚Ä¢ ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v√†o l·ªãch s·ª≠ sau khi ho√†n th√†nh"
                ),
                inline=False
            )
            
            embed.set_footer(text="S·ª≠ d·ª•ng ;pendingorders ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch")
            
            await ctx.reply(embed=embed, mention_author=True)
        
        @self.bot.command(name='buy')
        async def buy_command(ctx, package_type=None, package_id=None):
            """Mua s·∫£n ph·∫©m - C√≥ th·ªÉ d√πng trong k√™nh shop ho·∫∑c DM (Admin)"""
            # Ki·ªÉm tra k√™nh shop ho·∫∑c DM (ch·ªâ admin)
            is_dm = isinstance(ctx.channel, discord.DMChannel)
            is_admin = self.bot_instance.is_admin(ctx.author.id)
            
            if not is_dm and not self.is_shop_channel(ctx.channel):
                if is_admin:
                    await ctx.reply(
                        "‚ùå **L·ªánh mua h√†ng ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong k√™nh shop ho·∫∑c DM!**\n\n"
                        "üõí **T√¨m k√™nh c√≥ t√™n ch·ª©a:** `shop`, `store`, `mua-ban`\n"
                        "üí¨ **Admin c√≥ th·ªÉ s·ª≠ d·ª•ng qua DM (tin nh·∫Øn ri√™ng)**",
                        mention_author=True
                    )
                else:
                    await ctx.reply(
                        "‚ùå **L·ªánh mua h√†ng ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong k√™nh shop!**\n\n"
                        "üõí **T√¨m k√™nh c√≥ t√™n ch·ª©a:** `shop`, `store`, `mua-ban`\n"
                        "üìù **Ho·∫∑c li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£**",
                        mention_author=True
                    )
                return
                
            if package_type == "gmail":
                await self.buy_other_product(ctx, "gmail")
            elif package_type == "tiktok":
                await self.buy_other_product(ctx, "tiktok")
            else:
                await ctx.reply(
                    "‚ùå **C√°ch s·ª≠ d·ª•ng:**\n"
                    "`;buy gmail` - Mua Gmail 1 tu·∫ßn (1 tri·ªáu xu)\n"
                    "`;buy tiktok` - Mua TikTok Account (1 tri·ªáu xu)\n\n"
                    "**V√≠ d·ª•:** `;buy gmail` - Mua Gmail 1 tu·∫ßn\n\n"
                    "üí° **L∆∞u √Ω:** Ch·ªâ s·ª≠ d·ª•ng trong k√™nh shop n√†y!",
                    mention_author=True
                )
        
        # EXP Rare command removed since we no longer sell EXP
        
        @self.bot.command(name='stop')
        async def stop_order_command(ctx):
            """Ho√†n th√†nh ƒë∆°n h√†ng - ch·ªâ Admin trong k√™nh order"""
            if not self.bot_instance.is_admin(ctx.author.id):
                await ctx.reply(
                    "‚ùå **Ch·ªâ Admin m·ªõi c√≥ th·ªÉ ho√†n th√†nh ƒë∆°n h√†ng!**\n\n"
                    "üëë **Quy·ªÅn h·∫°n:** Admin, Supreme Admin\n"
                    "üìç **V·ªã tr√≠:** K√™nh order (order-*)",
                    mention_author=True
                )
                return
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i k√™nh order kh√¥ng
            if not ctx.channel.name.startswith("order-"):
                await ctx.reply(
                    "‚ùå **L·ªánh n√†y ch·ªâ s·ª≠ d·ª•ng trong k√™nh ƒë∆°n h√†ng!**\n\n"
                    "üìç **K√™nh h·ª£p l·ªá:** order-*\n"
                    "üîç **K√™nh hi·ªán t·∫°i:** #{ctx.channel.name}",
                    mention_author=True
                )
                return
            
            await self.complete_order(ctx)
            
        @self.bot.command(name='refund')
        async def refund_order_command(ctx, reason=None):
            """Ho√†n ti·ªÅn ƒë∆°n h√†ng - ch·ªâ Admin trong k√™nh order"""
            if not self.bot_instance.is_admin(ctx.author.id):
                await ctx.reply(
                    "‚ùå **Ch·ªâ Admin m·ªõi c√≥ th·ªÉ ho√†n ti·ªÅn!**\n\n"
                    "üëë **Quy·ªÅn h·∫°n:** Admin, Supreme Admin\n"
                    "üìç **V·ªã tr√≠:** K√™nh order (order-*)",
                    mention_author=True
                )
                return
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i k√™nh order kh√¥ng
            if not ctx.channel.name.startswith("order-"):
                await ctx.reply(
                    "‚ùå **L·ªánh n√†y ch·ªâ s·ª≠ d·ª•ng trong k√™nh ƒë∆°n h√†ng!**\n\n"
                    "üìç **K√™nh h·ª£p l·ªá:** order-*\n"
                    "üîç **K√™nh hi·ªán t·∫°i:** #{ctx.channel.name}",
                    mention_author=True
                )
                return
            
            await self.refund_order(ctx, reason or "Y√™u c·∫ßu ho√†n ti·ªÅn")
        
        @self.bot.command(name='checkshoppermissions')
        async def check_shop_permissions_command(ctx):
            """Ki·ªÉm tra quy·ªÅn c·ªßa bot cho shop system - ch·ªâ Admin"""
            if not self.bot_instance.is_admin(ctx.author.id):
                await ctx.reply("‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ ki·ªÉm tra permissions!", mention_author=True)
                return
            
            await self.check_shop_permissions(ctx)
        
        @self.bot.command(name='shopmanage')
        async def shop_management_command(ctx, action=None, target=None):
            """Qu·∫£n l√Ω shop system - ch·ªâ Admin"""
            if not self.bot_instance.is_admin(ctx.author.id):
                await ctx.reply("‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", mention_author=True)
                return
            
            if action == "add" and target:
                await self.add_user_to_order_channel(ctx, target)
            else:
                # Hi·ªÉn th·ªã help
                help_embed = discord.Embed(
                    title="üõ†Ô∏è Shop Management Commands",
                    description="C√°c l·ªánh qu·∫£n l√Ω shop system",
                    color=discord.Color.blue()
                )
                
                help_embed.add_field(
                    name=";shopmanage add <user_id>",
                    value="Th√™m user v√†o k√™nh order ƒë·ªÉ ki·ªÉm duy·ªát",
                    inline=False
                )
                
                help_embed.add_field(
                    name="C√°ch s·ª≠ d·ª•ng:",
                    value=(
                        "‚Ä¢ S·ª≠ d·ª•ng trong k√™nh order\n"
                        "‚Ä¢ User s·∫Ω c√≥ quy·ªÅn xem v√† chat\n"
                        "‚Ä¢ D√πng ƒë·ªÉ th√™m admin ki·ªÉm duy·ªát"
                    ),
                    inline=False
                )
                
                await ctx.reply(embed=help_embed, mention_author=True)
        
        @self.bot.command(name='role')
        async def role_command(ctx, action=None, role: discord.Role = None):
            """Qu·∫£n l√Ω role ƒë∆∞·ª£c ph√©p truy c·∫≠p k√™nh order - ch·ªâ Admin"""
            if not self.bot_instance.is_admin(ctx.author.id):
                await ctx.reply("‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ qu·∫£n l√Ω role!", mention_author=True)
                return
            
            if action == "add" and role:
                await self.add_allowed_role(ctx, role)
            elif action == "remove" and role:
                await self.remove_allowed_role(ctx, role)
            elif action == "list":
                await self.list_allowed_roles(ctx)
            else:
                # Hi·ªÉn th·ªã help
                help_embed = discord.Embed(
                    title="üé≠ Role Management Commands",
                    description="Qu·∫£n l√Ω role ƒë∆∞·ª£c ph√©p truy c·∫≠p k√™nh order EXP Rare",
                    color=discord.Color.blue()
                )
                
                help_embed.add_field(
                    name=";role add @Role",
                    value="Th√™m role v√†o danh s√°ch ƒë∆∞·ª£c ph√©p truy c·∫≠p k√™nh order",
                    inline=False
                )
                
                help_embed.add_field(
                    name=";role remove @Role",
                    value="X√≥a role kh·ªèi danh s√°ch ƒë∆∞·ª£c ph√©p truy c·∫≠p k√™nh order",
                    inline=False
                )
                
                help_embed.add_field(
                    name=";role list",
                    value="Xem danh s√°ch t·∫•t c·∫£ role ƒë∆∞·ª£c ph√©p truy c·∫≠p",
                    inline=False
                )
                
                help_embed.add_field(
                    name="üîë Quy·ªÅn h·∫°n role:",
                    value=(
                        "‚Ä¢ Xem t·∫•t c·∫£ k√™nh order EXP Rare\n"
                        "‚Ä¢ G·ª≠i tin nh·∫Øn trong k√™nh order\n"
                        "‚Ä¢ X√≥a tin nh·∫Øn (manage_messages)\n"
                        "‚Ä¢ Xem l·ªãch s·ª≠ tin nh·∫Øn"
                    ),
                    inline=False
                )
                
                help_embed.add_field(
                    name="üìù L∆∞u √Ω:",
                    value=(
                        "‚Ä¢ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ qu·∫£n l√Ω role\n"
                        "‚Ä¢ Role s·∫Ω √°p d·ª•ng cho t·∫•t c·∫£ k√™nh order m·ªõi\n"
                        "‚Ä¢ K√™nh order c≈© kh√¥ng b·ªã ·∫£nh h∆∞·ªüng"
                    ),
                    inline=False
                )
                
                help_embed.set_footer(
                    text="Shop System ‚Ä¢ Role Management",
                    icon_url=ctx.author.display_avatar.url
                )
                
                await ctx.reply(embed=help_embed, mention_author=True)
        
        @self.bot.command(name='resetexp')
        async def reset_all_exp_command(ctx):
            """Reset t·∫•t c·∫£ EXP Rare v·ªÅ 0 - ch·ªâ Supreme Admin"""
            if not self.bot_instance.is_supreme_admin(ctx.author.id):
                await ctx.reply("‚ùå Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ reset EXP Rare!", mention_author=True)
                return
            
            await self.reset_all_exp_rare(ctx)
        
        @self.bot.command(name='giveexp')
        async def give_exp_command_handler(ctx, user: discord.Member, amount: int):
            """Trao EXP Rare cho user - Admin only"""
            await self.give_exp_command(ctx, user, amount)
        
        @self.bot.command(name='setshop')
        async def set_shop_channel_command(ctx, channel: discord.TextChannel = None):
            """C·∫•u h√¨nh k√™nh shop ch√≠nh th·ª©c - ch·ªâ Admin"""
            if not self.bot_instance.is_admin(ctx.author.id):
                await ctx.reply("‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ c·∫•u h√¨nh k√™nh shop!", mention_author=True)
                return
            
            await self.set_shop_channel(ctx, channel)
        
        @self.bot.command(name='shopconfig')
        async def shop_config_command(ctx):
            """Xem c·∫•u h√¨nh shop hi·ªán t·∫°i - ch·ªâ Admin"""
            if not self.bot_instance.is_admin(ctx.author.id):
                await ctx.reply("‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ xem c·∫•u h√¨nh shop!", mention_author=True)
                return
            
            await self.show_shop_config(ctx)
    
    async def check_shop_permissions(self, ctx):
        """Ki·ªÉm tra chi ti·∫øt permissions c·ªßa bot"""
        guild = ctx.guild
        bot_member = guild.me
        bot_permissions = bot_member.guild_permissions
        
        embed = discord.Embed(
            title="üîç Ki·ªÉm tra quy·ªÅn Bot - Shop System",
            description=f"Permissions c·ªßa bot trong server **{guild.name}**",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        # Ki·ªÉm tra c√°c quy·ªÅn c·∫ßn thi·∫øt
        required_permissions = {
            "manage_channels": "T·∫°o category v√† text channel",
            "send_messages": "G·ª≠i tin nh·∫Øn trong channel",
            "embed_links": "G·ª≠i embed",
            "read_message_history": "Xem l·ªãch s·ª≠ tin nh·∫Øn",
            "manage_messages": "X√≥a tin nh·∫Øn (optional)",
            "add_reactions": "Th√™m reaction (optional)"
        }
        
        permissions_status = ""
        all_good = True
        
        for perm_name, description in required_permissions.items():
            has_permission = getattr(bot_permissions, perm_name, False)
            status_icon = "‚úÖ" if has_permission else "‚ùå"
            permissions_status += f"{status_icon} **{perm_name}**: {description}\n"
            
            if perm_name in ["manage_channels", "send_messages", "embed_links"] and not has_permission:
                all_good = False
        
        embed.add_field(
            name="üìã Quy·ªÅn c·∫ßn thi·∫øt:",
            value=permissions_status,
            inline=False
        )
        
        # Ki·ªÉm tra category Shop Orders
        category = discord.utils.get(guild.categories, name="üõí Shop Orders")
        if category:
            # Ki·ªÉm tra permissions trong category
            category_permissions = category.permissions_for(bot_member)
            category_manage = category_permissions.manage_channels
            category_send = category_permissions.send_messages
            
            category_status = f"‚úÖ ƒê√£ t·ªìn t·∫°i (ID: {category.id})\n"
            category_status += f"üîπ Manage Channels trong category: {'‚úÖ' if category_manage else '‚ùå'}\n"
            category_status += f"üîπ Send Messages trong category: {'‚úÖ' if category_send else '‚ùå'}"
            
            embed.add_field(
                name="üìÅ Category 'üõí Shop Orders':",
                value=category_status,
                inline=False
            )
            
            if not category_manage:
                all_good = False
        else:
            embed.add_field(
                name="üìÅ Category 'üõí Shop Orders':",
                value="‚ùå Ch∆∞a t·ªìn t·∫°i - s·∫Ω ƒë∆∞·ª£c t·∫°o khi c√≥ ƒë∆°n h√†ng ƒë·∫ßu ti√™n",
                inline=True
            )
        
        # T·ªïng k·∫øt
        if all_good:
            embed.add_field(
                name="üéØ T·ªïng k·∫øt:",
                value="‚úÖ **Bot c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ t·∫°o order channel**",
                inline=False
            )
            embed.color = discord.Color.green()
        else:
            embed.add_field(
                name="üéØ T·ªïng k·∫øt:",
                value="‚ùå **Bot thi·∫øu quy·ªÅn quan tr·ªçng - c·∫ßn c·∫•p th√™m quy·ªÅn**",
                inline=False
            )
            embed.color = discord.Color.red()
        
        embed.add_field(
            name="üîß C√°ch c·∫•p quy·ªÅn:",
            value=(
                "**Quy·ªÅn Server:**\n"
                "1. V√†o **Server Settings** > **Roles**\n"
                "2. Ch·ªçn role c·ªßa bot\n"
                "3. B·∫≠t c√°c quy·ªÅn c·∫ßn thi·∫øt\n\n"
                "**Quy·ªÅn Category (n·∫øu c√≥ l·ªói):**\n"
                "1. Right-click category **üõí Shop Orders**\n"
                "2. Ch·ªçn **Edit Category**\n"
                "3. V√†o tab **Permissions**\n"
                "4. Th√™m role bot v√† b·∫≠t **Manage Channels**"
            ),
            inline=False
        )
        
        embed.set_footer(text="Shop System Permission Check")
        
        await ctx.reply(embed=embed, mention_author=True)
    
    async def reset_all_exp_rare(self, ctx):
        """Reset t·∫•t c·∫£ EXP Rare v·ªÅ 0 - V·ªõi x√°c nh·∫≠n an to√†n"""
        # ƒê·∫øm s·ªë users c√≥ EXP Rare
        users_with_exp = 0
        total_exp_removed = 0
        
        for user_id, user_data in self.shop_data.items():
            if user_data.get("exp_rare", 0) > 0:
                users_with_exp += 1
                total_exp_removed += user_data["exp_rare"]
        
        if users_with_exp == 0:
            await ctx.reply("‚ÑπÔ∏è Kh√¥ng c√≥ user n√†o c√≥ EXP Rare ƒë·ªÉ reset!", mention_author=True)
            return
        
        # T·∫°o embed x√°c nh·∫≠n
        confirm_embed = discord.Embed(
            title="‚ö†Ô∏è X√°c nh·∫≠n reset EXP Rare",
            description="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën reset t·∫•t c·∫£ EXP Rare v·ªÅ 0?",
            color=discord.Color.orange(),
            timestamp=datetime.now()
        )
        
        confirm_embed.add_field(
            name="üìä Th·ªëng k√™:",
            value=f"‚Ä¢ **{users_with_exp:,}** users c√≥ EXP Rare\n‚Ä¢ **{total_exp_removed:,}** EXP s·∫Ω b·ªã x√≥a",
            inline=False
        )
        
        confirm_embed.add_field(
            name="‚ö†Ô∏è C·∫£nh b√°o:",
            value="**H√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!**\nT·∫•t c·∫£ EXP Rare s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn.",
            inline=False
        )
        
        confirm_embed.add_field(
            name="üîß C√°ch x√°c nh·∫≠n:",
            value="Reply tin nh·∫Øn n√†y v·ªõi `CONFIRM` ƒë·ªÉ th·ª±c hi·ªán reset",
            inline=False
        )
        
        confirm_embed.set_footer(text="Shop System ‚Ä¢ EXP Reset")
        
        confirm_message = await ctx.reply(embed=confirm_embed, mention_author=True)
        
        # Ch·ªù x√°c nh·∫≠n
        def check(message):
            return (message.author == ctx.author and 
                   message.reference and 
                   message.reference.message_id == confirm_message.id and
                   message.content.upper() == "CONFIRM")
        
        try:
            await self.bot.wait_for('message', check=check, timeout=30.0)
        except asyncio.TimeoutError:
            # Timeout - h·ªßy reset
            timeout_embed = discord.Embed(
                title="‚è∞ H·∫øt th·ªùi gian x√°c nh·∫≠n",
                description="Reset EXP Rare ƒë√£ b·ªã h·ªßy do kh√¥ng c√≥ x√°c nh·∫≠n trong 30 gi√¢y.",
                color=discord.Color.red()
            )
            await ctx.followup.send(embed=timeout_embed)
            return
        
        # Th·ª±c hi·ªán reset
        reset_count = 0
        for user_id, user_data in self.shop_data.items():
            if user_data.get("exp_rare", 0) > 0:
                user_data["exp_rare"] = 0
                reset_count += 1
        
        # L∆∞u data
        self.save_shop_data()
        
        # Th√¥ng b√°o th√†nh c√¥ng
        success_embed = discord.Embed(
            title="‚úÖ ƒê√£ reset EXP Rare th√†nh c√¥ng",
            description="T·∫•t c·∫£ EXP Rare ƒë√£ ƒë∆∞·ª£c reset v·ªÅ 0",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        success_embed.add_field(
            name="üìä K·∫øt qu·∫£:",
            value=f"‚Ä¢ **{reset_count:,}** users ƒë√£ b·ªã reset\n‚Ä¢ **{total_exp_removed:,}** EXP ƒë√£ b·ªã x√≥a",
            inline=False
        )
        
        success_embed.add_field(
            name="üë®‚Äçüíº Th·ª±c hi·ªán b·ªüi:",
            value=f"{ctx.author.mention} ({ctx.author.name})",
            inline=False
        )
        
        success_embed.set_footer(text="Shop System ‚Ä¢ EXP Reset Completed")
        
        await ctx.followup.send(embed=success_embed)
        
        # Log action
        logger.info(f"EXP Rare reset by {ctx.author.name} ({ctx.author.id}): {reset_count} users, {total_exp_removed} EXP removed")
    
    async def add_user_to_order_channel(self, ctx, user_id_str):
        """Th√™m user v√†o k√™nh order ƒë·ªÉ ki·ªÉm duy·ªát"""
        # Ki·ªÉm tra xem c√≥ ph·∫£i k√™nh order kh√¥ng
        if not ctx.channel.name.startswith("order-"):
            await ctx.reply("‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong k√™nh ƒë∆°n h√†ng!", mention_author=True)
            return
        
        try:
            user_id = int(user_id_str)
        except ValueError:
            await ctx.reply("‚ùå User ID kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë ID.", mention_author=True)
            return
        
        # T√¨m user trong server
        user = ctx.guild.get_member(user_id)
        if not user:
            await ctx.reply("‚ùå Kh√¥ng t√¨m th·∫•y user n√†y trong server!", mention_author=True)
            return
        
        # Ki·ªÉm tra user ƒë√£ c√≥ quy·ªÅn ch∆∞a
        current_permissions = ctx.channel.permissions_for(user)
        if current_permissions.read_messages:
            await ctx.reply(f"‚ö†Ô∏è {user.mention} ƒë√£ c√≥ quy·ªÅn xem k√™nh n√†y r·ªìi!", mention_author=True)
            return
        
        try:
            # Th√™m quy·ªÅn cho user
            await ctx.channel.set_permissions(
                user,
                read_messages=True,
                send_messages=True,
                read_message_history=True
            )
            
            # Th√¥ng b√°o th√†nh c√¥ng
            success_embed = discord.Embed(
                title="‚úÖ ƒê√£ th√™m user v√†o k√™nh",
                description=f"User {user.mention} ƒë√£ ƒë∆∞·ª£c th√™m v√†o k√™nh order",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            success_embed.add_field(
                name="üë§ User ƒë∆∞·ª£c th√™m:",
                value=f"{user.mention} ({user.name})",
                inline=True
            )
            
            success_embed.add_field(
                name="üîß Quy·ªÅn ƒë∆∞·ª£c c·∫•p:",
                value="‚Ä¢ Xem k√™nh\n‚Ä¢ G·ª≠i tin nh·∫Øn\n‚Ä¢ Xem l·ªãch s·ª≠",
                inline=True
            )
            
            success_embed.add_field(
                name="üë®‚Äçüíº ƒê∆∞·ª£c th√™m b·ªüi:",
                value=f"{ctx.author.mention}",
                inline=True
            )
            
            success_embed.set_footer(text="Shop System ‚Ä¢ User Management")
            
            await ctx.reply(embed=success_embed, mention_author=True)
            
            # Th√¥ng b√°o cho user ƒë∆∞·ª£c th√™m
            try:
                welcome_embed = discord.Embed(
                    title="üõí B·∫°n ƒë√£ ƒë∆∞·ª£c th√™m v√†o k√™nh order",
                    description=f"Admin {ctx.author.mention} ƒë√£ th√™m b·∫°n v√†o k√™nh {ctx.channel.mention}",
                    color=discord.Color.blue()
                )
                
                welcome_embed.add_field(
                    name="üìã M·ª•c ƒë√≠ch:",
                    value="Ki·ªÉm duy·ªát v√† h·ªó tr·ª£ x·ª≠ l√Ω ƒë∆°n h√†ng",
                    inline=False
                )
                
                await user.send(embed=welcome_embed)
            except discord.Forbidden:
                # Kh√¥ng g·ª≠i ƒë∆∞·ª£c DM, th√¥ng b√°o trong k√™nh
                await ctx.channel.send(f"üëã {user.mention} Ch√†o m·ª´ng b·∫°n ƒë·∫øn k√™nh order! B·∫°n c√≥ th·ªÉ xem v√† chat trong k√™nh n√†y.")
                
        except discord.Forbidden:
            await ctx.reply("‚ùå Bot kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a permissions c·ªßa k√™nh n√†y!", mention_author=True)
        except Exception as e:
            logger.error(f"L·ªói khi th√™m user {user_id} v√†o k√™nh {ctx.channel.id}: {e}")
            await ctx.reply("‚ùå C√≥ l·ªói x·∫£y ra khi th√™m user v√†o k√™nh!", mention_author=True)
    
    async def add_order_handler(self, ctx, user_id):
        """Th√™m order handler"""
        if not self.bot_instance.is_admin(ctx.author.id):
            await ctx.reply("‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ th√™m Order Handler!", mention_author=True)
            return
        
        # Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
        user = ctx.guild.get_member(user_id)
        if not user:
            await ctx.reply("‚ùå Kh√¥ng t√¨m th·∫•y user n√†y trong server!", mention_author=True)
            return
        
        # Ki·ªÉm tra ƒë√£ l√† handler ch∆∞a
        if user_id in self.shop_config.get("order_handlers", []):
            await ctx.reply(f"‚ùå {user.mention} ƒë√£ l√† Order Handler r·ªìi!", mention_author=True)
            return
        
        # Th√™m v√†o danh s√°ch
        if "order_handlers" not in self.shop_config:
            self.shop_config["order_handlers"] = []
        
        self.shop_config["order_handlers"].append(user_id)
        self.save_shop_config()
        
        embed = discord.Embed(
            title="‚úÖ Th√™m Order Handler th√†nh c√¥ng",
            description=f"ƒê√£ th√™m {user.mention} v√†o danh s√°ch Order Handler",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üë§ Order Handler m·ªõi:",
            value=f"{user.mention} ({user.name})",
            inline=True
        )
        
        embed.add_field(
            name="üîî Quy·ªÅn h·∫°n:",
            value=(
                "‚Ä¢ Nh·∫≠n th√¥ng b√°o ƒë∆°n h√†ng m·ªõi\n"
                "‚Ä¢ Truy c·∫≠p k√™nh order\n"
                "‚Ä¢ S·ª≠ d·ª•ng l·ªánh ;`"
            ),
            inline=True
        )
        
        embed.add_field(
            name="üìä T·ªïng Order Handler:",
            value=f"{len(self.shop_config['order_handlers'])} ng∆∞·ªùi",
            inline=True
        )
        
        embed.set_footer(text="Shop Management")
        
        await ctx.reply(embed=embed, mention_author=True)
        
        # Th√¥ng b√°o cho user ƒë∆∞·ª£c th√™m
        try:
            welcome_embed = discord.Embed(
                title="üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ tr·ªü th√†nh Order Handler",
                description="B·∫°n ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch x·ª≠ l√Ω ƒë∆°n h√†ng EXP Rare Shop",
                color=discord.Color.gold(),
                timestamp=datetime.now()
            )
            
            welcome_embed.add_field(
                name="üîî Nhi·ªám v·ª•:",
                value=(
                    "‚Ä¢ Nh·∫≠n th√¥ng b√°o khi c√≥ ƒë∆°n h√†ng m·ªõi\n"
                    "‚Ä¢ V√†o k√™nh order ƒë·ªÉ x·ª≠ l√Ω\n"
                    "‚Ä¢ S·ª≠ d·ª•ng ;stop ƒë·ªÉ ho√†n th√†nh ƒë∆°n h√†ng"
                ),
                inline=False
            )
            
            welcome_embed.add_field(
                name="üìã L∆∞u √Ω:",
                value=(
                    "‚Ä¢ B·∫°n s·∫Ω nh·∫≠n DM khi c√≥ ƒë∆°n h√†ng m·ªõi\n"
                    "‚Ä¢ Ch·ªâ s·ª≠ d·ª•ng ;` trong k√™nh order\n"
                    "‚Ä¢ Li√™n h·ªá admin n·∫øu c√≥ v·∫•n ƒë·ªÅ"
                ),
                inline=False
            )
            
            welcome_embed.set_footer(text="EXP Rare Shop ‚Ä¢ Order Handler")
            
            await user.send(embed=welcome_embed)
        except:
            pass
    
    async def remove_order_handler(self, ctx, user_id):
        """X√≥a order handler"""
        if not self.bot_instance.is_admin(ctx.author.id):
            await ctx.reply("‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ x√≥a Order Handler!", mention_author=True)
            return
        
        # Ki·ªÉm tra c√≥ trong danh s√°ch kh√¥ng
        if user_id not in self.shop_config.get("order_handlers", []):
            await ctx.reply("‚ùå User n√†y kh√¥ng ph·∫£i Order Handler!", mention_author=True)
            return
        
        # X√≥a kh·ªèi danh s√°ch
        self.shop_config["order_handlers"].remove(user_id)
        self.save_shop_config()
        
        user = ctx.guild.get_member(user_id)
        user_name = user.name if user else f"User ID: {user_id}"
        
        embed = discord.Embed(
            title="‚úÖ X√≥a Order Handler th√†nh c√¥ng",
            description=f"ƒê√£ x√≥a {user.mention if user else user_name} kh·ªèi danh s√°ch Order Handler",
            color=discord.Color.orange(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üìä T·ªïng Order Handler c√≤n l·∫°i:",
            value=f"{len(self.shop_config['order_handlers'])} ng∆∞·ªùi",
            inline=True
        )
        
        embed.set_footer(text="Shop Management")
        
        await ctx.reply(embed=embed, mention_author=True)
    
    async def list_order_handlers(self, ctx):
        """Li·ªát k√™ order handlers"""
        if not self.bot_instance.is_admin(ctx.author.id):
            await ctx.reply("‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ xem danh s√°ch Order Handler!", mention_author=True)
            return
        
        handlers = self.shop_config.get("order_handlers", [])
        
        embed = discord.Embed(
            title="üìã Danh s√°ch Order Handler",
            description=f"C√≥ {len(handlers)} Order Handler ƒëang ho·∫°t ƒë·ªông",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        if handlers:
            handler_list = []
            for i, handler_id in enumerate(handlers, 1):
                user = ctx.guild.get_member(handler_id)
                if user:
                    handler_list.append(f"{i}. {user.mention} ({user.name})")
                else:
                    handler_list.append(f"{i}. User ID: {handler_id} (Kh√¥ng trong server)")
            
            embed.add_field(
                name="üë• Order Handlers:",
                value="\n".join(handler_list),
                inline=False
            )
        else:
            embed.add_field(
                name="üìù Tr·∫°ng th√°i:",
                value="Ch∆∞a c√≥ Order Handler n√†o",
                inline=False
            )
        
        embed.add_field(
            name="üîß Qu·∫£n l√Ω:",
            value=(
                "‚Ä¢ ; add <user_id>` - Th√™m handler\n"
                "‚Ä¢ ; remove <user_id>` - X√≥a handler\n"
                "‚Ä¢ ; list` - Xem danh s√°ch"
            ),
            inline=False
        )
        
        embed.set_footer(text="Shop Management")
        
        await ctx.reply(embed=embed, mention_author=True)
    
    async def test_wallet_connection(self, ctx):
        """Test k·∫øt n·ªëi v·ªõi shared wallet"""
        embed = discord.Embed(
            title="üîß Test Wallet Connection",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        # Test bot instance
        embed.add_field(
            name="ü§ñ Bot Instance:",
            value="‚úÖ OK" if self.bot_instance else "‚ùå Kh√¥ng c√≥",
            inline=True
        )
        
        # Test shared wallet attribute
        has_wallet = hasattr(self.bot_instance, 'shared_wallet')
        embed.add_field(
            name="üí∞ Shared Wallet Attribute:",
            value="‚úÖ C√≥" if has_wallet else "‚ùå Kh√¥ng c√≥",
            inline=True
        )
        
        # Test shared wallet instance
        wallet_instance = None
        if has_wallet:
            wallet_instance = self.bot_instance.shared_wallet
        
        embed.add_field(
            name="üí≥ Wallet Instance:",
            value="‚úÖ OK" if wallet_instance else "‚ùå None",
            inline=True
        )
        
        # Test get balance
        try:
            if wallet_instance:
                balance = wallet_instance.get_balance(ctx.author.id)
                embed.add_field(
                    name="üíµ S·ªë d∆∞ c·ªßa b·∫°n:",
                    value=f"‚úÖ {balance:,} xu",
                    inline=True
                )
            else:
                embed.add_field(
                    name="üíµ S·ªë d∆∞:",
                    value="‚ùå Kh√¥ng th·ªÉ l·∫•y",
                    inline=True
                )
        except Exception as e:
            embed.add_field(
                name="üíµ L·ªói get balance:",
                value=f"‚ùå {str(e)}",
                inline=True
            )
        
        # Test file path
        if wallet_instance:
            embed.add_field(
                name="üìÅ File path:",
                value=f"‚úÖ {wallet_instance.wallet_file}",
                inline=False
            )
        
        embed.set_footer(text="Shop Debug Info")
        await ctx.reply(embed=embed, mention_author=True)
    
    async def show_shop(self, ctx):
        """Hi·ªÉn th·ªã shop EXP Rare v·ªõi giao di·ªán ƒë·∫πp"""
        embed = discord.Embed(
            title="‚ú® DIGITAL PRODUCTS SHOP ‚ú®",
            description="üåü **C·ª≠a h√†ng s·∫£n ph·∫©m s·ªë** - Gmail & TikTok ch·∫•t l∆∞·ª£ng cao!",
            color=0xFFD700,  # V√†ng ƒë·∫πp h∆°n
            timestamp=datetime.now()
        )
        
        # Hi·ªÉn th·ªã th√¥ng tin user v·ªõi style ƒë·∫πp
        user_balance = self.get_user_balance(ctx.author.id)
        user_exp = self.get_user_exp(ctx.author.id)
        
        embed.add_field(
            name="üíé TH√îNG TIN T√ÄI KHO·∫¢N",
            value=(
                f"üë§ **{ctx.author.display_name}**\n"
                f"üí∞ **S·ªë d∆∞:** {user_balance:,} xu\n"
                f"üõí **Tr·∫°ng th√°i:** S·∫µn s√†ng mua s·∫Øm"
            ),
            inline=False
        )
        
        # Ch·ªâ b√°n Gmail v√† TikTok
        embed.add_field(
            name="üéØ S·∫¢N PH·∫®M HI·ªÜN C√ì",
            value=(
                "üìß **Gmail 1 tu·∫ßn** - 1 tri·ªáu xu\n"
                "üì± **TikTok Account** - 1 tri·ªáu xu\n\n"
                "üîí **Giao h√†ng:** T·ª± ƒë·ªông qua DM ri√™ng t∆∞\n"
                "‚úÖ **Ch·∫•t l∆∞·ª£ng:** ƒê∆∞·ª£c ki·ªÉm tra k·ªπ l∆∞·ª°ng"
            ),
            inline=False
        )
        
        # S·∫£n ph·∫©m kh√°c
        gmail_count = len(self.product_inventory.get("gmail", []))
        tiktok_count = len(self.product_inventory.get("tiktok", []))
        
        embed.add_field(
            name="üìß GMAIL 1 TU·∫¶N",
            value=(
                f"üí∞ **Gi√°:** 1 tri·ªáu xu\n"
                f"üì¶ **C√≥ s·∫µn:** {gmail_count} t√†i kho·∫£n\n"
                f"‚è∞ **Th·ªùi h·∫°n:** 1 tu·∫ßn s·ª≠ d·ª•ng\n"
                f"üîí **Giao h√†ng:** Qua DM ri√™ng t∆∞"
            ),
            inline=True
        )
        
        embed.add_field(
            name="üì± TIKTOK ACCOUNT",
            value=(
                f"üí∞ **Gi√°:** 1 tri·ªáu xu\n"
                f"üì¶ **C√≥ s·∫µn:** {tiktok_count} t√†i kho·∫£n\n"
                f"‚ú® **Ch·∫•t l∆∞·ª£ng:** T√†i kho·∫£n ƒë√£ t·∫°o s·∫µn\n"
                f"üîí **Giao h√†ng:** Qua DM ri√™ng t∆∞"
            ),
            inline=True
        )
        
        # H∆∞·ªõng d·∫´n mua h√†ng
        embed.add_field(
            name="üõí H∆Ø·ªöNG D·∫™N MUA H√ÄNG",
            value=(
                "üìß **Gmail:** `;buy gmail`\n"
                "üì± **TikTok:** `;buy tiktok`\n\n"
                "üí° **V√≠ d·ª•:** `;buy gmail` - Mua Gmail 1 tu·∫ßn\n"
                "‚úÖ **Giao h√†ng:** T·ª± ƒë·ªông qua DM ri√™ng t∆∞"
            ),
            inline=False
        )
        
        # Th√™m th√¥ng tin admin n·∫øu l√† admin
        if self.bot_instance.is_admin(ctx.author.id):
            embed.add_field(
                name="üëë L·ªÜNH ADMIN - QU·∫¢N L√ù H√ÄNG H√ìA",
                value=(
                    "üì¶ **Xem kho:** `;shop hanghoa`\n"
                    "üìù **Th√™m t·ª´ text:** `;shop hanghoa gmail user@gmail.com:pass`\n"
                    "üìÅ **Th√™m t·ª´ file:** `;shop hanghoa gmail` + ƒë√≠nh k√®m file .txt\n"
                    "üì± **TikTok:** `;shop hanghoa tiktok @user:pass`\n\n"
                    "üí¨ **C√≥ th·ªÉ s·ª≠ d·ª•ng qua DM** (ch·ªâ Admin)\n"
                    "üìÑ **File format:** M·ªói d√≤ng = 1 t√†i kho·∫£n"
                ),
                inline=False
            )
        
        # Th√™m thumbnail v√† footer ƒë·∫πp
        embed.set_thumbnail(url="https://cdn.discordapp.com/emojis/741090906504290334.png")
        embed.set_footer(
            text="üåü Digital Products Shop ‚Ä¢ Gmail & TikTok ‚Ä¢ 24/7 Support",
            icon_url=ctx.author.display_avatar.url
        )
        
        # Th√™m author ƒë·ªÉ l√†m ƒë·∫πp
        embed.set_author(
            name="Premium Digital Store",
            icon_url="https://cdn.discordapp.com/emojis/741090906504290334.png"
        )
        
        await ctx.reply(embed=embed, mention_author=True)
    
    # buy_exp_package function removed - no longer selling EXP
    
    async def notify_admin_dm(self, ctx, order_id, package_info):
        """G·ª≠i DM cho admin v·ªÅ ƒë∆°n h√†ng m·ªõi"""
        try:
            # T·∫°o embed th√¥ng b√°o cho admin
            admin_embed = discord.Embed(
                title="üõí ƒê∆†N H√ÄNG M·ªöI - TH√îNG B√ÅO T·∫§T C·∫¢ ADMIN",
                description=f"C√≥ ƒë∆°n h√†ng EXP Rare m·ªõi c·∫ßn x·ª≠ l√Ω t·ª´ {ctx.author.mention}",
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            
            admin_embed.add_field(
                name="üÜî M√£ ƒë∆°n h√†ng:",
                value=f"**{order_id}**",
                inline=False
            )
            
            admin_embed.add_field(
                name="üë§ Kh√°ch h√†ng:",
                value=f"{ctx.author.mention} ({ctx.author.display_name})\nID: {ctx.author.id}",
                inline=True
            )
            
            admin_embed.add_field(
                name="üì¶ S·∫£n ph·∫©m:",
                value=f"**{package_info['name']}**",
                inline=True
            )
            
            admin_embed.add_field(
                name="üí∞ Gi√° tr·ªã:",
                value=f"**{package_info['price']:,} xu**",
                inline=True
            )
            
            admin_embed.add_field(
                name="‚≠ê EXP Rare:",
                value=f"**{package_info['exp']:,} EXP**",
                inline=True
            )
            
            admin_embed.add_field(
                name="üïê Th·ªùi gian:",
                value=f"<t:{int(datetime.now().timestamp())}:F>",
                inline=True
            )
            
            admin_embed.add_field(
                name="üìç Server:",
                value=f"{ctx.guild.name}",
                inline=True
            )
            
            admin_embed.add_field(
                name="üìù H∆∞·ªõng d·∫´n x·ª≠ l√Ω:",
                value=(
                    "**Reply tin nh·∫Øn n√†y** ƒë·ªÉ ho√†n th√†nh ƒë∆°n h√†ng!\n"
                    "‚Ä¢ Bot s·∫Ω t·ª± ƒë·ªông c·∫•p EXP cho user\n"
                    "‚Ä¢ User s·∫Ω nh·∫≠n th√¥ng b√°o ho√†n th√†nh\n"
                    "‚Ä¢ ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c ƒë√°nh d·∫•u ho√†n th√†nh\n"
                    "‚Ä¢ Th√¥ng b√°o n√†y ƒë∆∞·ª£c g·ª≠i ƒë·∫øn t·∫•t c·∫£ Admin"
                ),
                inline=False
            )
            
            admin_embed.set_footer(text="Reply tin nh·∫Øn n√†y ƒë·ªÉ x·ª≠ l√Ω ƒë∆°n h√†ng!")
            
            # G·ª≠i DM cho Supreme Admin v√† Order Handlers
            admins_notified = []
            
            # G·ª≠i cho Supreme Admin
            supreme_admin_id = self.bot_instance.supreme_admin_id
            if supreme_admin_id:
                try:
                    supreme_admin = self.bot.get_user(supreme_admin_id)
                    if supreme_admin:
                        await supreme_admin.send(embed=admin_embed)
                        admins_notified.append(f"Supreme Admin ({supreme_admin.display_name})")
                        logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o ƒë∆°n h√†ng {order_id} cho Supreme Admin {supreme_admin_id}")
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i DM cho Supreme Admin {supreme_admin_id}: {e}")
            
            # G·ª≠i cho t·∫•t c·∫£ Admin
            admin_ids = self.bot_instance.config.get('admin_ids', [])
            for admin_id in admin_ids:
                try:
                    admin = self.bot.get_user(admin_id)
                    if admin:
                        await admin.send(embed=admin_embed)
                        admins_notified.append(f"Admin ({admin.display_name})")
                        logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o ƒë∆°n h√†ng {order_id} cho admin {admin_id}")
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i DM cho admin {admin_id}: {e}")
            
            # G·ª≠i cho Order Handlers (n·∫øu c√≥)
            order_handlers = self.shop_config.get("order_handlers", [])
            for handler_id in order_handlers:
                try:
                    handler = self.bot.get_user(handler_id)
                    if handler:
                        await handler.send(embed=admin_embed)
                        admins_notified.append(f"Handler ({handler.display_name})")
                        logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o ƒë∆°n h√†ng {order_id} cho handler {handler_id}")
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i DM cho handler {handler_id}: {e}")
            
            if admins_notified:
                logger.info(f"ƒê√£ th√¥ng b√°o ƒë∆°n h√†ng {order_id} cho: {', '.join(admins_notified)}")
            else:
                logger.warning(f"Kh√¥ng th·ªÉ th√¥ng b√°o ƒë∆°n h√†ng {order_id} cho admin n√†o!")
                
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o admin cho ƒë∆°n h√†ng {order_id}: {e}")
    
    async def process_admin_reply(self, message):
        """X·ª≠ l√Ω khi admin reply DM ƒë·ªÉ ho√†n th√†nh ƒë∆°n h√†ng"""
        try:
            # Ki·ªÉm tra xem c√≥ ph·∫£i admin kh√¥ng
            if not (self.bot_instance.is_admin(message.author.id) or 
                    message.author.id == self.bot_instance.supreme_admin_id):
                return False
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i reply kh√¥ng
            if not message.reference or not message.reference.message_id:
                return False
            
            # L·∫•y tin nh·∫Øn ƒë∆∞·ª£c reply
            try:
                replied_message = await message.channel.fetch_message(message.reference.message_id)
            except:
                return False
            
            # Ki·ªÉm tra xem tin nh·∫Øn ƒë∆∞·ª£c reply c√≥ ph·∫£i t·ª´ bot kh√¥ng
            if replied_message.author.id != self.bot.user.id:
                return False
            
            # T√¨m order ID t·ª´ embed
            if not replied_message.embeds:
                return False
            
            embed = replied_message.embeds[0]
            order_id = None
            
            # T√¨m order ID trong embed fields
            for field in embed.fields:
                if field.name == "üÜî M√£ ƒë∆°n h√†ng:":
                    order_id = field.value.strip("*")
                    break
            
            if not order_id or order_id not in self.pending_orders:
                return False
            
            # L·∫•y th√¥ng tin ƒë∆°n h√†ng
            order_data = self.pending_orders[order_id]
            
            # C·∫•p EXP cho user
            self.add_user_exp(order_data["user_id"], order_data["exp_amount"])
            
            # Chuy·ªÉn ƒë∆°n h√†ng sang completed
            self.orders_data[order_id] = {
                **order_data,
                "status": "completed",
                "completed_time": datetime.now().isoformat(),
                "completed_by": message.author.id,
                "admin_reply": message.content
            }
            self.save_orders_data()
            
            # X√≥a kh·ªèi pending orders
            del self.pending_orders[order_id]
            self.save_pending_orders()
            
            # Th√¥ng b√°o cho admin
            admin_success_embed = discord.Embed(
                title="‚úÖ ƒê∆°n h√†ng ƒë√£ ho√†n th√†nh!",
                description=f"ƒê∆°n h√†ng `{order_id}` ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            admin_success_embed.add_field(
                name="üë§ Kh√°ch h√†ng:",
                value=f"<@{order_data['user_id']}> ({order_data['user_display_name']})",
                inline=True
            )
            
            admin_success_embed.add_field(
                name="‚≠ê EXP ƒë√£ c·∫•p:",
                value=f"**{order_data['exp_amount']:,} EXP Rare**",
                inline=True
            )
            
            admin_success_embed.add_field(
                name="üí¨ Ghi ch√∫ admin:",
                value=f"*{message.content}*" if message.content else "*Kh√¥ng c√≥ ghi ch√∫*",
                inline=False
            )
            
            await message.reply(embed=admin_success_embed)
            
            # Th√¥ng b√°o cho user
            try:
                user = self.bot.get_user(order_data["user_id"])
                if user:
                    user_success_embed = discord.Embed(
                        title="üéâ ƒê∆°n h√†ng ho√†n th√†nh!",
                        description=f"ƒê∆°n h√†ng `{order_id}` c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!",
                        color=discord.Color.green(),
                        timestamp=datetime.now()
                    )
                    
                    user_success_embed.add_field(
                        name="üì¶ S·∫£n ph·∫©m:",
                        value=f"**{order_data['package_name']}**",
                        inline=False
                    )
                    
                    user_success_embed.add_field(
                        name="‚≠ê EXP Rare nh·∫≠n ƒë∆∞·ª£c:",
                        value=f"**+{order_data['exp_amount']:,} EXP**",
                        inline=True
                    )
                    
                    user_success_embed.add_field(
                        name="üí∞ ƒê√£ thanh to√°n:",
                        value=f"**{order_data['price']:,} xu**",
                        inline=True
                    )
                    
                    if message.content:
                        user_success_embed.add_field(
                            name="üí¨ L·ªùi nh·∫Øn t·ª´ admin:",
                            value=f"*{message.content}*",
                            inline=False
                        )
                    
                    user_success_embed.set_footer(text="C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!")
                    
                    await user.send(embed=user_success_embed)
                    logger.info(f"ƒê√£ th√¥ng b√°o ho√†n th√†nh ƒë∆°n h√†ng {order_id} cho user {order_data['user_id']}")
            except Exception as e:
                logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ho√†n th√†nh cho user {order_data['user_id']}: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω admin reply: {e}")
            return False
    
    async def complete_order(self, ctx):
        """Ho√†n th√†nh ƒë∆°n h√†ng"""
        # T√¨m ƒë∆°n h√†ng t·ª´ t√™n k√™nh
        channel_name = ctx.channel.name
        order_id = None
        
        for oid, order_data in self.orders_data.items():
            if order_data.get("channel_id") == ctx.channel.id:
                order_id = oid
                break
        
        if not order_id:
            await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng!")
            return
        
        order_data = self.orders_data[order_id]
        
        # Th√™m EXP cho user
        self.add_user_exp(order_data["user_id"], order_data["exp_amount"])
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        self.orders_data[order_id]["status"] = "completed"
        self.orders_data[order_id]["completed_time"] = datetime.now().isoformat()
        self.orders_data[order_id]["completed_by"] = ctx.author.id
        self.save_orders_data()
        
        # Th√¥ng b√°o ho√†n th√†nh
        complete_embed = discord.Embed(
            title="‚úÖ ƒê∆°n h√†ng ho√†n th√†nh!",
            description=f"ƒê∆°n h√†ng #{order_id} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        complete_embed.add_field(
            name="üë§ Kh√°ch h√†ng:",
            value=f"<@{order_data['user_id']}>",
            inline=True
        )
        
        complete_embed.add_field(
            name="üì¶ S·∫£n ph·∫©m:",
            value=order_data["package_name"],
            inline=True
        )
        
        complete_embed.add_field(
            name="‚≠ê EXP ƒë√£ th√™m:",
            value=f"{order_data['exp_amount']:,} EXP Rare",
            inline=True
        )
        
        complete_embed.add_field(
            name="üë®‚Äçüíº X·ª≠ l√Ω b·ªüi:",
            value=ctx.author.mention,
            inline=True
        )
        
        complete_embed.set_footer(text="K√™nh s·∫Ω b·ªã x√≥a sau 30 gi√¢y")
        
        await ctx.send(embed=complete_embed)
        
        # G·ª≠i th√¥ng b√°o ho√†n th√†nh ƒë·∫øn ng∆∞·ªùi mua
        await self.notify_order_completion(
            order_data["user_id"], 
            order_id, 
            order_data["package_name"], 
            ctx.author.id
        )
        
        # X√≥a k√™nh sau 30 gi√¢y
        await asyncio.sleep(30)
        try:
            await ctx.channel.delete(reason=f"ƒê∆°n h√†ng #{order_id} ho√†n th√†nh")
        except:
            pass
    
    async def handle_admin_reply(self, message):
        """X·ª≠ l√Ω khi admin reply tin nh·∫Øn DM ƒë·ªÉ ho√†n th√†nh ƒë∆°n h√†ng"""
        try:
            # Ki·ªÉm tra xem c√≥ ph·∫£i admin kh√¥ng
            if not (self.bot_instance.is_admin(message.author.id) or 
                   message.author.id in self.shop_config.get("order_handlers", [])):
                return False
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i reply kh√¥ng
            if not message.reference or not message.reference.message_id:
                return False
            
            # L·∫•y tin nh·∫Øn g·ªëc
            try:
                original_message = await message.channel.fetch_message(message.reference.message_id)
            except:
                return False
            
            # Ki·ªÉm tra xem tin nh·∫Øn g·ªëc c√≥ ph·∫£i t·ª´ bot kh√¥ng
            if original_message.author.id != self.bot.user.id:
                return False
            
            # Ki·ªÉm tra xem c√≥ embed ƒë∆°n h√†ng kh√¥ng
            if not original_message.embeds:
                return False
            
            embed = original_message.embeds[0]
            if "ƒê∆†N H√ÄNG M·ªöI - SHOP EXP RARE" not in embed.title:
                return False
            
            # T√¨m order ID t·ª´ embed
            order_id = None
            for field in embed.fields:
                if field.name == "üÜî M√£ ƒë∆°n h√†ng:":
                    order_id = field.value.strip("*")
                    break
            
            if not order_id or order_id not in self.pending_orders:
                await message.reply("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!")
                return True
            
            # X·ª≠ l√Ω ƒë∆°n h√†ng
            order_data = self.pending_orders[order_id]
            
            # C·∫•p EXP cho user (gi·∫£ l·∫≠p - c·∫ßn t√≠ch h·ª£p v·ªõi h·ªá th·ªëng EXP th·ª±c t·∫ø)
            user_id = order_data["user_id"]
            exp_amount = order_data["exp_amount"]
            
            # L∆∞u v√†o l·ªãch s·ª≠ ƒë∆°n h√†ng
            self.orders_data[order_id] = {
                **order_data,
                "status": "completed",
                "completed_by": message.author.id,
                "completed_by_name": message.author.display_name,
                "completion_time": datetime.now().isoformat(),
                "admin_note": message.content[:500] if message.content else "ƒê√£ x·ª≠ l√Ω"
            }
            
            # X√≥a kh·ªèi pending orders
            del self.pending_orders[order_id]
            
            # L∆∞u d·ªØ li·ªáu
            self.save_orders_data()
            self.save_pending_orders()
            
            # Th√¥ng b√°o ho√†n th√†nh cho admin
            success_embed = discord.Embed(
                title="‚úÖ ƒê∆°n h√†ng ƒë√£ ho√†n th√†nh!",
                description=f"ƒê∆°n h√†ng `{order_id}` ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            success_embed.add_field(
                name="üë§ Kh√°ch h√†ng:",
                value=f"<@{user_id}> ({order_data['user_display_name']})",
                inline=True
            )
            
            success_embed.add_field(
                name="üì¶ S·∫£n ph·∫©m:",
                value=order_data["package_name"],
                inline=True
            )
            
            success_embed.add_field(
                name="‚≠ê EXP ƒë√£ c·∫•p:",
                value=f"{exp_amount:,} EXP Rare",
                inline=True
            )
            
            success_embed.add_field(
                name="üí¨ Ghi ch√∫:",
                value=message.content[:100] + "..." if len(message.content) > 100 else message.content or "Kh√¥ng c√≥ ghi ch√∫",
                inline=False
            )
            
            success_embed.set_footer(text="Kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c th√¥ng b√°o!")
            
            await message.reply(embed=success_embed)
            
            # Th√¥ng b√°o cho kh√°ch h√†ng
            await self.notify_customer_completion(order_id, order_data, message.author)
            
            logger.info(f"ƒê∆°n h√†ng {order_id} ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh b·ªüi {message.author.display_name} ({message.author.id})")
            return True
            
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω admin reply: {e}")
            await message.reply("‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ƒë∆°n h√†ng!")
            return True
    
    async def notify_customer_completion(self, order_id, order_data, admin):
        """Th√¥ng b√°o cho kh√°ch h√†ng khi ƒë∆°n h√†ng ho√†n th√†nh"""
        try:
            user = self.bot.get_user(order_data["user_id"])
            if not user:
                return
            
            completion_embed = discord.Embed(
                title="üéâ ƒê∆°n h√†ng ho√†n th√†nh!",
                description=f"ƒê∆°n h√†ng `{order_id}` c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            completion_embed.add_field(
                name="üì¶ S·∫£n ph·∫©m:",
                value=order_data["package_name"],
                inline=True
            )
            
            completion_embed.add_field(
                name="‚≠ê EXP nh·∫≠n ƒë∆∞·ª£c:",
                value=f"**{order_data['exp_amount']:,} EXP Rare**",
                inline=True
            )
            
            completion_embed.add_field(
                name="üë®‚Äçüíº X·ª≠ l√Ω b·ªüi:",
                value=f"{admin.display_name}",
                inline=True
            )
            
            completion_embed.add_field(
                name="üïê Th·ªùi gian ho√†n th√†nh:",
                value=f"<t:{int(datetime.now().timestamp())}:F>",
                inline=False
            )
            
            completion_embed.set_footer(text="C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!")
            
            await user.send(embed=completion_embed)
            logger.info(f"ƒê√£ th√¥ng b√°o ho√†n th√†nh ƒë∆°n h√†ng {order_id} cho user {order_data['user_id']}")
            
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ th√¥ng b√°o ho√†n th√†nh cho user {order_data['user_id']}: {e}")
    
    async def give_exp_command(self, ctx, user: discord.Member, amount: int):
        """Trao EXP Rare cho user - Admin only"""
        if not self.bot_instance.is_admin(ctx.author.id):
            await ctx.reply("‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ trao EXP!", mention_author=True)
            return
        
        if amount <= 0:
            await ctx.reply("‚ùå S·ªë EXP ph·∫£i l·ªõn h∆°n 0!", mention_author=True)
            return
        
        # Trao EXP cho user
        self.add_user_exp(user.id, amount)
        
        # T·∫°o embed th√¥ng b√°o
        embed = discord.Embed(
            title="‚úÖ ƒê√£ trao EXP Rare th√†nh c√¥ng",
            description=f"ƒê√£ trao {amount:,} EXP Rare cho {user.mention}",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üë§ Ng∆∞·ªùi nh·∫≠n:",
            value=f"{user.mention} ({user.display_name})",
            inline=True
        )
        
        embed.add_field(
            name="‚≠ê EXP ƒë∆∞·ª£c trao:",
            value=f"{amount:,} EXP Rare",
            inline=True
        )
        
        embed.add_field(
            name="üíé T·ªïng EXP hi·ªán c√≥:",
            value=f"{self.get_user_exp(user.id):,} EXP Rare",
            inline=True
        )
        
        embed.add_field(
            name="üë®‚Äçüíº ƒê∆∞·ª£c trao b·ªüi:",
            value=ctx.author.mention,
            inline=False
        )
        
        embed.set_footer(
            text="Shop System ‚Ä¢ Manual EXP Grant",
            icon_url=ctx.author.display_avatar.url
        )
        
        await ctx.reply(embed=embed, mention_author=True)
        logger.info(f"Admin {ctx.author.id} ƒë√£ trao {amount} EXP Rare cho user {user.id}")
        
        # G·ª≠i DM cho user ƒë∆∞·ª£c trao
        try:
            dm_embed = discord.Embed(
                title="üéÅ B·∫°n nh·∫≠n ƒë∆∞·ª£c EXP Rare!",
                description=f"Admin ƒë√£ trao cho b·∫°n {amount:,} EXP Rare",
                color=discord.Color.gold(),
                timestamp=datetime.now()
            )
            
            dm_embed.add_field(
                name="‚≠ê EXP nh·∫≠n ƒë∆∞·ª£c:",
                value=f"{amount:,} EXP Rare",
                inline=True
            )
            
            dm_embed.add_field(
                name="üíé T·ªïng EXP hi·ªán c√≥:",
                value=f"{self.get_user_exp(user.id):,} EXP Rare",
                inline=True
            )
            
            dm_embed.add_field(
                name="üë®‚Äçüíº ƒê∆∞·ª£c trao b·ªüi:",
                value=f"Admin {ctx.author.display_name}",
                inline=False
            )
            dm_embed.set_footer(text="C·∫£m ∆°n b·∫°n ƒë√£ tham gia!")
            
            await user.send(embed=dm_embed)
            
        except Exception as e:
            logger.warning(f"Kh√¥ng th·ªÉ g·ª≠i DM cho user {user.id}: {e}")
    
    async def set_shop_channel(self, ctx, channel=None):
        """C·∫•u h√¨nh k√™nh shop ch√≠nh th·ª©c"""
        try:
            if channel is None:
                # N·∫øu kh√¥ng c√≥ channel, s·ª≠ d·ª•ng k√™nh hi·ªán t·∫°i
                channel = ctx.channel
            
            # L∆∞u channel ID v√†o config
            self.shop_config["shop_channel_id"] = channel.id
            self.save_shop_config()
            
            # T·∫°o embed th√¥ng b√°o th√†nh c√¥ng
            embed = discord.Embed(
                title="‚úÖ ƒê√£ c·∫•u h√¨nh k√™nh shop th√†nh c√¥ng",
                description=f"K√™nh {channel.mention} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l√†m k√™nh shop ch√≠nh th·ª©c",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üè™ K√™nh shop:",
                value=f"{channel.mention} (`{channel.name}`)",
                inline=True
            )
            
            embed.add_field(
                name="üÜî Channel ID:",
                value=f"`{channel.id}`",
                inline=True
            )
            
            embed.add_field(
                name="üë®‚Äçüíº ƒê∆∞·ª£c c·∫•u h√¨nh b·ªüi:",
                value=ctx.author.mention,
                inline=True
            )
            
            embed.add_field(
                name="üìã L∆∞u √Ω:",
                value=(
                    "‚Ä¢ User ch·ªâ c√≥ th·ªÉ mua h√†ng trong k√™nh n√†y\n"
                    "‚Ä¢ L·ªánh `;shop` v√† `;buy` ch·ªâ ho·∫°t ƒë·ªông ·ªü ƒë√¢y\n"
                    "‚Ä¢ C√≥ th·ªÉ thay ƒë·ªïi b·∫±ng `;setshop #k√™nh-kh√°c`"
                ),
                inline=False
            )
            
            embed.set_footer(
                text="Shop System ‚Ä¢ Channel Configuration",
                icon_url=ctx.author.display_avatar.url
            )
            
            await ctx.reply(embed=embed, mention_author=True)
            logger.info(f"Admin {ctx.author.id} ƒë√£ c·∫•u h√¨nh k√™nh shop: {channel.name} ({channel.id})")
            
        except Exception as e:
            logger.error(f"L·ªói khi c·∫•u h√¨nh k√™nh shop: {e}")
            await ctx.reply(f"‚ùå C√≥ l·ªói x·∫£y ra khi c·∫•u h√¨nh k√™nh shop: {str(e)}", mention_author=True)
    
    async def show_shop_config(self, ctx):
        """Hi·ªÉn th·ªã c·∫•u h√¨nh shop hi·ªán t·∫°i"""
        try:
            embed = discord.Embed(
                title="‚öôÔ∏è C·∫•u h√¨nh Shop System",
                description="Th√¥ng tin c·∫•u h√¨nh hi·ªán t·∫°i c·ªßa h·ªá th·ªëng shop",
                color=discord.Color.blue(),
                timestamp=datetime.now()
            )
            
            # K√™nh shop
            shop_channel_id = self.shop_config.get("shop_channel_id")
            if shop_channel_id:
                shop_channel = ctx.guild.get_channel(shop_channel_id)
                if shop_channel:
                    embed.add_field(
                        name="üè™ K√™nh shop ch√≠nh th·ª©c:",
                        value=f"{shop_channel.mention} (`{shop_channel.name}`)",
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="üè™ K√™nh shop ch√≠nh th·ª©c:",
                        value=f"‚ö†Ô∏è K√™nh kh√¥ng t·ªìn t·∫°i (ID: `{shop_channel_id}`)",
                        inline=False
                    )
            else:
                embed.add_field(
                    name="üè™ K√™nh shop ch√≠nh th·ª©c:",
                    value="‚ùå Ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh\nüí° S·ª≠ d·ª•ng `;setshop #k√™nh` ƒë·ªÉ c·∫•u h√¨nh",
                    inline=False
                )
            
            # Role ƒë∆∞·ª£c ph√©p truy c·∫≠p order
            allowed_roles = self.shop_config.get("allowed_roles", [])
            if allowed_roles:
                role_list = []
                for role_id in allowed_roles[:5]:  # Ch·ªâ hi·ªÉn th·ªã 5 role ƒë·∫ßu
                    role = ctx.guild.get_role(role_id)
                    if role:
                        role_list.append(f"‚Ä¢ {role.mention}")
                    else:
                        role_list.append(f"‚Ä¢ ‚ö†Ô∏è Role kh√¥ng t·ªìn t·∫°i (ID: `{role_id}`)")
                
                if len(allowed_roles) > 5:
                    role_list.append(f"‚Ä¢ ... v√† {len(allowed_roles) - 5} role kh√°c")
                
                embed.add_field(
                    name="üé≠ Role truy c·∫≠p k√™nh order:",
                    value="\n".join(role_list) if role_list else "Kh√¥ng c√≥ role n√†o",
                    inline=False
                )
            else:
                embed.add_field(
                    name="üé≠ Role truy c·∫≠p k√™nh order:",
                    value="‚ùå Ch∆∞a c√≥ role n√†o\nüí° S·ª≠ d·ª•ng `;role add @Role` ƒë·ªÉ th√™m",
                    inline=False
                )
            
            # Order handlers
            order_handlers = self.shop_config.get("order_handlers", [])
            if order_handlers:
                handler_list = []
                for handler_id in order_handlers[:3]:  # Ch·ªâ hi·ªÉn th·ªã 3 handler ƒë·∫ßu
                    user = ctx.guild.get_member(handler_id)
                    if user:
                        handler_list.append(f"‚Ä¢ {user.mention}")
                    else:
                        handler_list.append(f"‚Ä¢ ‚ö†Ô∏è User kh√¥ng trong server (ID: `{handler_id}`)")
                
                if len(order_handlers) > 3:
                    handler_list.append(f"‚Ä¢ ... v√† {len(order_handlers) - 3} handler kh√°c")
                
                embed.add_field(
                    name="üë• Order handlers:",
                    value="\n".join(handler_list) if handler_list else "Kh√¥ng c√≥ handler n√†o",
                    inline=False
                )
            else:
                embed.add_field(
                    name="üë• Order handlers:",
                    value="‚ùå Ch∆∞a c√≥ handler n√†o\nüí° S·ª≠ d·ª•ng `;shop add <user_id>` ƒë·ªÉ th√™m",
                    inline=False
                )
            
            # Th·ªëng k√™
            total_orders = len(self.orders_data)
            embed.add_field(
                name="üìä Th·ªëng k√™:",
                value=f"‚Ä¢ T·ªïng ƒë∆°n h√†ng: **{total_orders}**\n‚Ä¢ File config: `{self.shop_config_file}`",
                inline=False
            )
            
            embed.add_field(
                name="üîß L·ªánh qu·∫£n l√Ω:",
                value=(
                    "‚Ä¢ `;setshop #k√™nh` - C·∫•u h√¨nh k√™nh shop\n"
                    "‚Ä¢ `;role add @Role` - Th√™m role truy c·∫≠p\n"
                    "‚Ä¢ `;shop add <user_id>` - Th√™m order handler\n"
                    "‚Ä¢ `;checkshoppermissions` - Ki·ªÉm tra quy·ªÅn bot"
                ),
                inline=False
            )
            
            embed.set_footer(
                text="Shop System Configuration",
                icon_url=ctx.author.display_avatar.url
            )
            
            await ctx.reply(embed=embed, mention_author=True)
            
        except Exception as e:
            logger.error(f"L·ªói khi hi·ªÉn th·ªã config shop: {e}")
            await ctx.reply(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}", mention_author=True)
