"""
Game Modals - Modal popup forms cho t·∫•t c·∫£ games
Cho ph√©p ng∆∞·ªùi ch∆°i nh·∫≠p s·ªë ti·ªÅn qua textbox thay v√¨ command
"""
import discord
from discord import ui
from utils.shared_wallet import shared_wallet
import logging

logger = logging.getLogger(__name__)

class RPSBetModal(ui.Modal, title='üéÆ Rock Paper Scissors - ƒê·∫∑t C∆∞·ª£c'):
    """Modal ƒë·ªÉ nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c cho RPS game"""
    
    bet_amount = ui.TextInput(
        label='S·ªë ti·ªÅn c∆∞·ª£c',
        placeholder='Nh·∫≠p s·ªë ti·ªÅn mu·ªën c∆∞·ª£c (10-10000 xu)',
        required=True,
        min_length=2,
        max_length=5,
        style=discord.TextStyle.short
    )
    
    def __init__(self, rps_commands):
        super().__init__()
        self.rps_commands = rps_commands
    
    async def on_submit(self, interaction: discord.Interaction):
        """X·ª≠ l√Ω khi user submit modal"""
        try:
            # Validate s·ªë ti·ªÅn
            try:
                bet_amount_int = int(self.bet_amount.value)
            except ValueError:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë nguy√™n.",
                    ephemeral=True
                )
                return
            
            if bet_amount_int < 10:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn t·ªëi thi·ªÉu l√† **10 xu**!",
                    ephemeral=True
                )
                return
            
            if bet_amount_int > 10000:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn t·ªëi ƒëa l√† **10,000 xu**!",
                    ephemeral=True
                )
                return
            
            # Ki·ªÉm tra s·ªë d∆∞
            if not shared_wallet.has_sufficient_balance(interaction.user.id, bet_amount_int):
                current_balance = shared_wallet.get_balance(interaction.user.id)
                await interaction.response.send_message(
                    f"‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! S·ªë d∆∞ hi·ªán t·∫°i: **{current_balance:,} xu**",
                    ephemeral=True
                )
                return
            
            # Hi·ªÉn th·ªã buttons ƒë·ªÉ ch·ªçn k√©o/b√∫a/bao
            embed = discord.Embed(
                title="‚úÇÔ∏è Rock Paper Scissors",
                description=f"B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c **{bet_amount_int:,} xu**\n\nCh·ªçn l·ª±a ch·ªçn c·ªßa b·∫°n:",
                color=discord.Color.orange(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.set_author(
                name=interaction.user.display_name,
                icon_url=interaction.user.avatar.url if interaction.user.avatar else None
            )
            
            embed.set_footer(text="Nh·∫•n button ƒë·ªÉ ch·ªçn!")
            
            # Create RPS choice view
            view = RPSChoiceView(self.rps_commands, interaction.user.id, bet_amount_int)
            
            await interaction.response.send_message(embed=embed, view=view)
            
        except Exception as e:
            logger.error(f"L·ªói trong RPS modal: {e}")
            await interaction.response.send_message(
                "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω!",
                ephemeral=True
            )

class SlotBetModal(ui.Modal, title='üé∞ Slot Machine - ƒê·∫∑t C∆∞·ª£c'):
    """Modal ƒë·ªÉ nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c cho Slot game"""
    
    bet_amount = ui.TextInput(
        label='S·ªë ti·ªÅn c∆∞·ª£c',
        placeholder='Nh·∫≠p s·ªë ti·ªÅn mu·ªën c∆∞·ª£c (10-10000 xu)',
        required=True,
        min_length=2,
        max_length=5,
        style=discord.TextStyle.short
    )
    
    def __init__(self, slot_commands):
        super().__init__()
        self.slot_commands = slot_commands
    
    async def on_submit(self, interaction: discord.Interaction):
        """X·ª≠ l√Ω khi user submit modal"""
        try:
            # Validate s·ªë ti·ªÅn
            try:
                bet_amount_int = int(self.bet_amount.value)
            except ValueError:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë nguy√™n.",
                    ephemeral=True
                )
                return
            
            if bet_amount_int < 10:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn t·ªëi thi·ªÉu l√† **10 xu**!",
                    ephemeral=True
                )
                return
            
            if bet_amount_int > 10000:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn t·ªëi ƒëa l√† **10,000 xu**!",
                    ephemeral=True
                )
                return
            
            # Ki·ªÉm tra s·ªë d∆∞
            if not shared_wallet.has_sufficient_balance(interaction.user.id, bet_amount_int):
                current_balance = shared_wallet.get_balance(interaction.user.id)
                await interaction.response.send_message(
                    f"‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! S·ªë d√∫ hi·ªán t·∫°i: **{current_balance:,} xu**",
                    ephemeral=True
                )
                return
            
            # Slot Machine - x·ª≠ l√Ω v·ªõi animation
            import random
            import asyncio
            from datetime import datetime
            
            # Defer response
            await interaction.response.defer()
            
            # Slot symbols
            symbols = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', 'üíé']
            symbol_multipliers = {
                'üçí': 2,    # Cherry
                'üçã': 3,    # Lemon  
                'üçä': 4,    # Orange
                'üçá': 5,    # Grape
                'üîî': 10,   # Bell
                'üíé': 50    # Diamond (Jackpot symbol)
            }
            
            # Animation quay slot
            loading_embed = discord.Embed(
                title="üé∞ Slot Machine",
                description="‚ö° **ƒêang quay...** ‚ö°",
                color=discord.Color.purple()
            )
            loading_msg = await interaction.followup.send(embed=loading_embed)
            
            # Animation: Hi·ªÉn th·ªã icon ng·∫´u nhi√™n 8 l·∫ßn
            for i in range(8):
                random_reels = [random.choice(symbols) for _ in range(3)]
                
                anim_embed = discord.Embed(
                    title="üé∞ Slot Machine - ƒêang quay...",
                    description=f"**{random_reels[0]} {random_reels[1]} {random_reels[2]}**",
                    color=discord.Color.gold()
                )
                anim_embed.add_field(
                    name="üí∞ Ti·ªÅn c∆∞·ª£c",
                    value=f"**{bet_amount_int:,} xu**",
                    inline=False
                )
                await loading_msg.edit(embed=anim_embed)
                await asyncio.sleep(0.3)
            
            # Quay k·∫øt qu·∫£ cu·ªëi c√πng
            reel1 = random.choice(symbols)
            reel2 = random.choice(symbols)
            reel3 = random.choice(symbols)
            
            # Check win condition
            won = False
            winnings = 0
            multiplier = 0
            
            if reel1 == reel2 == reel3:
                multiplier = symbol_multipliers[reel1]
                if reel1 == 'üíé':
                    multiplier = 100  # JACKPOT!
                winnings = bet_amount_int * multiplier
                won = True
            
            # Update wallet
            if won:
                new_balance = shared_wallet.add_balance(interaction.user.id, winnings - bet_amount_int)
            else:
                new_balance = shared_wallet.subtract_balance(interaction.user.id, bet_amount_int)
            
            # Update stats
            user_data = self.slot_commands.get_user_data(interaction.user.id)
            
            # ƒê·∫£m b·∫£o user_data c√≥ ƒë·∫ßy ƒë·ªß keys
            if 'total_spins' not in user_data:
                user_data['total_spins'] = 0
            if 'total_bet' not in user_data:
                user_data['total_bet'] = 0
            if 'wins' not in user_data:
                user_data['wins'] = 0
            if 'losses' not in user_data:
                user_data['losses'] = 0
            if 'total_won' not in user_data:
                user_data['total_won'] = 0
            if 'jackpots' not in user_data:
                user_data['jackpots'] = 0
            if 'biggest_win' not in user_data:
                user_data['biggest_win'] = 0
            
            user_data['total_spins'] += 1
            user_data['total_bet'] += bet_amount_int
            
            if won:
                user_data['wins'] += 1
                user_data['total_won'] += winnings
                if reel1 == 'üíé':
                    user_data['jackpots'] += 1
                if winnings > user_data['biggest_win']:
                    user_data['biggest_win'] = winnings
            else:
                user_data['losses'] += 1
            
            self.slot_commands.save_slot_data()
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi trong 2 gi√¢y
            final_anim_embed = discord.Embed(
                title="üé∞ Slot Machine - K·∫øt qu·∫£!",
                description=f"‚ú® **{reel1} {reel2} {reel3}** ‚ú®",
                color=discord.Color.purple()
            )
            await loading_msg.edit(embed=final_anim_embed)
            await asyncio.sleep(2)
            
            # X√≥a animation
            try:
                await loading_msg.delete()
            except Exception as del_error:
                logger.warning(f"Kh√¥ng th·ªÉ x√≥a animation message: {del_error}")
            
            # Create result embed
            logger.info(f"Slot result: {reel1} {reel2} {reel3} - Won: {won}, Winnings: {winnings}")
            
            if won:
                color = discord.Color.gold() if reel1 == 'üíé' else discord.Color.green()
                if reel1 == 'üíé':
                    result_text = f"üíé **JACKPOT! TH·∫ÆNG {winnings:,} xu!** üíé"
                else:
                    result_text = f"üéâ **TH·∫ÆNG {winnings:,} xu!**"
            else:
                color = discord.Color.red()
                result_text = f"üò¢ **THUA {bet_amount_int:,} xu!**"
            
            embed = discord.Embed(
                title="üé∞ Slot Machine - K·∫øt qu·∫£",
                description=result_text,
                color=color,
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üé∞ K·∫øt qu·∫£ quay",
                value=f"**{reel1} {reel2} {reel3}**",
                inline=False
            )
            
            if won:
                embed.add_field(
                    name="‚ú® Multiplier",
                    value=f"**x{multiplier}**",
                    inline=True
                )
            
            embed.add_field(
                name="üí∞ Ti·ªÅn c∆∞·ª£c",
                value=f"**{bet_amount_int:,} xu**",
                inline=True
            )
            
            if won:
                embed.add_field(
                    name="üéÅ Ti·ªÅn th·∫Øng",
                    value=f"**+{winnings - bet_amount_int:,} xu**",
                    inline=True
                )
            else:
                embed.add_field(
                    name="üí∏ Ti·ªÅn thua",
                    value=f"**-{bet_amount_int:,} xu**",
                    inline=True
                )
            
            embed.add_field(
                name="üí≥ S·ªë d∆∞ m·ªõi",
                value=f"**{new_balance:,} xu**",
                inline=False
            )
            
            embed.set_author(
                name=interaction.user.display_name,
                icon_url=interaction.user.avatar.url if interaction.user.avatar else None
            )
            
            embed.set_footer(text="Ch∆°i l·∫°i b·∫±ng ;game!")
            
            logger.info(f"Sending slot result embed to user {interaction.user.id}")
            await interaction.followup.send(embed=embed)
            logger.info(f"Slot result sent successfully")
            
        except Exception as e:
            logger.error(f"L·ªói trong Slot modal: {e}")
            import traceback
            traceback.print_exc()
            try:
                await interaction.followup.send(
                    "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω!",
                    ephemeral=True
                )
            except:
                pass

class BlackjackBetModal(ui.Modal, title='üÉè Blackjack - ƒê·∫∑t C∆∞·ª£c'):
    """Modal ƒë·ªÉ nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c cho Blackjack game"""
    
    bet_amount = ui.TextInput(
        label='S·ªë ti·ªÅn c∆∞·ª£c',
        placeholder='Nh·∫≠p s·ªë ti·ªÅn mu·ªën c∆∞·ª£c (10-10000 xu)',
        required=True,
        min_length=2,
        max_length=5,
        style=discord.TextStyle.short
    )
    
    def __init__(self, blackjack_commands):
        super().__init__()
        self.blackjack_commands = blackjack_commands
    
    async def on_submit(self, interaction: discord.Interaction):
        """X·ª≠ l√Ω khi user submit modal"""
        try:
            # Validate s·ªë ti·ªÅn
            try:
                bet_amount_int = int(self.bet_amount.value)
            except ValueError:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë nguy√™n.",
                    ephemeral=True
                )
                return
            
            if bet_amount_int < 10:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn t·ªëi thi·ªÉu l√† **10 xu**!",
                    ephemeral=True
                )
                return
            
            if bet_amount_int > 10000:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn t·ªëi ƒëa l√† **10,000 xu**!",
                    ephemeral=True
                )
                return
            
            # Ki·ªÉm tra s·ªë d∆∞
            if not shared_wallet.has_sufficient_balance(interaction.user.id, bet_amount_int):
                current_balance = shared_wallet.get_balance(interaction.user.id)
                await interaction.response.send_message(
                    f"‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! S·ªë d∆∞ hi·ªán t·∫°i: **{current_balance:,} xu**",
                    ephemeral=True
                )
                return
            
            # Start Blackjack - g·ªçi command v·ªõi s·ªë ti·ªÅn ƒë√£ nh·∫≠p
            # T·∫°o fake message context
            await interaction.response.defer()
            
            # G·ªçi command blackjack v·ªõi s·ªë ti·ªÅn
            ctx = await interaction.client.get_context(interaction.message) if hasattr(interaction, 'message') else None
            
            # Fallback: Th√¥ng b√°o d√πng l·ªánh
            embed = discord.Embed(
                title="üÉè Blackjack",
                description=f"B·∫°n ƒë√£ ch·ªçn **{bet_amount_int:,} xu**",
                color=discord.Color.blue()
            )
            
            embed.add_field(
                name="‚ÑπÔ∏è H∆∞·ªõng d·∫´n",
                value=(
                    f"S·ª≠ d·ª•ng l·ªánh sau ƒë·ªÉ ch∆°i:\n"
                    f"**; {bet_amount_int}`**\n\n"
                    f"Ho·∫∑c: **; {bet_amount_int}`**"
                ),
                inline=False
            )
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            logger.error(f"L·ªói trong Blackjack modal: {e}")
            await interaction.response.send_message(
                "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω!",
                ephemeral=True
            )

class FlipCoinBetModal(ui.Modal, title='ü™ô Flip Coin - ƒê·∫∑t C∆∞·ª£c'):
    """Modal ƒë·ªÉ nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c cho Flip Coin game"""
    
    bet_amount = ui.TextInput(
        label='S·ªë ti·ªÅn c∆∞·ª£c',
        placeholder='Nh·∫≠p s·ªë ti·ªÅn mu·ªën c∆∞·ª£c (10-10000 xu)',
        required=True,
        min_length=2,
        max_length=5,
        style=discord.TextStyle.short
    )
    
    def __init__(self, flip_commands):
        super().__init__()
        self.flip_commands = flip_commands
    
    async def on_submit(self, interaction: discord.Interaction):
        """X·ª≠ l√Ω khi user submit modal"""
        try:
            # Validate s·ªë ti·ªÅn
            try:
                bet_amount_int = int(self.bet_amount.value)
            except ValueError:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë nguy√™n.",
                    ephemeral=True
                )
                return
            
            if bet_amount_int < 10:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn t·ªëi thi·ªÉu l√† **10 xu**!",
                    ephemeral=True
                )
                return
            
            if bet_amount_int > 10000:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn t·ªëi ƒëa l√† **10,000 xu**!",
                    ephemeral=True
                )
                return
            
            # Ki·ªÉm tra s·ªë d∆∞
            if not shared_wallet.has_sufficient_balance(interaction.user.id, bet_amount_int):
                current_balance = shared_wallet.get_balance(interaction.user.id)
                await interaction.response.send_message(
                    f"‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! S·ªë d∆∞ hi·ªán t·∫°i: **{current_balance:,} xu**",
                    ephemeral=True
                )
                return
            
            # Show heads/tails choice buttons
            embed = discord.Embed(
                title="ü™ô Flip Coin - Ch·ªçn m·∫∑t ƒë·ªìng xu",
                description=f"B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c **{bet_amount_int:,} xu**\n\nCh·ªçn m·∫∑t ƒë·ªìng xu:",
                color=discord.Color.blue(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(
                name="üë§ Heads",
                value="M·∫∑t ng·ª≠a",
                inline=True
            )
            
            embed.add_field(
                name="üî∞ Tails",
                value="M·∫∑t s·∫•p",
                inline=True
            )
            
            embed.set_author(
                name=interaction.user.display_name,
                icon_url=interaction.user.avatar.url if interaction.user.avatar else None
            )
            
            embed.set_footer(text="Nh·∫•n button ƒë·ªÉ ch·ªçn!")
            
            # Flip Coin ƒë√£ c√≥ button system - d√πng lu√¥n
            from .flip_coin_commands import FlipCoinView
            view = FlipCoinView(self.flip_commands, interaction.user.id, bet_amount_int)
            
            await interaction.response.send_message(embed=embed, view=view)
            
        except Exception as e:
            logger.error(f"L·ªói trong Flip Coin modal: {e}")
            await interaction.response.send_message(
                "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω!",
                ephemeral=True
            )

class TaiXiuBetModal(ui.Modal, title='üé≤ T√†i X·ªâu - ƒê·∫∑t C∆∞·ª£c'):
    """Modal ƒë·ªÉ nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c cho T√†i X·ªâu game"""
    
    bet_amount = ui.TextInput(
        label='S·ªë ti·ªÅn c∆∞·ª£c',
        placeholder='Nh·∫≠p s·ªë ti·ªÅn mu·ªën c∆∞·ª£c (100-10000 xu)',
        required=True,
        min_length=3,
        max_length=5,
        style=discord.TextStyle.short
    )
    
    def __init__(self, taixiu_commands):
        super().__init__()
        self.taixiu_commands = taixiu_commands
    
    async def on_submit(self, interaction: discord.Interaction):
        """X·ª≠ l√Ω khi user submit modal"""
        try:
            # Validate s·ªë ti·ªÅn
            try:
                bet_amount_int = int(self.bet_amount.value)
            except ValueError:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë nguy√™n.",
                    ephemeral=True
                )
                return
            
            if bet_amount_int < 100:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn t·ªëi thi·ªÉu l√† **100 xu**!",
                    ephemeral=True
                )
                return
            
            if bet_amount_int > 10000:
                await interaction.response.send_message(
                    "‚ùå S·ªë ti·ªÅn t·ªëi ƒëa l√† **10,000 xu**!",
                    ephemeral=True
                )
                return
            
            # Ki·ªÉm tra s·ªë d∆∞
            current_balance = shared_wallet.get_balance(interaction.user.id)
            if not shared_wallet.has_sufficient_balance(interaction.user.id, bet_amount_int):
                await interaction.response.send_message(
                    f"‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! S·ªë d∆∞ hi·ªán t·∫°i: **{current_balance:,} xu**",
                    ephemeral=True
                )
                return
            
            # Show T√ÄI/X·ªàU choice buttons
            embed = discord.Embed(
                title="üé≤ T√†i X·ªâu - Ch·ªçn T√†i ho·∫∑c X·ªâu",
                description=f"B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c **{bet_amount_int:,} xu**\n\nCh·ªçn T√†i ho·∫∑c X·ªâu:",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(
                name="üìà T√ÄI",
                value="T·ªïng 11-17 ƒëi·ªÉm",
                inline=True
            )
            
            embed.add_field(
                name="üìâ X·ªàU",
                value="T·ªïng 4-10 ƒëi·ªÉm",
                inline=True
            )
            
            embed.set_author(
                name=interaction.user.display_name,
                icon_url=interaction.user.avatar.url if interaction.user.avatar else None
            )
            
            embed.set_footer(text="Nh·∫•n button ƒë·ªÉ ch·ªçn!")
            
            # Create choice buttons view
            view = TaiXiuChoiceView(self.taixiu_commands, interaction.user.id, bet_amount_int)
            
            await interaction.response.send_message(embed=embed, view=view)
            
        except Exception as e:
            logger.error(f"L·ªói trong T√†i X·ªâu modal: {e}")
            await interaction.response.send_message(
                "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω!",
                ephemeral=True
            )

class TaiXiuChoiceView(discord.ui.View):
    """View v·ªõi buttons cho T√†i X·ªâu choice"""
    
    def __init__(self, taixiu_commands, user_id, bet_amount):
        super().__init__(timeout=60)
        self.taixiu_commands = taixiu_commands
        self.user_id = user_id
        self.bet_amount = bet_amount
    
    @discord.ui.button(label='üìà T√ÄI', style=discord.ButtonStyle.success, custom_id='tai')
    async def tai_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Button ch·ªçn T√†i"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message(
                "‚ùå ƒê√¢y kh√¥ng ph·∫£i game c·ªßa b·∫°n!",
                ephemeral=True
            )
            return
        
        # Disable buttons
        for item in self.children:
            item.disabled = True
        
        # Play T√†i X·ªâu v·ªõi T√ÄI
        await self.play_taixiu(interaction, "T√ÄI")
    
    @discord.ui.button(label='üìâ X·ªàU', style=discord.ButtonStyle.danger, custom_id='xiu')
    async def xiu_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Button ch·ªçn X·ªâu"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message(
                "‚ùå ƒê√¢y kh√¥ng ph·∫£i game c·ªßa b·∫°n!",
                ephemeral=True
            )
            return
        
        # Disable buttons
        for item in self.children:
            item.disabled = True
        
        # Play T√†i X·ªâu v·ªõi X·ªàU
        await self.play_taixiu(interaction, "X·ªàU")
    
    async def play_taixiu(self, interaction: discord.Interaction, choice: str):
        """X·ª≠ l√Ω T√†i X·ªâu game"""
        try:
            import random
            import asyncio
            from datetime import datetime
            
            # Defer response ƒë·ªÉ c√≥ th·ªùi gian x·ª≠ l√Ω
            await interaction.response.defer()
            
            # Animation v·ªõi s·ªë ng·∫´u nhi√™n ƒë·ªïi li√™n t·ª•c
            loading_embed = discord.Embed(
                title="üé≤ T√†i X·ªâu - ƒêang quay...",
                description="‚ö° **ƒêang quay x√∫c x·∫Øc...** ‚ö°",
                color=discord.Color.blue()
            )
            loading_msg = await interaction.followup.send(embed=loading_embed)
            
            # Animation: Hi·ªÉn th·ªã s·ªë ng·∫´u nhi√™n thay ƒë·ªïi 10 l·∫ßn
            for i in range(10):
                random_nums = [random.randint(1, 6) for _ in range(3)]
                random_total = sum(random_nums)
                
                anim_embed = discord.Embed(
                    title="üé≤ T√†i X·ªâu - ƒêang quay...",
                    description=f"üé≤ **{random_nums[0]}** üé≤ **{random_nums[1]}** üé≤ **{random_nums[2]}**\n\nüí´ T·ªïng: **{random_total}** üí´",
                    color=discord.Color.gold()
                )
                await loading_msg.edit(embed=anim_embed)
                await asyncio.sleep(0.3)  # Delay 0.3s gi·ªØa m·ªói l·∫ßn ƒë·ªïi
            
            # Quay k·∫øt qu·∫£ cu·ªëi c√πng
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            dice3 = random.randint(1, 6)
            total = dice1 + dice2 + dice3
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi trong 2 gi√¢y
            final_anim_embed = discord.Embed(
                title="üé≤ T√†i X·ªâu - K·∫øt qu·∫£!",
                description=f"üé≤ **{dice1}** üé≤ **{dice2}** üé≤ **{dice3}**\n\n‚ú® T·ªïng: **{total}** ‚ú®",
                color=discord.Color.purple()
            )
            await loading_msg.edit(embed=final_anim_embed)
            await asyncio.sleep(2)
            
            # X√≥a animation message
            try:
                await loading_msg.delete()
            except:
                pass
            
            # X√°c ƒë·ªãnh T√ÄI ho·∫∑c X·ªàU
            result = "T√ÄI" if total >= 11 else "X·ªàU"
            won = (choice == result)
            
            # C·∫≠p nh·∫≠t ti·ªÅn
            if won:
                new_balance = shared_wallet.add_balance(self.user_id, self.bet_amount)
                money_change = self.bet_amount
            else:
                new_balance = shared_wallet.subtract_balance(self.user_id, self.bet_amount)
                money_change = -self.bet_amount
            
            # Update stats
            self.taixiu_commands._ensure_player_data(self.user_id)
            self.taixiu_commands.update_player_money(self.user_id, money_change, won, self.bet_amount)
            
            # Create result embed
            if won:
                color = discord.Color.green()
                result_text = f"üéâ **B·∫†N TH·∫ÆNG {self.bet_amount * 2:,} xu!**"
            else:
                color = discord.Color.red()
                result_text = f"üò¢ **B·∫†N THUA {self.bet_amount:,} xu!**"
            
            embed = discord.Embed(
                title="üé≤ T√†i X·ªâu - K·∫øt qu·∫£",
                description=result_text,
                color=color,
                timestamp=datetime.now()
            )
            
            # Dice emojis
            dice_emoji = {1: "‚öÄ", 2: "‚öÅ", 3: "‚öÇ", 4: "‚öÉ", 5: "‚öÑ", 6: "‚öÖ"}
            
            embed.add_field(
                name="üé≤ K·∫øt qu·∫£ x√∫c x·∫Øc",
                value=f"{dice_emoji[dice1]} {dice_emoji[dice2]} {dice_emoji[dice3]}\n**T·ªïng: {total} ƒëi·ªÉm**",
                inline=False
            )
            
            embed.add_field(
                name="üéØ B·∫°n ch·ªçn",
                value=f"**{choice}**",
                inline=True
            )
            
            embed.add_field(
                name="üé≤ K·∫øt qu·∫£",
                value=f"**{result}** ({total} ƒëi·ªÉm)",
                inline=True
            )
            
            embed.add_field(
                name="\u200b",
                value="\u200b",
                inline=True
            )
            
            embed.add_field(
                name="üí∞ Ti·ªÅn c∆∞·ª£c",
                value=f"**{self.bet_amount:,} xu**",
                inline=True
            )
            
            if won:
                embed.add_field(
                    name="üéÅ Ti·ªÅn th·∫Øng",
                    value=f"**+{self.bet_amount:,} xu**",
                    inline=True
                )
            else:
                embed.add_field(
                    name="üí∏ Ti·ªÅn thua",
                    value=f"**-{self.bet_amount:,} xu**",
                    inline=True
                )
            
            embed.add_field(
                name="\u200b",
                value="\u200b",
                inline=True
            )
            
            embed.add_field(
                name="üí≥ S·ªë d∆∞ m·ªõi",
                value=f"**{new_balance:,} xu**",
                inline=False
            )
            
            embed.set_footer(text="Ch∆°i l·∫°i b·∫±ng ;game!")
            
            # Edit message ban ƒë·∫ßu v·ªõi k·∫øt qu·∫£
            await interaction.edit_original_response(embed=embed, view=self)
            
        except Exception as e:
            logger.error(f"L·ªói trong T√†i X·ªâu game: {e}")
            try:
                await interaction.followup.send(
                    "‚ùå C√≥ l·ªói x·∫£y ra khi ch∆°i!",
                    ephemeral=True
                )
            except:
                pass
    
    async def on_timeout(self):
        """X·ª≠ l√Ω khi view timeout"""
        for item in self.children:
            item.disabled = True

# ==================== CHOICE VIEWS ====================

class RPSChoiceView(discord.ui.View):
    """View v·ªõi buttons cho RPS choice"""
    
    def __init__(self, rps_commands, user_id, bet_amount):
        super().__init__(timeout=60)
        self.rps_commands = rps_commands
        self.user_id = user_id
        self.bet_amount = bet_amount
    
    @discord.ui.button(label='‚úÇÔ∏è K√©o', style=discord.ButtonStyle.primary, custom_id='scissors')
    async def scissors_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Button ch·ªçn K√©o"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message(
                "‚ùå ƒê√¢y kh√¥ng ph·∫£i game c·ªßa b·∫°n!",
                ephemeral=True
            )
            return
        
        await self.play_rps(interaction, 'scissors')
    
    @discord.ui.button(label='üî® B√∫a', style=discord.ButtonStyle.danger, custom_id='rock')
    async def rock_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Button ch·ªçn B√∫a"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message(
                "‚ùå ƒê√¢y kh√¥ng ph·∫£i game c·ªßa b·∫°n!",
                ephemeral=True
            )
            return
        
        await self.play_rps(interaction, 'rock')
    
    @discord.ui.button(label='üìÑ Bao', style=discord.ButtonStyle.success, custom_id='paper')
    async def paper_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Button ch·ªçn Bao"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message(
                "‚ùå ƒê√¢y kh√¥ng ph·∫£i game c·ªßa b·∫°n!",
                ephemeral=True
            )
            return
        
        await self.play_rps(interaction, 'paper')
    
    async def play_rps(self, interaction: discord.Interaction, player_choice: str):
        """X·ª≠ l√Ω RPS game"""
        try:
            import random
            import asyncio
            from datetime import datetime
            
            # Disable buttons
            for item in self.children:
                item.disabled = True
            
            # Defer response
            await interaction.response.defer()
            
            # Animation
            choices = ['rock', 'paper', 'scissors']
            choice_emoji = {
                'rock': 'üî®',
                'paper': 'üìÑ',
                'scissors': '‚úÇÔ∏è'
            }
            
            loading_embed = discord.Embed(
                title="‚úÇÔ∏è K√©o B√∫a Bao",
                description="‚ö° **ƒêang ch·ªçn...** ‚ö°",
                color=discord.Color.blue()
            )
            loading_msg = await interaction.followup.send(embed=loading_embed)
            
            # Animation: Bot "suy nghƒ©" 6 l·∫ßn
            for i in range(6):
                random_choice = random.choice(choices)
                
                anim_embed = discord.Embed(
                    title="‚úÇÔ∏è K√©o B√∫a Bao - Bot ƒëang ch·ªçn...",
                    description=f"ü§ñ Bot: **{choice_emoji[random_choice]}**",
                    color=discord.Color.gold()
                )
                await loading_msg.edit(embed=anim_embed)
                await asyncio.sleep(0.25)
            
            # Bot ch·ªçn k·∫øt qu·∫£ cu·ªëi c√πng
            bot_choice = random.choice(choices)
            
            # Hi·ªÉn th·ªã l·ª±a ch·ªçn cu·ªëi 1.5 gi√¢y
            final_choice_embed = discord.Embed(
                title="‚úÇÔ∏è K√©o B√∫a Bao - ƒê√£ ch·ªçn!",
                description=f"ü§ñ Bot: **{choice_emoji[bot_choice]}**\nüë§ B·∫°n: **{choice_emoji[player_choice]}**",
                color=discord.Color.purple()
            )
            await loading_msg.edit(embed=final_choice_embed)
            await asyncio.sleep(1.5)
            
            # X√≥a animation
            try:
                await loading_msg.delete()
            except:
                pass
            
            # X√°c ƒë·ªãnh k·∫øt qu·∫£
            choice_map = {
                'rock': 'üî® B√∫a',
                'paper': 'üìÑ Bao',
                'scissors': '‚úÇÔ∏è K√©o'
            }
            
            win_conditions = {
                'rock': 'scissors',
                'paper': 'rock',
                'scissors': 'paper'
            }
            
            if player_choice == bot_choice:
                result = 'draw'
                color = discord.Color.blue()
                result_text = "ü§ù **H√íA!**"
                money_change = 0
            elif win_conditions[player_choice] == bot_choice:
                result = 'win'
                color = discord.Color.green()
                result_text = f"üéâ **B·∫†N TH·∫ÆNG {self.bet_amount * 2:,} xu!**"
                money_change = self.bet_amount
            else:
                result = 'loss'
                color = discord.Color.red()
                result_text = f"üò¢ **B·∫†N THUA {self.bet_amount:,} xu!**"
                money_change = -self.bet_amount
            
            # C·∫≠p nh·∫≠t ti·ªÅn v√† stats
            if money_change > 0:
                new_balance = shared_wallet.add_balance(self.user_id, money_change)
            elif money_change < 0:
                new_balance = shared_wallet.subtract_balance(self.user_id, abs(money_change))
            else:
                new_balance = shared_wallet.get_balance(self.user_id)
            
            # Update stats
            user_data = self.rps_commands.get_user_data(self.user_id)
            user_data['total_games'] += 1
            user_data['total_bet'] += self.bet_amount
            
            if result == 'win':
                user_data['wins'] += 1
                user_data['total_won'] += money_change
            elif result == 'loss':
                user_data['losses'] += 1
            else:
                user_data['draws'] += 1
            
            self.rps_commands.save_rps_data()
            
            # Create result embed
            embed = discord.Embed(
                title="‚úÇÔ∏è Rock Paper Scissors - K·∫øt qu·∫£",
                description=result_text,
                color=color,
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üéØ B·∫°n ch·ªçn",
                value=choice_map[player_choice],
                inline=True
            )
            
            embed.add_field(
                name="ü§ñ Bot ch·ªçn",
                value=choice_map[bot_choice],
                inline=True
            )
            
            embed.add_field(
                name="\u200b",
                value="\u200b",
                inline=True
            )
            
            embed.add_field(
                name="üí∞ Ti·ªÅn c∆∞·ª£c",
                value=f"**{self.bet_amount:,} xu**",
                inline=True
            )
            
            if result == 'win':
                embed.add_field(
                    name="üéÅ Ti·ªÅn th·∫Øng",
                    value=f"**+{money_change:,} xu**",
                    inline=True
                )
            elif result == 'loss':
                embed.add_field(
                    name="üí∏ Ti·ªÅn thua",
                    value=f"**{money_change:,} xu**",
                    inline=True
                )
            else:
                embed.add_field(
                    name="ü§ù H√≤a",
                    value="**0 xu**",
                    inline=True
                )
            
            embed.add_field(
                name="\u200b",
                value="\u200b",
                inline=True
            )
            
            embed.add_field(
                name="üí≥ S·ªë d∆∞ m·ªõi",
                value=f"**{new_balance:,} xu**",
                inline=False
            )
            
            embed.set_author(
                name=interaction.user.display_name,
                icon_url=interaction.user.avatar.url if interaction.user.avatar else None
            )
            
            embed.set_footer(text="Ch∆°i l·∫°i b·∫±ng ;game!")
            
            # G·ª≠i k·∫øt qu·∫£ m·ªõi
            await interaction.followup.send(embed=embed)
            
            # X√≥a tin nh·∫Øn ƒë·∫∑t c∆∞·ª£c ban ƒë·∫ßu
            try:
                await interaction.message.delete()
            except:
                pass
            
        except Exception as e:
            logger.error(f"L·ªói trong RPS game: {e}")
            await interaction.response.send_message(
                "‚ùå C√≥ l·ªói x·∫£y ra khi ch∆°i!",
                ephemeral=True
            )
    
    async def on_timeout(self):
        """X·ª≠ l√Ω khi view timeout"""
        for item in self.children:
            item.disabled = True
