"""
Announce/Broadcast commands
L·ªánh: ;thongbao [noi_dung]
- Admin d√πng ;thongbao + n·ªôi dung: DM t·ªõi c√°c th√†nh vi√™n ƒëang online trong server
- Member g√µ ;thongbao (kh√¥ng n·ªôi dung): Nh·∫≠n l·∫°i th√¥ng b√°o g·∫ßn nh·∫•t c·ªßa server
"""
import discord
from discord.ext import commands
import json
import os
import asyncio
from datetime import datetime
import logging

from .base import BaseCommand

logger = logging.getLogger(__name__)

class AnnounceCommands(BaseCommand):
    """Commands g·ª≠i th√¥ng b√°o h·ªá th·ªëng"""

    def __init__(self, bot_instance):
        super().__init__(bot_instance)
        # L∆∞u th√¥ng b√°o theo guild_id
        self.data_file = 'announcements.json'
        self._cache = self._load_data()

    def _load_data(self) -> dict:
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i announcements: {e}")
        return {}

    def _save_data(self):
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self._cache, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u announcements: {e}")

    def _set_latest_announcement(self, guild_id: int, content: str, author_id: int):
        self._cache[str(guild_id)] = {
            'content': content,
            'author_id': author_id,
            'timestamp': datetime.now().isoformat()
        }
        self._save_data()

    def _get_latest_announcement(self, guild_id: int):
        return self._cache.get(str(guild_id))

    def _build_announcement_embed(self, ctx, content: str) -> discord.Embed:
        embed = discord.Embed(
            title="üì¢ Th√¥ng b√°o t·ª´ Server",
            description=content,
            color=discord.Color.blurple(),
            timestamp=datetime.now()
        )
        embed.set_author(
            name=f"{ctx.guild.name}",
            icon_url=ctx.guild.icon.url if ctx.guild and ctx.guild.icon else discord.Embed.Empty
        )
        embed.add_field(name="Ng∆∞·ªùi g·ª≠i", value=f"<@{ctx.author.id}>", inline=True)
        return embed

    def register_commands(self):
        @self.bot.command(name='thongbao')
        async def thongbao(ctx, *, content: str = None):
            """
            - Admin: ;thongbao <n·ªôi dung> -> DM t·ªõi th√†nh vi√™n ƒëang online
            - User: ;thongbao -> Xem th√¥ng b√°o g·∫ßn nh·∫•t c·ªßa server
            """
            # S·ª≠ d·ª•ng lock ƒë·ªÉ tr√°nh duplicate execution
            lock = self.bot_instance.get_command_lock('thongbao', ctx.author.id)
            async with lock:
                try:
                    if ctx.guild is None:
                        await ctx.reply("‚ùå Vui l√≤ng s·ª≠ d·ª•ng l·ªánh trong server.", mention_author=True)
                        return

                    # N·∫øu kh√¥ng c√≥ n·ªôi dung -> tr·∫£ v·ªÅ th√¥ng b√°o g·∫ßn nh·∫•t
                    if not content:
                        latest = self._get_latest_announcement(ctx.guild.id)
                        if not latest:
                            await ctx.reply("‚ÑπÔ∏è Hi·ªán ch∆∞a c√≥ th√¥ng b√°o n√†o.", mention_author=True)
                            return

                        embed = discord.Embed(
                            title="üì¢ Th√¥ng b√°o g·∫ßn nh·∫•t",
                            description=latest['content'],
                            color=discord.Color.blurple(),
                        )
                        # Th·ªùi gian
                        try:
                            ts = int(datetime.fromisoformat(latest['timestamp']).timestamp())
                            embed.add_field(name="Th·ªùi gian", value=f"<t:{ts}:F>", inline=True)
                        except Exception:
                            pass
                        embed.add_field(name="Ng∆∞·ªùi g·ª≠i", value=f"<@{latest['author_id']}>", inline=True)
                        await ctx.reply(embed=embed, mention_author=True)
                        return

                    # C√≥ n·ªôi dung -> ki·ªÉm tra quy·ªÅn s·ª≠ d·ª•ng dynamic permission system
                    if hasattr(self.bot_instance, 'permission_manager'):
                        has_permission, user_level = self.bot_instance.permission_manager.check_command_permission(ctx, 'announce')
                        if not has_permission:
                            await ctx.reply("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn g·ª≠i th√¥ng b√°o.", mention_author=True)
                            return
                    else:
                        # Fallback: Ki·ªÉm tra quy·ªÅn admin n·∫øu kh√¥ng c√≥ permission system
                        if not self.bot_instance.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                            await ctx.reply("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn g·ª≠i th√¥ng b√°o.", mention_author=True)
                            return

                    # X√¢y d·ª±ng embed v√† l∆∞u
                    embed = self._build_announcement_embed(ctx, content)
                    self._set_latest_announcement(ctx.guild.id, content, ctx.author.id)

                    # Ch·ªçn th√†nh vi√™n ƒëang online (bao g·ªìm online/idle/dnd), b·ªè qua bot
                    def is_online(member: discord.Member) -> bool:
                        return (
                            not member.bot and
                            member.status in {discord.Status.online, discord.Status.idle, discord.Status.dnd}
                        )

                    members = [m for m in ctx.guild.members if is_online(m)]
                    if not members:
                        await ctx.reply("‚ö†Ô∏è Kh√¥ng c√≥ th√†nh vi√™n n√†o ƒëang online ƒë·ªÉ g·ª≠i DM.", mention_author=True)
                        return

                    # G·ª≠i DM v·ªõi gi·ªõi h·∫°n ƒë·ªìng th·ªùi ƒë·ªÉ tr√°nh rate limit
                    sent = 0
                    failed = 0
                    sem = asyncio.Semaphore(5)

                    async def send_dm(member: discord.Member):
                        nonlocal sent, failed
                        async with sem:
                            try:
                                await member.send(embed=embed)
                                sent += 1
                            except Exception:
                                failed += 1

                    await asyncio.gather(*(send_dm(m) for m in members))

                    summary = discord.Embed(
                        title="‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o",
                        description=f"ƒê√£ c·ªë g·∫Øng g·ª≠i DM t·ªõi **{len(members)}** th√†nh vi√™n ƒëang online.",
                        color=discord.Color.green()
                    )
                    summary.add_field(name="G·ª≠i th√†nh c√¥ng", value=str(sent), inline=True)
                    summary.add_field(name="Th·∫•t b·∫°i", value=str(failed), inline=True)
                    await ctx.reply(embed=summary, mention_author=True)

                except Exception as e:
                    logger.error(f"L·ªói thongbao command: {e}")
                    await ctx.reply("‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i th√¥ng b√°o.", mention_author=True)
