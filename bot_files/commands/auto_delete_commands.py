# -*- coding: utf-8 -*-
"""
Auto Delete Commands - H·ªá th·ªëng t·ª± ƒë·ªông x√≥a tin nh·∫Øn c·ªßa user
Ch·ªâ admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y
"""
import discord
from discord.ext import commands
import json
import os
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class AutoDeleteCommands:
    def __init__(self, bot_instance):
        self.bot_instance = bot_instance
        self.bot = bot_instance.bot
        self.data_folder = 'data'
        self.auto_delete_file = os.path.join(self.data_folder, 'auto_delete_config.json')
        
        # T·∫°o data folder n·∫øu ch∆∞a c√≥
        if not os.path.exists(self.data_folder):
            os.makedirs(self.data_folder)
        self.auto_delete_users = {}  # {guild_id: {user_id: {'enabled': True, 'added_by': admin_id, 'timestamp': datetime}}}
        self.auto_fire_emoji = True  # T·ª± ƒë·ªông th√™m emoji üî•
        self.load_auto_delete_config()
    
    def load_auto_delete_config(self):
        """T·∫£i c·∫•u h√¨nh auto delete t·ª´ file JSON"""
        try:
            if os.path.exists(self.auto_delete_file):
                with open(self.auto_delete_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # Convert string keys back to int
                    for guild_id_str, users in data.get('auto_delete_users', {}).items():
                        guild_id = int(guild_id_str)
                        self.auto_delete_users[guild_id] = {}
                        for user_id_str, user_data in users.items():
                            user_id = int(user_id_str)
                            self.auto_delete_users[guild_id][user_id] = user_data
                
                total_users = sum(len(users) for users in self.auto_delete_users.values())
                logger.info(f"ƒê√£ t·∫£i {total_users} user trong auto delete t·ª´ {len(self.auto_delete_users)} guild")
            else:
                # T·∫°o file config m·∫∑c ƒë·ªãnh
                default_data = {
                    "auto_delete_users": {},
                    "description": "Danh s√°ch users b·ªã t·ª± ƒë·ªông x√≥a tin nh·∫Øn theo guild",
                    "delete_history": []
                }
                with open(self.auto_delete_file, 'w', encoding='utf-8') as f:
                    json.dump(default_data, f, indent=4, ensure_ascii=False)
                logger.info(f"ƒê√£ t·∫°o file auto delete config m·ªõi: {self.auto_delete_file}")
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i auto delete config: {e}")
    
    def save_auto_delete_config(self):
        """L∆∞u c·∫•u h√¨nh auto delete v√†o file JSON"""
        try:
            # Load existing data ƒë·ªÉ gi·ªØ l·∫°i delete_history
            existing_data = {}
            if os.path.exists(self.auto_delete_file):
                with open(self.auto_delete_file, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
            
            # Convert int keys to string for JSON
            auto_delete_data = {}
            for guild_id, users in self.auto_delete_users.items():
                auto_delete_data[str(guild_id)] = {}
                for user_id, user_data in users.items():
                    auto_delete_data[str(guild_id)][str(user_id)] = user_data
            
            # Update auto_delete_users
            existing_data['auto_delete_users'] = auto_delete_data
            existing_data['description'] = "Danh s√°ch users b·ªã t·ª± ƒë·ªông x√≥a tin nh·∫Øn theo guild"
            
            with open(self.auto_delete_file, 'w', encoding='utf-8') as f:
                json.dump(existing_data, f, indent=4, ensure_ascii=False)
            logger.info("ƒê√£ l∆∞u auto delete config th√†nh c√¥ng")
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u auto delete config: {e}")
    
    def add_delete_history(self, guild_id: int, user_id: int, action: str, admin_id: int, reason: str = ""):
        """Th√™m l·ªãch s·ª≠ auto delete v√†o file"""
        try:
            # Load existing data
            existing_data = {}
            if os.path.exists(self.auto_delete_file):
                with open(self.auto_delete_file, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
            
            # Ensure delete_history exists
            if 'delete_history' not in existing_data:
                existing_data['delete_history'] = []
            
            # Add new history entry
            history_entry = {
                'guild_id': guild_id,
                'user_id': user_id,
                'action': action,  # 'add' ho·∫∑c 'remove'
                'admin_id': admin_id,
                'reason': reason,
                'timestamp': datetime.now().isoformat()
            }
            
            existing_data['delete_history'].append(history_entry)
            
            # Keep only last 100 entries ƒë·ªÉ tr√°nh file qu√° l·ªõn
            if len(existing_data['delete_history']) > 100:
                existing_data['delete_history'] = existing_data['delete_history'][-100:]
            
            # Save back to file
            with open(self.auto_delete_file, 'w', encoding='utf-8') as f:
                json.dump(existing_data, f, indent=4, ensure_ascii=False)
                
        except Exception as e:
            logger.error(f"L·ªói khi th√™m auto delete history: {e}")
    
    def is_user_auto_deleted(self, guild_id: int, user_id: int) -> bool:
        """Ki·ªÉm tra xem user c√≥ b·ªã auto delete kh√¥ng"""
        if guild_id not in self.auto_delete_users:
            return False
        if user_id not in self.auto_delete_users[guild_id]:
            return False
        return self.auto_delete_users[guild_id][user_id].get('enabled', False)
    
    def add_auto_delete_user(self, guild_id: int, user_id: int, admin_id: int):
        """Th√™m user v√†o danh s√°ch auto delete"""
        if guild_id not in self.auto_delete_users:
            self.auto_delete_users[guild_id] = {}
        
        self.auto_delete_users[guild_id][user_id] = {
            'enabled': True,
            'added_by': admin_id,
            'timestamp': datetime.now().isoformat()
        }
        self.save_auto_delete_config()
        self.add_delete_history(guild_id, user_id, 'add', admin_id)
    
    def remove_auto_delete_user(self, guild_id: int, user_id: int, admin_id: int):
        """X√≥a user kh·ªèi danh s√°ch auto delete"""
        if guild_id in self.auto_delete_users and user_id in self.auto_delete_users[guild_id]:
            del self.auto_delete_users[guild_id][user_id]
            
            # X√≥a guild n·∫øu kh√¥ng c√≤n user n√†o
            if not self.auto_delete_users[guild_id]:
                del self.auto_delete_users[guild_id]
            
            self.save_auto_delete_config()
            self.add_delete_history(guild_id, user_id, 'remove', admin_id)
            return True
        return False
    
    async def handle_auto_delete_message(self, message):
        """X·ª≠ l√Ω auto delete message - ƒë∆∞·ª£c g·ªçi t·ª´ main bot event"""
        try:
            # B·ªè qua n·∫øu kh√¥ng ph·∫£i trong guild
            if not message.guild:
                return
            
            # B·ªè qua tin nh·∫Øn t·ª´ bot
            if message.author.bot:
                return
            
            # B·ªè qua tin nh·∫Øn t·ª´ admin (ƒë·ªÉ admin c√≥ th·ªÉ d√πng l·ªánh)
            if self.bot_instance.has_warn_permission(message.author.id, message.author.guild_permissions):
                return
            
            guild_id = message.guild.id
            user_id = message.author.id
            
            # Ki·ªÉm tra user c√≥ b·ªã auto delete kh√¥ng
            if self.is_user_auto_deleted(guild_id, user_id):
                try:
                    # Th√™m emoji üî• tr∆∞·ªõc khi x√≥a (n·∫øu t√≠nh nƒÉng ƒë∆∞·ª£c b·∫≠t)
                    if self.auto_fire_emoji:
                        try:
                            await message.add_reaction("üî•")
                            logger.info(f"Auto Delete: ƒê√£ th√™m emoji üî• v√†o tin nh·∫Øn c·ªßa user {user_id}")
                            # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ admin c√≥ th·ªÉ th·∫•y emoji
                            import asyncio
                            await asyncio.sleep(0.3)
                        except:
                            pass  # Kh√¥ng quan tr·ªçng n·∫øu kh√¥ng th√™m ƒë∆∞·ª£c emoji
                    
                    # X√≥a tin nh·∫Øn
                    await message.delete()
                    logger.info(f"Auto Delete: ƒê√£ x√≥a tin nh·∫Øn c·ªßa user {user_id} trong guild {guild_id}")
                except discord.Forbidden:
                    logger.warning(f"Auto Delete: Kh√¥ng c√≥ quy·ªÅn x√≥a tin nh·∫Øn c·ªßa user {user_id} trong guild {guild_id}")
                    # G·ª≠i th√¥ng b√°o cho admin v·ªÅ vi·ªác thi·∫øu quy·ªÅn
                    try:
                        # T√¨m admin ƒë·ªÉ th√¥ng b√°o
                        for member in message.guild.members:
                            if self.bot_instance.has_warn_permission(member.id, member.guild_permissions):
                                embed = discord.Embed(
                                    title="‚ö†Ô∏è Bot thi·∫øu quy·ªÅn Auto Delete",
                                    description="Bot kh√¥ng th·ªÉ x√≥a tin nh·∫Øn do thi·∫øu quy·ªÅn!",
                                    color=discord.Color.orange()
                                )
                                embed.add_field(
                                    name="üîß C√°ch kh·∫Øc ph·ª•c nhanh:",
                                    value=(
                                        "1. **Server Settings** > **Roles**\n"
                                        "2. T√¨m role c·ªßa bot\n"
                                        "3. B·∫≠t quy·ªÅn **Manage Messages** (ch·ªâ c·∫ßn quy·ªÅn n√†y!)\n"
                                        "4. Auto Delete s·∫Ω ho·∫°t ƒë·ªông ngay"
                                    ),
                                    inline=False
                                )
                                embed.add_field(
                                    name="üë§ User b·ªã Auto Delete:",
                                    value=f"<@{user_id}> (ID: {user_id})",
                                    inline=False
                                )
                                try:
                                    await member.send(embed=embed)
                                    break
                                except:
                                    continue
                    except:
                        pass
                except discord.NotFound:
                    logger.warning(f"Auto Delete: Tin nh·∫Øn c·ªßa user {user_id} ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥")
                except Exception as e:
                    logger.error(f"Auto Delete: L·ªói khi x√≥a tin nh·∫Øn c·ªßa user {user_id}: {e}")
            
        except Exception as e:
            logger.error(f"L·ªói trong handle_auto_delete_message: {e}")
    
    def register_commands(self):
        """Thi·∫øt l·∫≠p c√°c l·ªánh auto delete"""
        
        @self.bot.command(name='checkperms')
        async def check_permissions_command(ctx):
            """Ki·ªÉm tra quy·ªÅn c·ªßa bot cho c√°c t√≠nh nƒÉng moderation"""
            # Ki·ªÉm tra quy·ªÅn admin
            if not self.bot_instance.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ admin m·ªõi c√≥ th·ªÉ ki·ªÉm tra permissions!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            bot_member = ctx.guild.get_member(self.bot.user.id)
            if not bot_member:
                await ctx.reply("‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y bot trong server!", mention_author=True)
                return
            
            permissions = bot_member.guild_permissions
            
            embed = discord.Embed(
                title="üîç Ki·ªÉm tra Permissions Bot",
                description="Tr·∫°ng th√°i quy·ªÅn cho c√°c t√≠nh nƒÉng moderation",
                color=discord.Color.blue()
            )
            
            # Ki·ªÉm tra c√°c quy·ªÅn c·∫ßn thi·∫øt
            perms_check = {
                "Manage Messages": permissions.manage_messages,
                "Read Message History": permissions.read_message_history,
                "Send Messages": permissions.send_messages,
                "Embed Links": permissions.embed_links,
                "Add Reactions": permissions.add_reactions,
                "Use External Emojis": permissions.use_external_emojis,
                "Manage Roles": permissions.manage_roles,
                "Kick Members": permissions.kick_members,
                "Ban Members": permissions.ban_members
            }
            
            # Ph√¢n lo·∫°i permissions
            essential_perms = ["Manage Messages", "Read Message History", "Send Messages", "Embed Links"]
            moderation_perms = ["Manage Roles", "Kick Members", "Ban Members"]
            optional_perms = ["Add Reactions", "Use External Emojis"]
            
            # Essential permissions
            essential_status = []
            for perm in essential_perms:
                status = "‚úÖ" if perms_check[perm] else "‚ùå"
                essential_status.append(f"{status} {perm}")
            
            embed.add_field(
                name="üî• Quy·ªÅn thi·∫øt y·∫øu (Auto Delete, Fire Delete)",
                value="\n".join(essential_status),
                inline=False
            )
            
            # Moderation permissions
            mod_status = []
            for perm in moderation_perms:
                status = "‚úÖ" if perms_check[perm] else "‚ùå"
                mod_status.append(f"{status} {perm}")
            
            embed.add_field(
                name="üõ°Ô∏è Quy·ªÅn moderation (Mute, Kick, Ban)",
                value="\n".join(mod_status),
                inline=False
            )
            
            # Optional permissions
            opt_status = []
            for perm in optional_perms:
                status = "‚úÖ" if perms_check[perm] else "‚ùå"
                opt_status.append(f"{status} {perm}")
            
            embed.add_field(
                name="‚≠ê Quy·ªÅn t√πy ch·ªçn",
                value="\n".join(opt_status),
                inline=False
            )
            
            # T·ªïng k·∫øt - ch·ªâ t·∫≠p trung v√†o Manage Messages
            manage_messages = perms_check["Manage Messages"]
            if not manage_messages:
                embed.add_field(
                    name="‚ùå QUAN TR·ªåNG - Thi·∫øu quy·ªÅn x√≥a tin nh·∫Øn",
                    value="**Manage Messages** - Auto Delete v√† Fire Delete kh√¥ng ho·∫°t ƒë·ªông!\n"
                          "üîß **Kh·∫Øc ph·ª•c**: Server Settings > Roles > Bot Role > B·∫≠t 'Manage Messages'",
                    inline=False
                )
                embed.color = discord.Color.red()
            else:
                embed.add_field(
                    name="‚úÖ Quy·ªÅn x√≥a tin nh·∫Øn OK",
                    value="**Manage Messages** ƒë√£ ƒë∆∞·ª£c c·∫•p - Auto Delete v√† Fire Delete ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!",
                    inline=False
                )
                embed.color = discord.Color.green()
                
            # Ki·ªÉm tra c√°c quy·ªÅn kh√°c (kh√¥ng quan tr·ªçng b·∫±ng)
            other_missing = [p for p in essential_perms[1:] if not perms_check[p]]  # B·ªè qua Manage Messages
            if other_missing:
                embed.add_field(
                    name="‚ö†Ô∏è Quy·ªÅn kh√°c (kh√¥ng quan tr·ªçng b·∫±ng)",
                    value=f"Thi·∫øu: **{', '.join(other_missing)}**\n"
                          "Bot v·∫´n ho·∫°t ƒë·ªông ƒë∆∞·ª£c nh∆∞ng m·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ b·ªã h·∫°n ch·∫ø",
                    inline=False
                )
            
            embed.add_field(
                name="üîß C√°ch c·∫•p quy·ªÅn nhanh nh·∫•t",
                value=(
                    "1. **Server Settings** > **Roles**\n"
                    "2. T√¨m role c·ªßa bot\n"
                    "3. B·∫≠t quy·ªÅn **'Manage Messages'** (ch·ªâ c·∫ßn quy·ªÅn n√†y!)\n"
                    "4. Auto Delete v√† Fire Delete s·∫Ω ho·∫°t ƒë·ªông ngay"
                ),
                inline=False
            )
            
            embed.set_footer(text=f"Bot: {bot_member.display_name} ‚Ä¢ Role cao nh·∫•t: {bot_member.top_role.name}")
            
            await ctx.reply(embed=embed, mention_author=True)
        
        @self.bot.command(name='xoa')
        async def auto_delete_command(ctx, action: str = None, target: str = None, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
            """
            Qu·∫£n l√Ω t√≠nh nƒÉng Auto Delete
            Ch·ªâ admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng
            
            Usage: 
            - ;xoa on @user [l√Ω do] - B·∫≠t auto delete cho user
            - ;xoa on <user_id> [l√Ω do] - B·∫≠t auto delete cho user ID
            - ;xoa off @user [l√Ω do] - T·∫Øt auto delete cho user
            - ;xoa off <user_id> [l√Ω do] - T·∫Øt auto delete cho user ID
            - ;xoa list - Xem danh s√°ch user b·ªã auto delete
            - ;xoa history [s·ªë l∆∞·ª£ng] - Xem l·ªãch s·ª≠ auto delete
            """
            # Ki·ªÉm tra quy·ªÅn admin
            if not self.bot_instance.has_warn_permission(ctx.author.id, ctx.author.guild_permissions):
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh auto delete!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            if not action:
                # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
                embed = discord.Embed(
                    title="üóëÔ∏è Auto Delete System",
                    description="H·ªá th·ªëng t·ª± ƒë·ªông x√≥a tin nh·∫Øn c·ªßa user",
                    color=discord.Color.orange()
                )
                
                embed.add_field(
                    name="üìù C√°ch s·ª≠ d·ª•ng",
                    value="`/xoa on @user [l√Ω do]` - B·∫≠t auto delete\n"
                          "`/xoa off @user [l√Ω do]` - T·∫Øt auto delete\n"
                          "`/xoa remove <user_id>` - X√≥a user kh·ªèi danh s√°ch\n"
                          "`/xoa list` - Xem danh s√°ch\n"
                          "`/xoa history [s·ªë]` - Xem l·ªãch s·ª≠\n"
                          "`/xoa fireemoji on/off` - B·∫≠t/t·∫Øt emoji üî• to√†n c·ª•c\n"
                          "`/xoa fireemoji <user_id>` - B·∫≠t auto delete + emoji üî• cho user",
                    inline=False
                )
                
                embed.add_field(
                    name="üîÑ C√°ch ho·∫°t ƒë·ªông",
                    value="‚Ä¢ T·∫•t c·∫£ tin nh·∫Øn c·ªßa user s·∫Ω b·ªã x√≥a t·ª± ƒë·ªông\n"
                          "‚Ä¢ Ch·ªâ admin m·ªõi c√≥ quy·ªÅn qu·∫£n l√Ω\n"
                          "‚Ä¢ Tin nh·∫Øn c·ªßa admin kh√¥ng b·ªã x√≥a\n"
                          "‚Ä¢ L∆∞u l·ªãch s·ª≠ t·∫•t c·∫£ ho·∫°t ƒë·ªông",
                    inline=False
                )
                
                # ƒê·∫øm s·ªë user ƒëang b·ªã auto delete trong server n√†y
                guild_users = self.auto_delete_users.get(ctx.guild.id, {})
                active_count = len([u for u in guild_users.values() if u.get('enabled', False)])
                
                embed.add_field(
                    name="üìä Tr·∫°ng th√°i hi·ªán t·∫°i",
                    value=f"**{active_count}** user ƒëang b·ªã auto delete",
                    inline=True
                )
                
                embed.set_footer(text="Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y")
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            if action.lower() == 'on':
                # B·∫≠t auto delete cho user
                if not target:
                    embed = discord.Embed(
                        title="‚ùå Thi·∫øu tham s·ªë",
                        description="Vui l√≤ng ch·ªâ ƒë·ªãnh user c·∫ßn b·∫≠t auto delete!",
                        color=discord.Color.red()
                    )
                    embed.add_field(
                        name="üí° C√°ch s·ª≠ d·ª•ng",
                        value="`/xoa on @user [l√Ω do]`\n`/xoa on <user_id> [l√Ω do]`",
                        inline=False
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # X·ª≠ l√Ω target (mention ho·∫∑c user ID)
                target_user = None
                target_user_id = None
                
                # Ki·ªÉm tra mention
                if ctx.message.mentions:
                    target_user = ctx.message.mentions[0]
                    target_user_id = target_user.id
                else:
                    # Th·ª≠ parse user ID
                    try:
                        target_user_id = int(target)
                        try:
                            target_user = await self.bot.fetch_user(target_user_id)
                        except:
                            target_user = None
                    except ValueError:
                        embed = discord.Embed(
                            title="‚ùå User kh√¥ng h·ª£p l·ªá",
                            description="Vui l√≤ng mention user ho·∫∑c nh·∫≠p user ID h·ª£p l·ªá!",
                            color=discord.Color.red()
                        )
                        await ctx.reply(embed=embed, mention_author=True)
                        return
                
                # Kh√¥ng th·ªÉ auto delete ch√≠nh m√¨nh
                if target_user_id == ctx.author.id:
                    embed = discord.Embed(
                        title="‚ùå L·ªói",
                        description="B·∫°n kh√¥ng th·ªÉ b·∫≠t auto delete cho ch√≠nh m√¨nh!",
                        color=discord.Color.red()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # Kh√¥ng th·ªÉ auto delete admin kh√°c
                if target_user:
                    member = ctx.guild.get_member(target_user_id)
                    if member and self.bot_instance.has_warn_permission(target_user_id, member.guild_permissions):
                        embed = discord.Embed(
                            title="‚ùå L·ªói",
                            description="Kh√¥ng th·ªÉ b·∫≠t auto delete cho admin kh√°c!",
                            color=discord.Color.red()
                        )
                        await ctx.reply(embed=embed, mention_author=True)
                        return
                
                # Ki·ªÉm tra user ƒë√£ b·ªã auto delete ch∆∞a
                if self.is_user_auto_deleted(ctx.guild.id, target_user_id):
                    embed = discord.Embed(
                        title="‚ö†Ô∏è Th√¥ng b√°o",
                        description=f"User n√†y ƒë√£ b·ªã auto delete r·ªìi!",
                        color=discord.Color.orange()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # Th√™m user v√†o auto delete
                self.add_auto_delete_user(ctx.guild.id, target_user_id, ctx.author.id)
                
                # L·∫•y th√¥ng tin user
                user_info = target_user.display_name if target_user else f"User ID: {target_user_id}"
                
                embed = discord.Embed(
                    title="üóëÔ∏è Auto Delete ƒë√£ B·∫¨T",
                    description=f"**{user_info}** s·∫Ω b·ªã x√≥a tin nh·∫Øn t·ª± ƒë·ªông!",
                    color=discord.Color.red(),
                    timestamp=datetime.now()
                )
                
                embed.add_field(
                    name="üë§ User",
                    value=f"{user_info} (`{target_user_id}`)",
                    inline=True
                )
                
                embed.add_field(
                    name="üìù L√Ω do",
                    value=reason,
                    inline=True
                )
                
                embed.add_field(
                    name="üëë B·∫≠t b·ªüi",
                    value=ctx.author.mention,
                    inline=True
                )
                
                embed.add_field(
                    name="‚ö†Ô∏è L∆∞u √Ω",
                    value="‚Ä¢ T·∫•t c·∫£ tin nh·∫Øn c·ªßa user s·∫Ω b·ªã x√≥a t·ª± ƒë·ªông\n"
                          "‚Ä¢ S·ª≠ d·ª•ng `/xoa off @user` ƒë·ªÉ t·∫Øt",
                    inline=False
                )
                embed.set_footer(text="Auto Delete ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t")
                await ctx.reply(embed=embed, mention_author=True)
                
                logger.info(f"Auto Delete ON: User {target_user_id} b·ªüi {ctx.author} trong guild {ctx.guild.id}")
                
                # X·ª≠ l√Ω target (mention ho·∫∑c user ID)
                target_user = None
                target_user_id = None
                
                # Ki·ªÉm tra mention
                if ctx.message.mentions:
                    target_user = ctx.message.mentions[0]
                    target_user_id = target_user.id
                else:
                    # Th·ª≠ parse user ID
                    try:
                        target_user_id = int(target)
                        try:
                            target_user = await self.bot.fetch_user(target_user_id)
                        except:
                            target_user = None
                    except ValueError:
                        embed = discord.Embed(
                            title="‚ùå User kh√¥ng h·ª£p l·ªá",
                            description="Vui l√≤ng mention user ho·∫∑c nh·∫≠p user ID h·ª£p l·ªá!",
                            color=discord.Color.red()
                        )
                        await ctx.reply(embed=embed, mention_author=True)
                        return
                
                # Ki·ªÉm tra user c√≥ b·ªã auto delete kh√¥ng
                if not self.is_user_auto_deleted(ctx.guild.id, target_user_id):
                    embed = discord.Embed(
                        title="‚ö†Ô∏è Th√¥ng b√°o",
                        description=f"User n√†y kh√¥ng b·ªã auto delete!",
                        color=discord.Color.orange()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # X√≥a user kh·ªèi auto delete
                success = self.remove_auto_delete_user(ctx.guild.id, target_user_id, ctx.author.id)
                
                if success:
                    # L·∫•y th√¥ng tin user
                    user_info = target_user.display_name if target_user else f"User ID: {target_user_id}"
                    
                    embed = discord.Embed(
                        title="‚úÖ Auto Delete ƒë√£ T·∫ÆT",
                        description=f"**{user_info}** kh√¥ng c√≤n b·ªã x√≥a tin nh·∫Øn t·ª± ƒë·ªông!",
                        color=discord.Color.green(),
                        timestamp=datetime.now()
                    )
                    
                    embed.add_field(
                        name="üë§ User",
                        value=f"{user_info} (`{target_user_id}`)",
                        inline=True
                    )
                    
                    embed.add_field(
                        name="üìù L√Ω do",
                        value=reason,
                        inline=True
                    )
                    
                    embed.add_field(
                        name="üëë T·∫Øt b·ªüi",
                        value=ctx.author.mention,
                        inline=True
                    )
                    
                    embed.set_footer(text="Auto Delete ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a")
                    await ctx.reply(embed=embed, mention_author=True)
                    
                    logger.info(f"Auto Delete OFF: User {target_user_id} b·ªüi {ctx.author} trong guild {ctx.guild.id}")
                else:
                    embed = discord.Embed(
                        title="‚ùå L·ªói",
                        description="C√≥ l·ªói x·∫£y ra khi t·∫Øt auto delete!",
                        color=discord.Color.red()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                
            elif action.lower() == 'list':
                # Xem danh s√°ch user b·ªã auto delete
                guild_users = self.auto_delete_users.get(ctx.guild.id, {})
                active_users = {uid: data for uid, data in guild_users.items() if data.get('enabled', False)}
                
                if not active_users:
                    embed = discord.Embed(
                        title="üìã Danh s√°ch Auto Delete",
                        description="Hi·ªán t·∫°i kh√¥ng c√≥ user n√†o b·ªã auto delete!",
                        color=discord.Color.green()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                embed = discord.Embed(
                    title="üóëÔ∏è Danh s√°ch Auto Delete",
                    description=f"C√≥ **{len(active_users)}** user ƒëang b·ªã auto delete:",
                    color=discord.Color.red(),
                    timestamp=datetime.now()
                )
                
                # Hi·ªÉn th·ªã t·ªëi ƒëa 10 user ƒë·ªÉ tr√°nh embed qu√° d√†i
                user_list = list(active_users.items())[:10]
                user_info_list = []
                
                for user_id, user_data in user_list:
                    try:
                        user = await self.bot.fetch_user(user_id)
                        user_info = f"**{user.display_name}** (`{user_id}`)"
                    except:
                        user_info = f"**Unknown User** (`{user_id}`)"
                    
                    # Th√™m th√¥ng tin admin ƒë√£ th√™m
                    try:
                        admin = await self.bot.fetch_user(user_data.get('added_by', 0))
                        admin_info = f" - *B·ªüi: {admin.display_name}*"
                    except:
                        admin_info = ""
                    
                    user_info_list.append(user_info + admin_info)
                
                embed.add_field(
                    name="üë• Users b·ªã Auto Delete",
                    value="\n".join(user_info_list) if user_info_list else "Kh√¥ng c√≥ user n√†o",
                    inline=False
                )
                
                if len(active_users) > 10:
                    embed.add_field(
                        name="‚ö†Ô∏è L∆∞u √Ω",
                        value=f"Ch·ªâ hi·ªÉn th·ªã 10/{len(active_users)} user ƒë·∫ßu ti√™n",
                        inline=False
                    )
                
                embed.set_footer(text="S·ª≠ d·ª•ng ;xoa history ƒë·ªÉ xem l·ªãch s·ª≠")
                await ctx.reply(embed=embed, mention_author=True)
                
            elif action.lower() == 'history':
                # Xem l·ªãch s·ª≠ (ch·ªâ Supreme Admin)
                if not self.bot_instance.is_supreme_admin(ctx.author.id):
                    embed = discord.Embed(
                        title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                        description="Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ xem l·ªãch s·ª≠ Auto Delete!",
                        color=discord.Color.red()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                try:
                    # Parse limit
                    limit = 10
                    if target:
                        try:
                            limit = max(1, min(int(target), 20))  # T·ª´ 1 ƒë·∫øn 20
                        except ValueError:
                            pass
                    
                    # Load history t·ª´ file
                    history_data = []
                    if os.path.exists(self.auto_delete_file):
                        with open(self.auto_delete_file, 'r', encoding='utf-8') as f:
                            data = json.load(f)
                            history_data = data.get('delete_history', [])
                    
                    # Filter theo guild hi·ªán t·∫°i
                    guild_history = [h for h in history_data if h.get('guild_id') == ctx.guild.id]
                    
                    if not guild_history:
                        embed = discord.Embed(
                            title="üìã L·ªãch s·ª≠ Auto Delete",
                            description="Ch∆∞a c√≥ l·ªãch s·ª≠ auto delete n√†o trong server n√†y!",
                            color=discord.Color.blue()
                        )
                        await ctx.reply(embed=embed, mention_author=True)
                        return
                    
                    # Hi·ªÉn th·ªã entries g·∫ßn nh·∫•t
                    recent_history = guild_history[-limit:]
                    
                    embed = discord.Embed(
                        title="üìã L·ªãch s·ª≠ Auto Delete",
                        description=f"**{len(recent_history)}** ho·∫°t ƒë·ªông g·∫ßn nh·∫•t:",
                        color=discord.Color.blue(),
                        timestamp=datetime.now()
                    )
                    
                    for entry in reversed(recent_history):  # Hi·ªÉn th·ªã t·ª´ m·ªõi nh·∫•t
                        action_emoji = "üóëÔ∏è" if entry['action'] == 'add' else "‚úÖ"
                        action_text = "B·∫¨T" if entry['action'] == 'add' else "T·∫ÆT"
                        
                        # L·∫•y th√¥ng tin user
                        try:
                            user = await self.bot.fetch_user(entry['user_id'])
                            user_info = f"{user.display_name}"
                        except:
                            user_info = f"Unknown User"
                        
                        # L·∫•y th√¥ng tin admin
                        try:
                            admin = await self.bot.fetch_user(entry['admin_id'])
                            admin_info = f"{admin.display_name}"
                        except:
                            admin_info = f"Unknown Admin"
                        
                        # Format timestamp
                        try:
                            timestamp = datetime.fromisoformat(entry['timestamp'])
                            time_str = timestamp.strftime("%d/%m/%Y %H:%M")
                        except:
                            time_str = "Unknown time"
                        
                        field_value = f"**User:** {user_info} (`{entry['user_id']}`)\n"
                        field_value += f"**By:** {admin_info}\n"
                        if entry.get('reason'):
                            field_value += f"**Reason:** {entry['reason']}\n"
                        field_value += f"**Time:** {time_str}"
                        
                        embed.add_field(
                            name=f"{action_emoji} {action_text} Auto Delete",
                            value=field_value,
                            inline=False
                        )
                    
                    if len(guild_history) > limit:
                        embed.set_footer(text=f"Hi·ªÉn th·ªã {limit}/{len(guild_history)} ho·∫°t ƒë·ªông")
                    
                    await ctx.reply(embed=embed, mention_author=True)
                    
                except Exception as e:
                    embed = discord.Embed(
                        title="‚ùå L·ªói",
                        description=f"C√≥ l·ªói x·∫£y ra khi t·∫£i l·ªãch s·ª≠: {str(e)}",
                        color=discord.Color.red()
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    logger.error(f"L·ªói trong auto delete history: {e}")
                
            elif action.lower() == 'remove':
                # X√≥a user kh·ªèi danh s√°ch auto delete
                if not target:
                    embed = discord.Embed(
                        title="‚ùå Thi·∫øu th√¥ng tin",
                        description="Vui l√≤ng cung c·∫•p User ID c·∫ßn x√≥a!",
                        color=discord.Color.red()
                    )
                    embed.add_field(
                        name="üí° C√°ch s·ª≠ d·ª•ng",
                        value="`/xoa remove <user_id>`",
                        inline=False
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # Parse user ID
                try:
                    target_user_id = int(target)
                except ValueError:
                    embed = discord.Embed(
                        title="‚ùå User ID kh√¥ng h·ª£p l·ªá",
                        description="Vui l√≤ng cung c·∫•p User ID h·ª£p l·ªá (ch·ªâ s·ªë)!",
                        color=discord.Color.red()
                    )
                    embed.add_field(
                        name="üìù V√≠ d·ª•",
                        value="`/xoa remove 123456789`",
                        inline=False
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # Ki·ªÉm tra user c√≥ trong danh s√°ch auto delete kh√¥ng
                if not self.is_user_auto_deleted(ctx.guild.id, target_user_id):
                    embed = discord.Embed(
                        title="‚ö†Ô∏è User kh√¥ng c√≥ trong danh s√°ch",
                        description=f"User ID `{target_user_id}` kh√¥ng c√≥ trong danh s√°ch Auto Delete!",
                        color=discord.Color.orange()
                    )
                    embed.add_field(
                        name="üí° Ki·ªÉm tra danh s√°ch",
                        value="`/xoa list` - Xem t·∫•t c·∫£ user b·ªã Auto Delete",
                        inline=False
                    )
                    await ctx.reply(embed=embed, mention_author=True)
                    return
                
                # X√≥a user kh·ªèi danh s√°ch
                self.remove_auto_delete_user(ctx.guild.id, target_user_id, ctx.author.id)
                
                # L·∫•y th√¥ng tin user
                try:
                    target_user = await self.bot.fetch_user(target_user_id)
                    user_display = f"{target_user.display_name} ({target_user_id})"
                except:
                    user_display = f"User ID: {target_user_id}"
                
                embed = discord.Embed(
                    title="‚úÖ ƒê√£ x√≥a kh·ªèi Auto Delete",
                    description=f"ƒê√£ x√≥a **{user_display}** kh·ªèi danh s√°ch Auto Delete",
                    color=discord.Color.green()
                )
                
                embed.add_field(
                    name="üîÑ K·∫øt qu·∫£",
                    value=(
                        "‚Ä¢ User c√≥ th·ªÉ g·ª≠i tin nh·∫Øn b√¨nh th∆∞·ªùng\n"
                        "‚Ä¢ Tin nh·∫Øn kh√¥ng c√≤n b·ªã x√≥a t·ª± ƒë·ªông\n"
                        "‚Ä¢ Kh√¥ng c√≤n emoji üî• t·ª± ƒë·ªông"
                    ),
                    inline=False
                )
                
                embed.add_field(
                    name="üë§ ƒê∆∞·ª£c th·ª±c hi·ªán b·ªüi",
                    value=ctx.author.mention,
                    inline=True
                )
                
                embed.set_footer(text="User ƒë√£ ƒë∆∞·ª£c g·ª° kh·ªèi Auto Delete")
                await ctx.reply(embed=embed, mention_author=True)
                
                logger.info(f"Auto Delete REMOVE: User {target_user_id} b·ªüi {ctx.author} trong guild {ctx.guild.id}")
                
            elif action.lower() == 'fireemoji':
                # X·ª≠ l√Ω c√°c t√πy ch·ªçn fireemoji
                if target and target.lower() in ['on', 'off']:
                    # B·∫≠t/t·∫Øt t·ª± ƒë·ªông th√™m emoji üî• to√†n c·ª•c
                    old_status = self.auto_fire_emoji
                    self.auto_fire_emoji = (target.lower() == 'on')
                    embed = discord.Embed(
                        title="üî• Auto Fire Emoji",
                        description=f"T·ª± ƒë·ªông th√™m emoji üî• ƒë√£ ƒë∆∞·ª£c **{'B·∫¨T' if self.auto_fire_emoji else 'T·∫ÆT'}**",
                        color=discord.Color.orange() if self.auto_fire_emoji else discord.Color.gray()
                    )
                    
                    embed.add_field(
                        name="üîß C√°ch ho·∫°t ƒë·ªông",
                        value=(
                            "‚Ä¢ **B·∫¨T**: T·ª± ƒë·ªông th√™m emoji üî• v√†o tin nh·∫Øn tr∆∞·ªõc khi x√≥a\n"
                            "‚Ä¢ **T·∫ÆT**: Ch·ªâ x√≥a tin nh·∫Øn kh√¥ng th√™m emoji\n"
                            "‚Ä¢ Admin c√≥ th·ªÉ th·∫•y emoji tr∆∞·ªõc khi tin nh·∫Øn b·ªã x√≥a"
                        ),
                        inline=False
                    )
                    
                    embed.add_field(
                        name="üìù L·ªánh",
                        value=(
                            "`/xoa fireemoji on` - B·∫≠t to√†n c·ª•c\n"
                            "`/xoa fireemoji off` - T·∫Øt to√†n c·ª•c\n"
                            "`/xoa fireemoji <user_id>` - B·∫≠t auto delete + fire emoji cho user"
                        ),
                        inline=False
                    )
                    
                    await ctx.reply(embed=embed, mention_author=True)
                    logger.info(f"Auto Fire Emoji: {old_status} -> {self.auto_fire_emoji} b·ªüi {ctx.author}")
                
                elif target and target.isdigit():
                    # B·∫≠t auto delete + fire emoji cho user c·ª• th·ªÉ
                    target_user_id = int(target)
                    
                    # Ki·ªÉm tra kh√¥ng th·ªÉ t·ª± auto delete ch√≠nh m√¨nh
                    if target_user_id == ctx.author.id:
                        embed = discord.Embed(
                            title="‚ùå Kh√¥ng th·ªÉ t·ª± auto delete",
                            description="B·∫°n kh√¥ng th·ªÉ b·∫≠t auto delete cho ch√≠nh m√¨nh!",
                            color=discord.Color.red()
                        )
                        await ctx.reply(embed=embed, mention_author=True)
                        return
                    
                    # Ki·ªÉm tra kh√¥ng th·ªÉ auto delete admin kh√°c
                    if self.bot_instance.is_admin(target_user_id):
                        embed = discord.Embed(
                            title="‚ùå Kh√¥ng th·ªÉ auto delete admin",
                            description="Kh√¥ng th·ªÉ b·∫≠t auto delete cho admin kh√°c!",
                            color=discord.Color.red()
                        )
                        await ctx.reply(embed=embed, mention_author=True)
                        return
                    
                    # Ki·ªÉm tra user ƒë√£ b·ªã auto delete ch∆∞a
                    if self.is_user_auto_deleted(ctx.guild.id, target_user_id):
                        embed = discord.Embed(
                            title="‚ö†Ô∏è User ƒë√£ b·ªã Auto Delete",
                            description=f"User <@{target_user_id}> ƒë√£ b·ªã auto delete r·ªìi!",
                            color=discord.Color.orange()
                        )
                        embed.add_field(
                            name="üí° L∆∞u √Ω",
                            value="Fire emoji s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c th√™m v√†o tin nh·∫Øn c·ªßa user n√†y",
                            inline=False
                        )
                        await ctx.reply(embed=embed, mention_author=True)
                        return
                    
                    # B·∫≠t auto delete cho user
                    self.add_auto_delete_user(ctx.guild.id, target_user_id, ctx.author.id)
                    
                    # L·∫•y th√¥ng tin user
                    try:
                        target_user = await self.bot.fetch_user(target_user_id)
                        user_display = f"{target_user.display_name} ({target_user_id})"
                    except:
                        user_display = f"User ID: {target_user_id}"
                    
                    embed = discord.Embed(
                        title="üî• Auto Delete + Fire Emoji",
                        description=f"ƒê√£ b·∫≠t **Auto Delete + Fire Emoji** cho {user_display}",
                        color=discord.Color.red()
                    )
                    
                    embed.add_field(
                        name="üî• C√°ch ho·∫°t ƒë·ªông",
                        value=(
                            "‚Ä¢ T·∫•t c·∫£ tin nh·∫Øn c·ªßa user s·∫Ω c√≥ emoji üî• t·ª± ƒë·ªông\n"
                            "‚Ä¢ Tin nh·∫Øn s·∫Ω b·ªã x√≥a sau 0.3 gi√¢y\n"
                            "‚Ä¢ Admin c√≥ th·ªÉ th·∫•y emoji tr∆∞·ªõc khi tin nh·∫Øn bi·∫øn m·∫•t"
                        ),
                        inline=False
                    )
                    
                    embed.add_field(
                        name="üõë T·∫Øt Auto Delete",
                        value=f"`/xoa off {target_user_id}`",
                        inline=False
                    )
                    
                    embed.add_field(
                        name="üë§ ƒê∆∞·ª£c th·ª±c hi·ªán b·ªüi",
                        value=ctx.author.mention,
                        inline=True
                    )
                    
                    embed.set_footer(text="Auto Delete + Fire Emoji ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t")
                    await ctx.reply(embed=embed, mention_author=True)
                    
                    logger.info(f"Auto Delete + Fire Emoji ON: User {target_user_id} b·ªüi {ctx.author} trong guild {ctx.guild.id}")
                
                else:
                    # Hi·ªÉn th·ªã tr·∫°ng th√°i v√† h∆∞·ªõng d·∫´n
                    embed = discord.Embed(
                        title="üî• Auto Fire Emoji - H∆∞·ªõng d·∫´n",
                        description=f"Tr·∫°ng th√°i to√†n c·ª•c: **{'B·∫¨T' if self.auto_fire_emoji else 'T·∫ÆT'}**",
                        color=discord.Color.orange() if self.auto_fire_emoji else discord.Color.gray()
                    )
                    
                    embed.add_field(
                        name="üí° M√¥ t·∫£",
                        value=(
                            "T·ª± ƒë·ªông th√™m emoji üî• v√†o tin nh·∫Øn c·ªßa user b·ªã Auto Delete\n"
                            "tr∆∞·ªõc khi x√≥a ƒë·ªÉ admin c√≥ th·ªÉ th·∫•y."
                        ),
                        inline=False
                    )
                    
                    embed.add_field(
                        name="üîß L·ªánh ƒëi·ªÅu khi·ªÉn",
                        value=(
                            "`/xoa fireemoji on` - B·∫≠t to√†n c·ª•c\n"
                            "`/xoa fireemoji off` - T·∫Øt to√†n c·ª•c\n"
                            "`/xoa fireemoji <user_id>` - B·∫≠t auto delete + fire emoji cho user\n"
                            "`/xoa fireemoji` - Xem h∆∞·ªõng d·∫´n n√†y"
                        ),
                        inline=False
                    )
                    
                    embed.add_field(
                        name="üìù V√≠ d·ª•",
                        value=(
                            "`/xoa fireemoji 123456789` - B·∫≠t cho user ID\n"
                            "User ƒë√≥ s·∫Ω c√≥ emoji üî• tr√™n m·ªçi tin nh·∫Øn tr∆∞·ªõc khi b·ªã x√≥a"
                        ),
                        inline=False
                    )
                    
                    await ctx.reply(embed=embed, mention_author=True)
                
            else:
                embed = discord.Embed(
                    title="‚ùå Action kh√¥ng h·ª£p l·ªá",
                    description=f"Action `{action}` kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="Actions h·ª£p l·ªá",
                    value="`on`, `off`, `list`, `history`, `remove`, `fireemoji`",
                    inline=False
                )
                await ctx.reply(embed=embed, mention_author=True)
        
        logger.info("Auto Delete commands ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω")
