import discord
from discord.ext import commands
import aiohttp
import json
import os
import base64
import asyncio
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class GitHubDownloadCommands:
    """Commands ƒë·ªÉ download file t·ª´ GitHub private repository"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.config = self._load_github_config()
        
    def _load_github_config(self):
        """Load GitHub configuration"""
        try:
            config_path = os.path.join(os.path.dirname(__file__), '..', 'config_github.json')
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"Error loading GitHub config: {e}")
            return {}
    
    def _get_github_token(self):
        """L·∫•y GitHub token t·ª´ environment ho·∫∑c config"""
        # ∆Øu ti√™n environment variable
        token = os.getenv('GITHUB_TOKEN')
        if token:
            return token
            
        # Fallback to config file
        try:
            with open('github_token.txt', 'r') as f:
                return f.read().strip()
        except:
            return None
    
    def _parse_github_url(self, url):
        """Parse GitHub URL ƒë·ªÉ l·∫•y owner, repo, path"""
        try:
            # https://github.com/owner/repo/blob/branch/path/to/file
            # ho·∫∑c https://github.com/owner/repo/tree/branch/folder/path
            parts = url.replace('https://github.com/', '').split('/')
            
            if len(parts) < 2:
                return None, None, None, None
                
            owner = parts[0]
            repo = parts[1]
            
            # N·∫øu c√≥ blob/tree th√¨ l·∫•y branch v√† path
            if len(parts) > 3 and parts[2] in ['blob', 'tree']:
                branch = parts[3]
                path = '/'.join(parts[4:]) if len(parts) > 4 else ''
            else:
                branch = 'main'  # default branch
                path = '/'.join(parts[2:]) if len(parts) > 2 else ''
                
            return owner, repo, branch, path
        except Exception as e:
            logger.error(f"Error parsing GitHub URL: {e}")
            return None, None, None, None
    
    async def _download_file_from_github(self, owner, repo, path, branch='main'):
        """Download file t·ª´ GitHub API"""
        token = self._get_github_token()
        if not token:
            raise Exception("GitHub token kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh!")
        
        # GitHub API URL
        api_url = f"https://api.github.com/repos/{owner}/{repo}/contents/{path}"
        
        headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json',
            'User-Agent': 'Discord-Bot'
        }
        
        params = {'ref': branch} if branch != 'main' else {}
        
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url, headers=headers, params=params) as response:
                if response.status == 404:
                    raise Exception(f"File kh√¥ng t·ªìn t·∫°i: {path}")
                elif response.status == 403:
                    raise Exception("Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p repository!")
                elif response.status != 200:
                    raise Exception(f"L·ªói GitHub API: {response.status}")
                
                data = await response.json()
                
                # N·∫øu l√† file
                if data.get('type') == 'file':
                    content = base64.b64decode(data['content']).decode('utf-8')
                    return content, data['name'], data['size']
                # N·∫øu l√† folder
                elif isinstance(data, list):
                    return None, None, None  # Folder listing
                else:
                    raise Exception("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh lo·∫°i file/folder")
    
    async def _save_file_locally(self, content, filename, target_folder=None):
        """L∆∞u file v√†o local v·ªõi backup file c≈© n·∫øu tr√πng t√™n"""
        try:
            # X√°c ƒë·ªãnh th∆∞ m·ª•c ƒë√≠ch
            if target_folder:
                save_path = os.path.join(target_folder, filename)
                os.makedirs(target_folder, exist_ok=True)
            else:
                # M·∫∑c ƒë·ªãnh l∆∞u trong th∆∞ m·ª•c bot
                bot_dir = os.path.dirname(os.path.dirname(__file__))
                save_path = os.path.join(bot_dir, filename)
            
            # Backup file c≈© n·∫øu t·ªìn t·∫°i
            if os.path.exists(save_path):
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_path = f"{save_path}.backup_{timestamp}"
                os.rename(save_path, backup_path)
                logger.info(f"Backed up existing file to: {backup_path}")
            
            # L∆∞u file m·ªõi
            with open(save_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            return save_path
            
        except Exception as e:
            logger.error(f"Error saving file: {e}")
            raise Exception(f"L·ªói khi l∆∞u file: {str(e)}")
    
    async def download_file_command(self, ctx, github_url: str, target_folder: str = None):
        """
        Download file t·ª´ GitHub private repository
        
        Args:
            ctx: Discord context
            github_url: URL c·ªßa file tr√™n GitHub
            target_folder: Th∆∞ m·ª•c ƒë√≠ch (optional)
        """
        try:
            # Parse GitHub URL
            owner, repo, branch, path = self._parse_github_url(github_url)
            
            if not owner or not repo:
                await ctx.reply("‚ùå URL GitHub kh√¥ng h·ª£p l·ªá!")
                return
            
            # T·∫°o embed th√¥ng b√°o ƒëang download
            embed = discord.Embed(
                title="üì• ƒêang t·∫£i file t·ª´ GitHub...",
                description=f"**Repository:** {owner}/{repo}\n**Branch:** {branch}\n**File:** {path}",
                color=discord.Color.blue()
            )
            
            status_msg = await ctx.reply(embed=embed)
            
            # Download file
            content, filename, file_size = await self._download_file_from_github(owner, repo, path, branch)
            
            if content is None:
                embed.color = discord.Color.red()
                embed.title = "‚ùå L·ªói t·∫£i file"
                embed.description = "ƒê∆∞·ªùng d·∫´n n√†y l√† th∆∞ m·ª•c, kh√¥ng ph·∫£i file!"
                await status_msg.edit(embed=embed)
                return
            
            # L∆∞u file
            saved_path = await self._save_file_locally(content, filename, target_folder)
            
            # C·∫≠p nh·∫≠t embed th√†nh c√¥ng
            embed.color = discord.Color.green()
            embed.title = "‚úÖ T·∫£i file th√†nh c√¥ng!"
            embed.description = f"**File:** {filename}\n**K√≠ch th∆∞·ªõc:** {file_size:,} bytes\n**L∆∞u t·∫°i:** `{saved_path}`"
            
            embed.add_field(
                name="üìä Th√¥ng tin chi ti·∫øt:",
                value=(
                    f"**Repository:** {owner}/{repo}\n"
                    f"**Branch:** {branch}\n"
                    f"**ƒê∆∞·ªùng d·∫´n GitHub:** {path}\n"
                    f"**Th·ªùi gian:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                ),
                inline=False
            )
            
            await status_msg.edit(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in download_file_command: {e}")
            
            # C·∫≠p nh·∫≠t embed l·ªói
            embed = discord.Embed(
                title="‚ùå L·ªói t·∫£i file",
                description=f"**L·ªói:** {str(e)}",
                color=discord.Color.red()
            )
            
            embed.add_field(
                name="üí° G·ª£i √Ω:",
                value=(
                    "‚Ä¢ Ki·ªÉm tra URL GitHub c√≥ ƒë√∫ng kh√¥ng\n"
                    "‚Ä¢ ƒê·∫£m b·∫£o GitHub token ƒë∆∞·ª£c c·∫•u h√¨nh\n"
                    "‚Ä¢ Ki·ªÉm tra quy·ªÅn truy c·∫≠p repository\n"
                    "‚Ä¢ File c√≥ t·ªìn t·∫°i tr√™n branch ƒë√≥ kh√¥ng"
                ),
                inline=False
            )
            
            try:
                await status_msg.edit(embed=embed)
            except:
                await ctx.reply(embed=embed)
    
    async def list_repo_files_command(self, ctx, github_url: str, folder_path: str = ""):
        """
        Li·ªát k√™ files trong repository ho·∫∑c folder
        
        Args:
            ctx: Discord context  
            github_url: URL repository GitHub
            folder_path: ƒê∆∞·ªùng d·∫´n folder (optional)
        """
        try:
            owner, repo, branch, _ = self._parse_github_url(github_url)
            
            if not owner or not repo:
                await ctx.reply("‚ùå URL GitHub kh√¥ng h·ª£p l·ªá!")
                return
            
            token = self._get_github_token()
            if not token:
                await ctx.reply("‚ùå GitHub token kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh!")
                return
            
            # API URL
            api_url = f"https://api.github.com/repos/{owner}/{repo}/contents/{folder_path}"
            
            headers = {
                'Authorization': f'token {token}',
                'Accept': 'application/vnd.github.v3+json'
            }
            
            params = {'ref': branch} if branch != 'main' else {}
            
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, headers=headers, params=params) as response:
                    if response.status != 200:
                        await ctx.reply(f"‚ùå L·ªói API: {response.status}")
                        return
                    
                    files_data = await response.json()
            
            # T·∫°o embed hi·ªÉn th·ªã files
            embed = discord.Embed(
                title=f"üìÅ Files trong {owner}/{repo}",
                description=f"**Folder:** `{folder_path or 'root'}`\n**Branch:** {branch}",
                color=discord.Color.blue()
            )
            
            files = []
            folders = []
            
            for item in files_data:
                if item['type'] == 'file':
                    size_kb = item['size'] / 1024
                    files.append(f"üìÑ `{item['name']}` ({size_kb:.1f} KB)")
                elif item['type'] == 'dir':
                    folders.append(f"üìÅ `{item['name']}/`")
            
            if folders:
                embed.add_field(
                    name="üìÅ Th∆∞ m·ª•c:",
                    value='\n'.join(folders[:10]),  # Gi·ªõi h·∫°n 10 items
                    inline=False
                )
            
            if files:
                embed.add_field(
                    name="üìÑ Files:",
                    value='\n'.join(files[:15]),  # Gi·ªõi h·∫°n 15 items
                    inline=False
                )
            
            if not files and not folders:
                embed.add_field(
                    name="üì≠ Tr·ªëng",
                    value="Kh√¥ng c√≥ file ho·∫∑c th∆∞ m·ª•c n√†o",
                    inline=False
                )
            
            embed.add_field(
                name="üí° S·ª≠ d·ª•ng:",
                value=f"; <github_url>` ƒë·ªÉ t·∫£i file c·ª• th·ªÉ",
                inline=False
            )
            
            await ctx.reply(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in list_repo_files_command: {e}")
            await ctx.reply(f"‚ùå L·ªói: {str(e)}")

    def register_commands(self):
        """ƒêƒÉng k√Ω commands v·ªõi bot"""
        
        @self.bot.bot.command(name='downloadfile', aliases=['dlfile', 'gitdownload'])
        async def download_file(ctx, github_url: str, target_folder: str = None):
            """
            T·∫£i file t·ª´ GitHub private repository
            
            Usage:
                ;downloadfile <github_url> [target_folder]
                
            Examples:
                ;downloadfile https://github.com/user/repo/blob/main/config.json
                ;downloadfile https://github.com/user/repo/blob/main/data.json ./downloads
            """
            await self.download_file_command(ctx, github_url, target_folder)
        
        @self.bot.bot.command(name='listfiles', aliases=['lsfiles', 'gitls'])
        async def list_files(ctx, github_url: str, folder_path: str = ""):
            """
            Li·ªát k√™ files trong GitHub repository
            
            Usage:
                ;listfiles <github_url> [folder_path]
                
            Examples:
                ;listfiles https://github.com/user/repo
                ;listfiles https://github.com/user/repo/tree/main/data
            """
            await self.list_repo_files_command(ctx, github_url, folder_path)

def setup(bot):
    """Setup function ƒë·ªÉ load commands (backward compatibility)"""
    github_cmd = GitHubDownloadCommands(bot)
    github_cmd.register_commands()
