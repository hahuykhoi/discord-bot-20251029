# -*- coding: utf-8 -*-
"""
Permission Commands - Qu·∫£n l√Ω quy·ªÅn cho c√°c l·ªánh
"""
import discord
from discord.ext import commands
import logging
import json
import os
from .base import BaseCommand

logger = logging.getLogger(__name__)

class PermissionCommands(BaseCommand):
    """Class ch·ª©a c√°c commands qu·∫£n l√Ω quy·ªÅn"""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.permissions_file = "data/command_permissions.json"
        self.command_permissions = self.load_permissions()
    
    def load_permissions(self):
        """Load permissions t·ª´ file"""
        try:
            if os.path.exists(self.permissions_file):
                with open(self.permissions_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                # Default permissions cho m·ªôt s·ªë l·ªánh quan tr·ªçng
                default_perms = {
                    "setsupremeadmin": "supreme_admin",
                    "removesupremeadmin": "supreme_admin",
                    "addadmin": "supreme_admin",
                    "removeadmin": "supreme_admin",
                    "addpriority": "admin",
                    "removepriority": "admin",
                    "reload": "admin",
                    "debug": "admin",
                    "cleanupdms": "supreme_admin",
                    "vipban": "admin",
                    "vipkick": "admin",
                    "vipunban": "admin",
                    "warn": "admin",
                    "mute": "admin",
                    "unmute": "admin"
                }
                self.save_permissions(default_perms)
                return default_perms
        except Exception as e:
            logger.error(f"L·ªói khi load permissions: {e}")
            return {}
    
    def save_permissions(self, permissions=None):
        """Save permissions v√†o file"""
        try:
            perms_to_save = permissions or self.command_permissions
            with open(self.permissions_file, 'w', encoding='utf-8') as f:
                json.dump(perms_to_save, f, ensure_ascii=False, indent=2)
            logger.info(f"ƒê√£ l∆∞u {len(perms_to_save)} command permissions")
        except Exception as e:
            logger.error(f"L·ªói khi save permissions: {e}")
    
    def get_command_permission(self, command_name):
        """L·∫•y permission level c·ªßa command"""
        return self.command_permissions.get(command_name, "user")  # Default: user
    
    def set_command_permission(self, command_name, permission_level):
        """Set permission level cho command"""
        valid_levels = ["supreme_admin", "admin", "user"]
        if permission_level not in valid_levels:
            return False, f"Permission level kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: {', '.join(valid_levels)}"
        
        self.command_permissions[command_name] = permission_level
        self.save_permissions()
        return True, f"ƒê√£ set permission '{permission_level}' cho l·ªánh '{command_name}'"
    
    def check_command_permission(self, ctx, command_name):
        """Ki·ªÉm tra user c√≥ quy·ªÅn s·ª≠ d·ª•ng command kh√¥ng"""
        required_level = self.get_command_permission(command_name)
        user_id = ctx.author.id
        
        # Supreme Admin c√≥ quy·ªÅn t·∫•t c·∫£
        if hasattr(self.bot_instance, 'supreme_admin_id') and self.bot_instance.supreme_admin_id and user_id == self.bot_instance.supreme_admin_id:
            return True, "supreme_admin"
        
        # Admin c√≥ quy·ªÅn admin v√† user
        if hasattr(self.bot_instance, 'admin_ids') and user_id in self.bot_instance.admin_ids:
            if required_level in ["admin", "user"]:
                return True, "admin"
            else:
                return False, f"L·ªánh n√†y ch·ªâ d√†nh cho Supreme Admin"
        
        # User ch·ªâ c√≥ quy·ªÅn user
        if required_level == "user":
            return True, "user"
        else:
            return False, f"L·ªánh n√†y ch·ªâ d√†nh cho {required_level.replace('_', ' ').title()}"
    
    def register_commands(self):
        """Register permission commands"""
        
        @self.bot.command(name='quyen')
        async def set_permission(ctx, command_name: str = None, permission_level: str = None):
            """
            Thi·∫øt l·∫≠p quy·ªÅn cho l·ªánh
            Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng
            
            Usage: 
            ;quyen <t√™n_l·ªánh> <supreme_admin|admin|user>
            ;quyen emoji user
            ;quyen reload admin
            """
            # Ch·ªâ Supreme Admin m·ªõi ƒë∆∞·ª£c set permissions
            # Ki·ªÉm tra Supreme Admin s·ª≠ d·ª•ng bot_instance thay v√¨ bot
            if not (hasattr(self.bot_instance, 'supreme_admin_id') and self.bot_instance.supreme_admin_id and ctx.author.id == self.bot_instance.supreme_admin_id):
                error_embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ Supreme Admin m·ªõi c√≥ th·ªÉ thi·∫øt l·∫≠p quy·ªÅn cho l·ªánh!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=error_embed, mention_author=True)
                return
            
            if not command_name or not permission_level:
                # Hi·ªÉn th·ªã help v√† danh s√°ch permissions hi·ªán t·∫°i
                embed = discord.Embed(
                    title="üîê Qu·∫£n l√Ω quy·ªÅn l·ªánh",
                    description="Thi·∫øt l·∫≠p quy·ªÅn s·ª≠ d·ª•ng cho t·ª´ng l·ªánh",
                    color=discord.Color.blue()
                )
                embed.add_field(
                    name="C√°ch s·ª≠ d·ª•ng",
                    value="; <t√™n_l·ªánh> <permission_level>`",
                    inline=False
                )
                embed.add_field(
                    name="Permission Levels",
                    value=(
                        "‚Ä¢ `supreme_admin` - Ch·ªâ Supreme Admin\n"
                        "‚Ä¢ `admin` - Admin v√† Supreme Admin\n"
                        "‚Ä¢ `user` - T·∫•t c·∫£ user"
                    ),
                    inline=False
                )
                embed.add_field(
                    name="V√≠ d·ª•",
                    value=(
                        "; emoji user` - Cho ph√©p t·∫•t c·∫£ user d√πng emoji\n"
                        "; reload admin` - Ch·ªâ admin ƒë∆∞·ª£c reload\n"
                        "; debug supreme_admin` - Ch·ªâ Supreme Admin"
                    ),
                    inline=False
                )
                
                # Hi·ªÉn th·ªã m·ªôt s·ªë permissions hi·ªán t·∫°i
                current_perms = []
                for cmd, perm in list(self.command_permissions.items())[:10]:
                    current_perms.append(f"`{cmd}`: {perm}")
                
                if current_perms:
                    embed.add_field(
                        name="Permissions hi·ªán t·∫°i (10 ƒë·∫ßu)",
                        value="\n".join(current_perms),
                        inline=False
                    )
                
                embed.add_field(
                    name="üìä Th·ªëng k√™",
                    value=f"ƒêang qu·∫£n l√Ω {len(self.command_permissions)} l·ªánh",
                    inline=False
                )
                
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Ki·ªÉm tra command c√≥ t·ªìn t·∫°i kh√¥ng
            all_commands = [cmd.name for cmd in self.bot.commands] + [alias for cmd in self.bot.commands for alias in cmd.aliases]
            if command_name not in all_commands:
                error_embed = discord.Embed(
                    title="‚ùå L·ªánh kh√¥ng t·ªìn t·∫°i",
                    description=f"Kh√¥ng t√¨m th·∫•y l·ªánh `{command_name}`",
                    color=discord.Color.red()
                )
                error_embed.add_field(
                    name="üí° G·ª£i √Ω",
                    value="S·ª≠ d·ª•ng ;` ƒë·ªÉ xem danh s√°ch l·ªánh c√≥ s·∫µn",
                    inline=False
                )
                await ctx.reply(embed=error_embed, mention_author=True)
                return
            
            # Set permission
            success, message = self.set_command_permission(command_name, permission_level)
            
            if success:
                success_embed = discord.Embed(
                    title="‚úÖ ƒê√£ c·∫≠p nh·∫≠t quy·ªÅn",
                    description=message,
                    color=discord.Color.green()
                )
                success_embed.add_field(
                    name="üìã Chi ti·∫øt",
                    value=(
                        f"**L·ªánh:** `{command_name}`\n"
                        f"**Permission:** `{permission_level}`\n"
                        f"**C√≥ hi·ªáu l·ª±c:** Ngay l·∫≠p t·ª©c"
                    ),
                    inline=False
                )
                
                # Gi·∫£i th√≠ch ai c√≥ th·ªÉ d√πng
                if permission_level == "supreme_admin":
                    who_can_use = "Ch·ªâ Supreme Admin"
                elif permission_level == "admin":
                    who_can_use = "Admin v√† Supreme Admin"
                else:
                    who_can_use = "T·∫•t c·∫£ user"
                
                success_embed.add_field(
                    name="üë• Ai c√≥ th·ªÉ s·ª≠ d·ª•ng",
                    value=who_can_use,
                    inline=False
                )
                
                await ctx.reply(embed=success_embed, mention_author=True)
            else:
                error_embed = discord.Embed(
                    title="‚ùå L·ªói",
                    description=message,
                    color=discord.Color.red()
                )
                await ctx.reply(embed=error_embed, mention_author=True)
        
        @self.bot.command(name='listquyen', aliases=['permissions'])
        async def list_permissions(ctx, page: int = 1):
            """
            Xem danh s√°ch quy·ªÅn c·ªßa c√°c l·ªánh
            
            Usage: ;listquyen [page]
            """
            # Ch·ªâ admin tr·ªü l√™n m·ªõi xem ƒë∆∞·ª£c
            is_admin = hasattr(self.bot_instance, 'admin_ids') and ctx.author.id in self.bot_instance.admin_ids
            is_supreme = hasattr(self.bot_instance, 'supreme_admin_id') and self.bot_instance.supreme_admin_id and ctx.author.id == self.bot_instance.supreme_admin_id
            if not (is_admin or is_supreme):
                error_embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description="Ch·ªâ Admin tr·ªü l√™n m·ªõi c√≥ th·ªÉ xem danh s√°ch quy·ªÅn!",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=error_embed, mention_author=True)
                return
            
            if not self.command_permissions:
                embed = discord.Embed(
                    title="üìã Danh s√°ch quy·ªÅn l·ªánh",
                    description="Ch∆∞a c√≥ l·ªánh n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p quy·ªÅn",
                    color=discord.Color.orange()
                )
                await ctx.reply(embed=embed, mention_author=True)
                return
            
            # Ph√¢n trang
            items_per_page = 15
            total_items = len(self.command_permissions)
            total_pages = (total_items + items_per_page - 1) // items_per_page
            
            if page < 1:
                page = 1
            elif page > total_pages:
                page = total_pages
            
            start_idx = (page - 1) * items_per_page
            end_idx = start_idx + items_per_page
            
            # S·∫Øp x·∫øp theo permission level v√† t√™n l·ªánh
            sorted_perms = sorted(self.command_permissions.items(), 
                                key=lambda x: (x[1], x[0]))
            page_items = sorted_perms[start_idx:end_idx]
            
            embed = discord.Embed(
                title="üîê Danh s√°ch quy·ªÅn l·ªánh",
                description=f"Trang {page}/{total_pages} - T·ªïng {total_items} l·ªánh",
                color=discord.Color.blue()
            )
            
            # Group by permission level
            supreme_admin_cmds = []
            admin_cmds = []
            user_cmds = []
            
            for cmd, perm in page_items:
                if perm == "supreme_admin":
                    supreme_admin_cmds.append(cmd)
                elif perm == "admin":
                    admin_cmds.append(cmd)
                else:
                    user_cmds.append(cmd)
            
            if supreme_admin_cmds:
                embed.add_field(
                    name="üëë Supreme Admin Only",
                    value=", ".join([f"`{cmd}`" for cmd in supreme_admin_cmds]),
                    inline=False
                )
            
            if admin_cmds:
                embed.add_field(
                    name="üõ°Ô∏è Admin+",
                    value=", ".join([f"`{cmd}`" for cmd in admin_cmds]),
                    inline=False
                )
            
            if user_cmds:
                embed.add_field(
                    name="üë§ All Users",
                    value=", ".join([f"`{cmd}`" for cmd in user_cmds]),
                    inline=False
                )
            
            if total_pages > 1:
                embed.add_field(
                    name="üìÑ Navigation",
                    value=f"S·ª≠ d·ª•ng ; {page+1}` ƒë·ªÉ xem trang ti·∫øp theo" if page < total_pages else "ƒê√¢y l√† trang cu·ªëi",
                    inline=False
                )
            
            await ctx.reply(embed=embed, mention_author=True)
        
        @self.bot.command(name='checkquyen')
        async def check_permission(ctx, command_name: str = None):
            """
            Ki·ªÉm tra quy·ªÅn c·ªßa m·ªôt l·ªánh c·ª• th·ªÉ
            
            Usage: ;checkquyen <t√™n_l·ªánh>
            """
            if not command_name:
                error_embed = discord.Embed(
                    title="‚ùå Thi·∫øu tham s·ªë",
                    description="Vui l√≤ng cung c·∫•p t√™n l·ªánh c·∫ßn ki·ªÉm tra!",
                    color=discord.Color.red()
                )
                error_embed.add_field(
                    name="C√°ch s·ª≠ d·ª•ng",
                    value="; <t√™n_l·ªánh>`\n**V√≠ d·ª•:** ; emoji`",
                    inline=False
                )
                await ctx.reply(embed=error_embed, mention_author=True)
                return
            
            permission_level = self.get_command_permission(command_name)
            has_permission, user_level = self.check_command_permission(ctx, command_name)
            
            embed = discord.Embed(
                title=f"üîç Ki·ªÉm tra quy·ªÅn: `{command_name}`",
                color=discord.Color.green() if has_permission else discord.Color.red()
            )
            
            embed.add_field(
                name="üìã Th√¥ng tin l·ªánh",
                value=(
                    f"**L·ªánh:** `{command_name}`\n"
                    f"**Y√™u c·∫ßu quy·ªÅn:** `{permission_level}`\n"
                    f"**Quy·ªÅn c·ªßa b·∫°n:** `{user_level}`"
                ),
                inline=False
            )
            
            embed.add_field(
                name="‚úÖ K·∫øt qu·∫£" if has_permission else "‚ùå K·∫øt qu·∫£",
                value="B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y" if has_permission else "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y",
                inline=False
            )
            
            # Gi·∫£i th√≠ch permission levels
            if permission_level == "supreme_admin":
                who_can_use = "Ch·ªâ Supreme Admin"
            elif permission_level == "admin":
                who_can_use = "Admin v√† Supreme Admin"
            else:
                who_can_use = "T·∫•t c·∫£ user"
            
            embed.add_field(
                name="üë• Ai c√≥ th·ªÉ s·ª≠ d·ª•ng",
                value=who_can_use,
                inline=False
            )
            
            await ctx.reply(embed=embed, mention_author=True)
