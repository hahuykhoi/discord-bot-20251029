#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script t·∫°o file resource ch·ª©a t·∫•t c·∫£ n·ªôi dung bot_files
C√≥ th·ªÉ extract l·∫°i th√†nh folder bot_files n·∫øu c·∫ßn
"""

import os
import json
import base64
import zipfile
import shutil
from datetime import datetime
import tempfile

class BotResourceManager:
    """Qu·∫£n l√Ω resource file cho bot"""
    
    def __init__(self):
        self.resource_file = "bot_resource.json"
        self.bot_files_folder = "bot_files"
        
    def create_resource_file(self):
        """T·∫°o file resource t·ª´ folder bot_files"""
        print("üîÑ T·∫°o bot resource file...")
        
        if not os.path.exists(self.bot_files_folder):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y folder: {self.bot_files_folder}")
            return False
        
        # T·∫°o resource data
        resource_data = {
            "metadata": {
                "created_at": datetime.now().isoformat(),
                "version": "1.0",
                "description": "Bot files resource package",
                "total_files": 0,
                "total_size": 0
            },
            "files": {}
        }
        
        total_files = 0
        total_size = 0
        
        # Duy·ªát qua t·∫•t c·∫£ files trong bot_files
        for root, dirs, files in os.walk(self.bot_files_folder):
            for file in files:
                file_path = os.path.join(root, file)
                relative_path = os.path.relpath(file_path, self.bot_files_folder)
                
                try:
                    # ƒê·ªçc file
                    if self._is_binary_file(file_path):
                        # File binary - encode base64
                        with open(file_path, 'rb') as f:
                            content = base64.b64encode(f.read()).decode('utf-8')
                        file_type = "binary"
                    else:
                        # File text - ƒë·ªçc tr·ª±c ti·∫øp
                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                            content = f.read()
                        file_type = "text"
                    
                    # Th√¥ng tin file
                    file_info = {
                        "type": file_type,
                        "content": content,
                        "size": len(content),
                        "modified": datetime.fromtimestamp(os.path.getmtime(file_path)).isoformat()
                    }
                    
                    resource_data["files"][relative_path] = file_info
                    total_files += 1
                    total_size += file_info["size"]
                    
                    print(f"   ‚úÖ {relative_path} ({file_type})")
                    
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  B·ªè qua {relative_path}: {e}")
        
        # C·∫≠p nh·∫≠t metadata
        resource_data["metadata"]["total_files"] = total_files
        resource_data["metadata"]["total_size"] = total_size
        
        # Ghi file resource
        try:
            with open(self.resource_file, 'w', encoding='utf-8') as f:
                json.dump(resource_data, f, indent=2, ensure_ascii=False)
            
            print(f"\n‚úÖ T·∫°o th√†nh c√¥ng: {self.resource_file}")
            print(f"üìä Th·ªëng k√™:")
            print(f"   ‚Ä¢ T·ªïng files: {total_files}")
            print(f"   ‚Ä¢ T·ªïng k√≠ch th∆∞·ªõc: {total_size:,} bytes")
            print(f"   ‚Ä¢ K√≠ch th∆∞·ªõc resource: {os.path.getsize(self.resource_file):,} bytes")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói ghi file resource: {e}")
            return False
    
    def extract_resource_file(self, force=False):
        """Extract file resource th√†nh folder bot_files"""
        print("üîÑ Extract bot resource file...")
        
        if not os.path.exists(self.resource_file):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file resource: {self.resource_file}")
            return False
        
        # Ki·ªÉm tra folder ƒë√≠ch
        if os.path.exists(self.bot_files_folder):
            if not force:
                print(f"‚ö†Ô∏è  Folder {self.bot_files_folder} ƒë√£ t·ªìn t·∫°i!")
                response = input("Ghi ƒë√®? (y/N): ").lower()
                if response != 'y':
                    print("‚ùå H·ªßy extract")
                    return False
            
            # Backup folder c≈©
            backup_name = f"{self.bot_files_folder}_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            shutil.move(self.bot_files_folder, backup_name)
            print(f"üíæ Backup folder c≈©: {backup_name}")
        
        # ƒê·ªçc resource file
        try:
            with open(self.resource_file, 'r', encoding='utf-8') as f:
                resource_data = json.load(f)
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc resource file: {e}")
            return False
        
        # T·∫°o folder ƒë√≠ch
        os.makedirs(self.bot_files_folder, exist_ok=True)
        
        # Extract files
        extracted_files = 0
        for relative_path, file_info in resource_data["files"].items():
            try:
                full_path = os.path.join(self.bot_files_folder, relative_path)
                
                # T·∫°o th∆∞ m·ª•c cha n·∫øu c·∫ßn
                os.makedirs(os.path.dirname(full_path), exist_ok=True)
                
                # Ghi file
                if file_info["type"] == "binary":
                    # File binary - decode base64
                    content = base64.b64decode(file_info["content"])
                    with open(full_path, 'wb') as f:
                        f.write(content)
                else:
                    # File text
                    with open(full_path, 'w', encoding='utf-8') as f:
                        f.write(file_info["content"])
                
                extracted_files += 1
                print(f"   ‚úÖ {relative_path}")
                
            except Exception as e:
                print(f"   ‚ùå L·ªói extract {relative_path}: {e}")
        
        print(f"\n‚úÖ Extract th√†nh c√¥ng!")
        print(f"üìä Th·ªëng k√™:")
        print(f"   ‚Ä¢ Files extracted: {extracted_files}/{len(resource_data['files'])}")
        print(f"   ‚Ä¢ Folder: {self.bot_files_folder}")
        
        return True
    
    def update_resource_file(self):
        """Update file resource t·ª´ folder bot_files hi·ªán t·∫°i"""
        print("üîÑ Update bot resource file...")
        
        # Backup resource c≈© n·∫øu c√≥
        if os.path.exists(self.resource_file):
            backup_name = f"{self.resource_file}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            shutil.copy2(self.resource_file, backup_name)
            print(f"üíæ Backup resource c≈©: {backup_name}")
        
        # T·∫°o resource m·ªõi
        return self.create_resource_file()
    
    def _is_binary_file(self, file_path):
        """Ki·ªÉm tra file c√≥ ph·∫£i binary kh√¥ng"""
        binary_extensions = {
            '.zip', '.rar', '.7z', '.tar', '.gz',
            '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.ico',
            '.mp3', '.mp4', '.avi', '.mkv', '.wav',
            '.exe', '.dll', '.so', '.dylib',
            '.pdf', '.doc', '.docx', '.xls', '.xlsx'
        }
        
        _, ext = os.path.splitext(file_path.lower())
        if ext in binary_extensions:
            return True
        
        # Ki·ªÉm tra n·ªôi dung file
        try:
            with open(file_path, 'rb') as f:
                chunk = f.read(1024)
                return b'\0' in chunk
        except:
            return True
    
    def info(self):
        """Hi·ªÉn th·ªã th√¥ng tin resource file"""
        if not os.path.exists(self.resource_file):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y resource file: {self.resource_file}")
            return
        
        try:
            with open(self.resource_file, 'r', encoding='utf-8') as f:
                resource_data = json.load(f)
            
            metadata = resource_data["metadata"]
            
            print(f"üìã TH√îNG TIN RESOURCE FILE")
            print(f"=" * 40)
            print(f"File: {self.resource_file}")
            print(f"T·∫°o l√∫c: {metadata['created_at']}")
            print(f"Version: {metadata['version']}")
            print(f"M√¥ t·∫£: {metadata['description']}")
            print(f"T·ªïng files: {metadata['total_files']}")
            print(f"T·ªïng k√≠ch th∆∞·ªõc: {metadata['total_size']:,} bytes")
            print(f"K√≠ch th∆∞·ªõc resource: {os.path.getsize(self.resource_file):,} bytes")
            
            # Top 10 files l·ªõn nh·∫•t
            files_by_size = sorted(
                resource_data["files"].items(),
                key=lambda x: x[1]["size"],
                reverse=True
            )[:10]
            
            print(f"\nüìä TOP 10 FILES L·ªöN NH·∫§T:")
            for path, info in files_by_size:
                print(f"   {info['size']:>8,} bytes - {path}")
                
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc resource file: {e}")

def main():
    """Main function"""
    print("üöÄ BOT RESOURCE MANAGER")
    print("=" * 50)
    
    manager = BotResourceManager()
    
    while True:
        print(f"\nüìã MENU:")
        print("1. T·∫°o resource file t·ª´ bot_files/")
        print("2. Extract resource file th√†nh bot_files/")
        print("3. Update resource file")
        print("4. Xem th√¥ng tin resource file")
        print("5. Tho√°t")
        
        choice = input("\nCh·ªçn (1-5): ").strip()
        
        if choice == "1":
            print("\n" + "="*50)
            manager.create_resource_file()
            
        elif choice == "2":
            print("\n" + "="*50)
            manager.extract_resource_file()
            
        elif choice == "3":
            print("\n" + "="*50)
            manager.update_resource_file()
            
        elif choice == "4":
            print("\n" + "="*50)
            manager.info()
            
        elif choice == "5":
            print("\nüëã T·∫°m bi·ªát!")
            break
            
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main()
